{
	"cPainting_0": {
		"prefix": "cPainting",
		"body": "cPainting$0",
		"description": "(cPainting) () The Scary Class."
	},

	"GetDirection_0": {
		"prefix": "GetDirection",
		"body": "GetDirection()$0",
		"description": "(cPainting) (number) Returns the direction the painting faces. Directions: ZP - 0, ZM - 2, XM - 1, XP - 3. Note that these are not the BLOCK_FACE constants."
	},

	"GetName_0": {
		"prefix": "GetName",
		"body": "GetName()$0",
		"description": "(cPainting) (string) Returns the name of the painting"
	},

	"cThrownEnderPearlEntity_0": {
		"prefix": "cThrownEnderPearlEntity",
		"body": "cThrownEnderPearlEntity$0",
		"description": "(cThrownEnderPearlEntity) () The Scary Class."
	},

	"cCryptoHash_0": {
		"prefix": "cCryptoHash",
		"body": "cCryptoHash$0",
		"description": "(cCryptoHash) () The Scary Class."
	},

	"sha1_0": {
		"prefix": "sha1",
		"body": "sha1(${1:Data string})$0",
		"description": "(cCryptoHash) (string) Calculates the sha1 hash of the data, returns it as a raw (binary) string of 20 characters."
	},

	"md5HexString_0": {
		"prefix": "md5HexString",
		"body": "md5HexString(${1:Data string})$0",
		"description": "(cCryptoHash) (string) Calculates the md5 hash of the data, returns it as a hex-encoded string of 32 characters."
	},

	"sha1HexString_0": {
		"prefix": "sha1HexString",
		"body": "sha1HexString(${1:Data string})$0",
		"description": "(cCryptoHash) (string) Calculates the sha1 hash of the data, returns it as a hex-encoded string of 40 characters."
	},

	"md5_0": {
		"prefix": "md5",
		"body": "md5(${1:Data string})$0",
		"description": "(cCryptoHash) (string) Calculates the md5 hash of the data, returns it as a raw (binary) string of 16 characters."
	},

	"cFurnaceEntity_0": {
		"prefix": "cFurnaceEntity",
		"body": "cFurnaceEntity$0",
		"description": "(cFurnaceEntity) () The Scary Class."
	},

	"GetCookTimeLeft_0": {
		"prefix": "GetCookTimeLeft",
		"body": "GetCookTimeLeft()$0",
		"description": "(cFurnaceEntity) (number) Returns the time until the current item finishes cooking, in ticks"
	},

	"GetFuelSlot_0": {
		"prefix": "GetFuelSlot",
		"body": "GetFuelSlot()$0",
		"description": "(cFurnaceEntity) (cItem) Returns the item in the fuel slot"
	},

	"GetFuelBurnTimeLeft_0": {
		"prefix": "GetFuelBurnTimeLeft",
		"body": "GetFuelBurnTimeLeft()$0",
		"description": "(cFurnaceEntity) (number) Returns the time until the current fuel is depleted, in ticks"
	},

	"GetInputSlot_0": {
		"prefix": "GetInputSlot",
		"body": "GetInputSlot()$0",
		"description": "(cFurnaceEntity) (cItem) Returns the item in the input slot"
	},

	"SetOutputSlot_0": {
		"prefix": "SetOutputSlot",
		"body": "SetOutputSlot(${1:Output cItem})$0",
		"description": "(cFurnaceEntity) () Sets the item in the output slot"
	},

	"SetInputSlot_0": {
		"prefix": "SetInputSlot",
		"body": "SetInputSlot(${1:Input cItem})$0",
		"description": "(cFurnaceEntity) () Sets the item in the input slot"
	},

	"GetTimeCooked_0": {
		"prefix": "GetTimeCooked",
		"body": "GetTimeCooked()$0",
		"description": "(cFurnaceEntity) (number) Returns the time that the current item has been cooking, in ticks"
	},

	"SetFuelSlot_0": {
		"prefix": "SetFuelSlot",
		"body": "SetFuelSlot(${1:Fuel cItem})$0",
		"description": "(cFurnaceEntity) () Sets the item in the fuel slot"
	},

	"HasFuelTimeLeft_0": {
		"prefix": "HasFuelTimeLeft",
		"body": "HasFuelTimeLeft()$0",
		"description": "(cFurnaceEntity) (boolean) Returns true if there's time before the current fuel is depleted"
	},

	"GetAndResetReward_0": {
		"prefix": "GetAndResetReward",
		"body": "GetAndResetReward()$0",
		"description": "(cFurnaceEntity) (number) Calculates, resets, and returns the experience reward in this furnace"
	},

	"GetOutputSlot_0": {
		"prefix": "GetOutputSlot",
		"body": "GetOutputSlot()$0",
		"description": "(cFurnaceEntity) (cItem) Returns the item in the output slot"
	},

	"ContentsWidth_0": {
		"prefix": "ContentsWidth",
		"body": "ContentsWidth$0",
		"description": "(cFurnaceEntity) () Width (X) of the {{cItemGrid|cItemGrid}} representing the contents"
	},

	"ContentsHeight_0": {
		"prefix": "ContentsHeight",
		"body": "ContentsHeight$0",
		"description": "(cFurnaceEntity) () Height (Y) of the {{cItemGrid|cItemGrid}} representing the contents"
	},

	"fsOutput_0": {
		"prefix": "fsOutput",
		"body": "fsOutput$0",
		"description": "(cFurnaceEntity) () Index of the output slot"
	},

	"fsFuel_0": {
		"prefix": "fsFuel",
		"body": "fsFuel$0",
		"description": "(cFurnaceEntity) () Index of the fuel slot"
	},

	"fsInput_0": {
		"prefix": "fsInput",
		"body": "fsInput$0",
		"description": "(cFurnaceEntity) () Index of the input slot"
	},

	"cBrewingstandEntity_0": {
		"prefix": "cBrewingstandEntity",
		"body": "cBrewingstandEntity$0",
		"description": "(cBrewingstandEntity) () The Scary Class."
	},

	"SetFuelSlot_1": {
		"prefix": "SetFuelSlot",
		"body": "SetFuelSlot(${1:FuelSlot cItem})$0",
		"description": "(cBrewingstandEntity) () Sets the item in the top left fuel slot"
	},

	"GetFuelSlot_1": {
		"prefix": "GetFuelSlot",
		"body": "GetFuelSlot()$0",
		"description": "(cBrewingstandEntity) (cItem) Returns the item in the top left fuel slot"
	},

	"SetRightBottleSlot_0": {
		"prefix": "SetRightBottleSlot",
		"body": "SetRightBottleSlot(${1:RightSlot cItem})$0",
		"description": "(cBrewingstandEntity) () Sets the item in the right bottle slot"
	},

	"GetTimeBrewed_0": {
		"prefix": "GetTimeBrewed",
		"body": "GetTimeBrewed()$0",
		"description": "(cBrewingstandEntity) (number) Returns the time that the current items has been brewing, in ticks"
	},

	"GetBrewingTimeLeft_0": {
		"prefix": "GetBrewingTimeLeft",
		"body": "GetBrewingTimeLeft()$0",
		"description": "(cBrewingstandEntity) (number) Returns the time until the current items finishes brewing, in ticks"
	},

	"GetIndgredientSlot_0": {
		"prefix": "GetIndgredientSlot",
		"body": "GetIndgredientSlot()$0",
		"description": "(cBrewingstandEntity) (cItem) Returns the item in the ingredient slot"
	},

	"GetLeftBottleSlot_0": {
		"prefix": "GetLeftBottleSlot",
		"body": "GetLeftBottleSlot()$0",
		"description": "(cBrewingstandEntity) (cItem) Returns the item in the left bottle slot"
	},

	"SetIngredientSlot_0": {
		"prefix": "SetIngredientSlot",
		"body": "SetIngredientSlot(${1:Ingredient cItem})$0",
		"description": "(cBrewingstandEntity) () Sets the item in the ingredient bottle slot"
	},

	"SetLeftBottleSlot_0": {
		"prefix": "SetLeftBottleSlot",
		"body": "SetLeftBottleSlot(${1:LeftSlot cItem})$0",
		"description": "(cBrewingstandEntity) () Sets the item in the left bottle slot"
	},

	"SetMiddleBottleSlot_0": {
		"prefix": "SetMiddleBottleSlot",
		"body": "SetMiddleBottleSlot(${1:MiddleSlot cItem})$0",
		"description": "(cBrewingstandEntity) () Sets the item in the middle bottle slot"
	},

	"GetRemainingFuel_0": {
		"prefix": "GetRemainingFuel",
		"body": "GetRemainingFuel()$0",
		"description": "(cBrewingstandEntity) (number) Returns the remaining fuel that is left. It's the amount of brewing operations that can be done (20 for one blaze powder)."
	},

	"GetRightBottleSlot_0": {
		"prefix": "GetRightBottleSlot",
		"body": "GetRightBottleSlot()$0",
		"description": "(cBrewingstandEntity) (cItem) Returns the item in the right bottle slot"
	},

	"GetResultItem_0": {
		"prefix": "GetResultItem",
		"body": "GetResultItem(${1:SlotNumber number})$0",
		"description": "(cBrewingstandEntity) (cItem) Returns the expected result item for the given slot number."
	},

	"GetMiddleBottleSlot_0": {
		"prefix": "GetMiddleBottleSlot",
		"body": "GetMiddleBottleSlot()$0",
		"description": "(cBrewingstandEntity) (cItem) Returns the item in the middle bottle slot"
	},

	"ContentsWidth_1": {
		"prefix": "ContentsWidth",
		"body": "ContentsWidth$0",
		"description": "(cBrewingstandEntity) () Width (X) of the {{cItemGrid|cItemGrid}} representing the contents"
	},

	"ContentsHeight_1": {
		"prefix": "ContentsHeight",
		"body": "ContentsHeight$0",
		"description": "(cBrewingstandEntity) () Height (Y) of the {{cItemGrid|cItemGrid}} representing the contents"
	},

	"bsMiddleBottle_0": {
		"prefix": "bsMiddleBottle",
		"body": "bsMiddleBottle$0",
		"description": "(cBrewingstandEntity) () Index of the middle bottle slot"
	},

	"bsRightBottle_0": {
		"prefix": "bsRightBottle",
		"body": "bsRightBottle$0",
		"description": "(cBrewingstandEntity) () Index of the right bottle slot"
	},

	"bsFuel_0": {
		"prefix": "bsFuel",
		"body": "bsFuel$0",
		"description": "(cBrewingstandEntity) () Index of the top left fuel slot"
	},

	"bsLeftBottle_0": {
		"prefix": "bsLeftBottle",
		"body": "bsLeftBottle$0",
		"description": "(cBrewingstandEntity) () Index of the left bottle slot"
	},

	"bsIngredient_0": {
		"prefix": "bsIngredient",
		"body": "bsIngredient$0",
		"description": "(cBrewingstandEntity) () Index of the ingredient slot"
	},

	"cTracer_0": {
		"prefix": "cTracer",
		"body": "cTracer$0",
		"description": "(cTracer) () The Scary Class."
	},

	"Trace_0": {
		"prefix": "Trace",
		"body": "Trace()$0",
		"description": "(cTracer) () <b>OBSOLETE</b>, use the {{cLineBlockTracer}} class instead."
	},

	"cCuboid_0": {
		"prefix": "cCuboid",
		"body": "cCuboid$0",
		"description": "(cCuboid) () The Scary Class."
	},

	"p2_0": {
		"prefix": "p2",
		"body": "p2$0",
		"description": "(cCuboid) () The second corner. Usually the larger of the two coords in each set"
	},

	"p1_0": {
		"prefix": "p1",
		"body": "p1$0",
		"description": "(cCuboid) () The first corner. Usually the lesser of the two coords in each set"
	},

	"GetVolume_0": {
		"prefix": "GetVolume",
		"body": "GetVolume()$0",
		"description": "(cCuboid) (number) Returns the volume of the cuboid, in blocks. Note that the volume considers both coords inclusive. Works on unsorted cuboids, too."
	},

	"Assign_0": {
		"prefix": "Assign",
		"body": "Assign(${1:SrcCuboid cCuboid})$0",
		"description": "(cCuboid) () Copies all the coords from the src cuboid to this cuboid. Sort-state is ignored."
	},

	"Assign_1": {
		"prefix": "Assign",
		"body": "Assign(${1:Point1 Vector3i}, ${2:Point2 Vector3i})$0",
		"description": "(cCuboid) () Assigns all the coords to the specified values. Sort-state is ignored."
	},

	"Expand_0": {
		"prefix": "Expand",
		"body": "Expand(${1:SubMinX number}, ${2:AddMaxX number}, ${3:SubMinY number}, ${4:AddMaxY number}, ${5:SubMinZ number}, ${6:AddMaxZ number})$0",
		"description": "(cCuboid) () Expands the cuboid by the specified amount in each direction. Works on unsorted cuboids as well. NOTE: this function doesn't check for underflows."
	},

	"DoesIntersect_0": {
		"prefix": "DoesIntersect",
		"body": "DoesIntersect(${1:OtherCuboid cCuboid})$0",
		"description": "(cCuboid) (boolean) Returns true if this cuboid has at least one voxel in common with OtherCuboid. Note that edges are considered inclusive. Assumes both sorted."
	},

	"Sort_0": {
		"prefix": "Sort",
		"body": "Sort()$0",
		"description": "(cCuboid) () Sorts the internal representation so that p1 contains the lesser coords and p2 contains the greater coords."
	},

	"Clamp_0": {
		"prefix": "Clamp",
		"body": "Clamp(${1:Limits cCuboid})$0",
		"description": "(cCuboid) () Clamps this cuboid, so that it doesn't reach outside of Limits in any direction. Assumes both cuboids are sorted."
	},

	"ClampSize_0": {
		"prefix": "ClampSize",
		"body": "ClampSize(${1:MaxSize Vector3i})$0",
		"description": "(cCuboid) () Clamps this cuboid's p2 so that the cuboid's size doesn't exceed the specified max size. Assumes the cuboid is sorted."
	},

	"Move_0": {
		"prefix": "Move",
		"body": "Move(${1:Offset Vector3i})$0",
		"description": "(cCuboid) () Adds the specified offsets to each respective coord, effectively moving the Cuboid. Sort-state is ignored and preserved."
	},

	"DifZ_0": {
		"prefix": "DifZ",
		"body": "DifZ()$0",
		"description": "(cCuboid) (number) Returns the difference between the two Z coords (Z-size minus 1). Assumes sorted."
	},

	"ClampX_0": {
		"prefix": "ClampX",
		"body": "ClampX(${1:MinX number}, ${2:MaxX number})$0",
		"description": "(cCuboid) () Clamps both X coords into the range provided. Sortedness-agnostic."
	},

	"DifX_0": {
		"prefix": "DifX",
		"body": "DifX()$0",
		"description": "(cCuboid) (number) Returns the difference between the two X coords (X-size minus 1). Assumes sorted."
	},

	"cCuboid_0": {
		"prefix": "cCuboid",
		"body": "cCuboid()$0",
		"description": "(cCuboid) (cCuboid) Creates a new Cuboid object with all-zero coords"
	},

	"cCuboid_1": {
		"prefix": "cCuboid",
		"body": "cCuboid(${1:OtherCuboid cCuboid})$0",
		"description": "(cCuboid) (cCuboid) Creates a new Cuboid object as a copy of OtherCuboid"
	},

	"cCuboid_2": {
		"prefix": "cCuboid",
		"body": "cCuboid(${1:Point1 Vector3i}, ${2:Point2 Vector3i})$0",
		"description": "(cCuboid) (cCuboid) Creates a new Cuboid object with the specified points as its corners."
	},

	"cCuboid_3": {
		"prefix": "cCuboid",
		"body": "cCuboid(${1:X number}, ${2:Y number}, ${3:Z number})$0",
		"description": "(cCuboid) (cCuboid) Creates a new Cuboid object with the specified point as both its corners (the cuboid has a size of 1 in each direction)."
	},

	"ClampZ_0": {
		"prefix": "ClampZ",
		"body": "ClampZ(${1:MinZ number}, ${2:MaxZ number})$0",
		"description": "(cCuboid) () Clamps both Z coords into the range provided. Sortedness-agnostic."
	},

	"IsSorted_0": {
		"prefix": "IsSorted",
		"body": "IsSorted()$0",
		"description": "(cCuboid) (boolean) Returns true if this cuboid is sorted"
	},

	"Engulf_0": {
		"prefix": "Engulf",
		"body": "Engulf(${1:Point Vector3i})$0",
		"description": "(cCuboid) () If needed, expands the cuboid to include the specified point. Doesn't shrink. Assumes sorted. "
	},

	"ClampY_0": {
		"prefix": "ClampY",
		"body": "ClampY(${1:MinY number}, ${2:MaxY number})$0",
		"description": "(cCuboid) () Clamps both Y coords into the range provided. Sortedness-agnostic."
	},

	"IsInside_0": {
		"prefix": "IsInside",
		"body": "IsInside(${1:Point Vector3i})$0",
		"description": "(cCuboid) (boolean) Returns true if the specified point (integral coords) is inside this cuboid. Assumes sorted."
	},

	"IsInside_1": {
		"prefix": "IsInside",
		"body": "IsInside(${1:Point Vector3d})$0",
		"description": "(cCuboid) (boolean) Returns true if the specified point (floating-point coords) is inside this cuboid. Assumes sorted."
	},

	"IsCompletelyInside_0": {
		"prefix": "IsCompletelyInside",
		"body": "IsCompletelyInside(${1:OuterCuboid cCuboid})$0",
		"description": "(cCuboid) (boolean) Returns true if this cuboid is completely inside (in all directions) in OuterCuboid. Assumes both sorted."
	},

	"DifY_0": {
		"prefix": "DifY",
		"body": "DifY()$0",
		"description": "(cCuboid) (number) Returns the difference between the two Y coords (Y-size minus 1). Assumes sorted."
	},

	"sqlite3_0": {
		"prefix": "sqlite3",
		"body": "sqlite3$0",
		"description": "(sqlite3) () The Scary Class."
	},

	"version_0": {
		"prefix": "version",
		"body": "version()$0",
		"description": "(sqlite3) (string) Returns a string with SQLite version information, in the form 'x.y[.z]'."
	},

	"open_memory_0": {
		"prefix": "open_memory",
		"body": "open_memory()$0",
		"description": "(sqlite3) (DBClass SQLite DB objec) Opens an SQLite database in memory and returns its handle. In case of an error, the function returns nil, an error code and an error message. (In-memory databases are volatile as they are never stored on disk.)"
	},

	"open_0": {
		"prefix": "open",
		"body": "open(${1:FileName string})$0",
		"description": "(sqlite3) (DBClass SQLite DB objec) Opens (or creates if it does not exist) an SQLite database with name filename and returns itshandle (the returned object should be used for all further method calls in connectionwith this specific database, see{{http://lua.sqlite.org/index.cgi/doc/tip/doc/lsqlite3.wiki#database_methods|Database methods}}).Example:<pre class='prettyprint lang-lua'>-- open the database:myDB = sqlite3.open('MyDatabaseFile.sqlite3')-- do some database calls...-- Close the database:myDB:close()</pre>"
	},

	"complete_0": {
		"prefix": "complete",
		"body": "complete(${1:SQL string})$0",
		"description": "(sqlite3) (boolean) Returns true if the input string comprises one or more complete SQL statements."
	},

	"cEnchantments_0": {
		"prefix": "cEnchantments",
		"body": "cEnchantments$0",
		"description": "(cEnchantments) () The Scary Class."
	},

	"enchKnockback_0": {
		"prefix": "enchKnockback",
		"body": "enchKnockback$0",
		"description": "(cEnchantments) () "
	},

	"enchThorns_0": {
		"prefix": "enchThorns",
		"body": "enchThorns$0",
		"description": "(cEnchantments) () "
	},

	"enchFlame_0": {
		"prefix": "enchFlame",
		"body": "enchFlame$0",
		"description": "(cEnchantments) () "
	},

	"enchEfficiency_0": {
		"prefix": "enchEfficiency",
		"body": "enchEfficiency$0",
		"description": "(cEnchantments) () "
	},

	"enchFireProtection_0": {
		"prefix": "enchFireProtection",
		"body": "enchFireProtection$0",
		"description": "(cEnchantments) () "
	},

	"enchProtection_0": {
		"prefix": "enchProtection",
		"body": "enchProtection$0",
		"description": "(cEnchantments) () "
	},

	"enchAquaAffinity_0": {
		"prefix": "enchAquaAffinity",
		"body": "enchAquaAffinity$0",
		"description": "(cEnchantments) () "
	},

	"enchFeatherFalling_0": {
		"prefix": "enchFeatherFalling",
		"body": "enchFeatherFalling$0",
		"description": "(cEnchantments) () "
	},

	"enchLooting_0": {
		"prefix": "enchLooting",
		"body": "enchLooting$0",
		"description": "(cEnchantments) () "
	},

	"enchUnbreaking_0": {
		"prefix": "enchUnbreaking",
		"body": "enchUnbreaking$0",
		"description": "(cEnchantments) () "
	},

	"enchSmite_0": {
		"prefix": "enchSmite",
		"body": "enchSmite$0",
		"description": "(cEnchantments) () "
	},

	"enchLure_0": {
		"prefix": "enchLure",
		"body": "enchLure$0",
		"description": "(cEnchantments) () "
	},

	"enchFortune_0": {
		"prefix": "enchFortune",
		"body": "enchFortune$0",
		"description": "(cEnchantments) () "
	},

	"enchFireAspect_0": {
		"prefix": "enchFireAspect",
		"body": "enchFireAspect$0",
		"description": "(cEnchantments) () "
	},

	"enchProjectileProtection_0": {
		"prefix": "enchProjectileProtection",
		"body": "enchProjectileProtection$0",
		"description": "(cEnchantments) () "
	},

	"enchBlastProtection_0": {
		"prefix": "enchBlastProtection",
		"body": "enchBlastProtection$0",
		"description": "(cEnchantments) () "
	},

	"enchPunch_0": {
		"prefix": "enchPunch",
		"body": "enchPunch$0",
		"description": "(cEnchantments) () "
	},

	"enchRespiration_0": {
		"prefix": "enchRespiration",
		"body": "enchRespiration$0",
		"description": "(cEnchantments) () "
	},

	"enchPower_0": {
		"prefix": "enchPower",
		"body": "enchPower$0",
		"description": "(cEnchantments) () "
	},

	"enchLuckOfTheSea_0": {
		"prefix": "enchLuckOfTheSea",
		"body": "enchLuckOfTheSea$0",
		"description": "(cEnchantments) () "
	},

	"enchSharpness_0": {
		"prefix": "enchSharpness",
		"body": "enchSharpness$0",
		"description": "(cEnchantments) () "
	},

	"enchInfinity_0": {
		"prefix": "enchInfinity",
		"body": "enchInfinity$0",
		"description": "(cEnchantments) () "
	},

	"enchSilkTouch_0": {
		"prefix": "enchSilkTouch",
		"body": "enchSilkTouch$0",
		"description": "(cEnchantments) () "
	},

	"enchBaneOfArthropods_0": {
		"prefix": "enchBaneOfArthropods",
		"body": "enchBaneOfArthropods$0",
		"description": "(cEnchantments) () "
	},

	"Clear_0": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cEnchantments) () Removes all enchantments"
	},

	"AddFromString_0": {
		"prefix": "AddFromString",
		"body": "AddFromString(${1:StringSpec string})$0",
		"description": "(cEnchantments) () Adds the enchantments in the string description into the object. If a specified enchantment already existed, it is overwritten."
	},

	"GetLevel_0": {
		"prefix": "GetLevel",
		"body": "GetLevel(${1:EnchantmentNumID number})$0",
		"description": "(cEnchantments) (number) Returns the level of the specified enchantment stored in this object; 0 if not stored"
	},

	"IsEmpty_0": {
		"prefix": "IsEmpty",
		"body": "IsEmpty()$0",
		"description": "(cEnchantments) (boolean) Returns true if the object stores no enchantments"
	},

	"SetLevel_0": {
		"prefix": "SetLevel",
		"body": "SetLevel(${1:EnchantmentNumID number}, ${2:Level number})$0",
		"description": "(cEnchantments) () Sets the level for the specified enchantment, adding it if not stored before, or removing it if Level < = 0"
	},

	"cEnchantments_0": {
		"prefix": "cEnchantments",
		"body": "cEnchantments()$0",
		"description": "(cEnchantments) (cEnchantments) Creates a new empty cEnchantments object"
	},

	"cEnchantments_1": {
		"prefix": "cEnchantments",
		"body": "cEnchantments(${1:StringSpec string})$0",
		"description": "(cEnchantments) (cEnchantments) Creates a new cEnchantments object filled with enchantments based on the string description"
	},

	"operator_eq_0": {
		"prefix": "operator_eq",
		"body": "operator_eq(${1:OtherEnchantments cEnchantments})$0",
		"description": "(cEnchantments) (boolean) Returns true if this enchantments object has the same enchantments as OtherEnchantments."
	},

	"Count_0": {
		"prefix": "Count",
		"body": "Count()$0",
		"description": "(cEnchantments) (number) Get the count of enchantments contained within the class"
	},

	"ToString_0": {
		"prefix": "ToString",
		"body": "ToString()$0",
		"description": "(cEnchantments) (string) Returns the string description of all the enchantments stored in this object, in numerical-ID form"
	},

	"StringToEnchantmentID_0": {
		"prefix": "StringToEnchantmentID",
		"body": "StringToEnchantmentID(${1:EnchantmentName string})$0",
		"description": "(cEnchantments) (number) Returns the enchantment numerical ID, -1 if not understood. Case insensitive. Also understands plain numbers."
	},

	"CanAddEnchantment_0": {
		"prefix": "CanAddEnchantment",
		"body": "CanAddEnchantment(${1:EnchantmentNumID number})$0",
		"description": "(cEnchantments) (boolean) Returns true if the specified enchantment is not mutually exclusive with any of the enchantments stored by the object."
	},

	"Add_0": {
		"prefix": "Add",
		"body": "Add(${1:Other cEnchantments})$0",
		"description": "(cEnchantments) () Adds the enchantments contained in Other into this object. Existing enchantments are preserved, unless Other specifies a different level, in which case the level is changed to the Other's one."
	},

	"cMonster_0": {
		"prefix": "cMonster",
		"body": "cMonster$0",
		"description": "(cMonster) () The Scary Class."
	},

	"GetMobType_0": {
		"prefix": "GetMobType",
		"body": "GetMobType()$0",
		"description": "(cMonster) (MobType eMonsterTyp) Returns the type of this mob ({{Globals#eMonsterType|mtXXX}} constant)"
	},

	"GetLeashedTo_0": {
		"prefix": "GetLeashedTo",
		"body": "GetLeashedTo()$0",
		"description": "(cMonster) (LeashedTo cEntit) Returns the entity to where this mob is leashed, returns nil if it's not leashed"
	},

	"GetAge_0": {
		"prefix": "GetAge",
		"body": "GetAge()$0",
		"description": "(cMonster) (number) Returns the age of the monster"
	},

	"MobTypeToVanillaName_0": {
		"prefix": "MobTypeToVanillaName",
		"body": "MobTypeToVanillaName(${1:MobType eMonsterType})$0",
		"description": "(cMonster) (string) Returns the vanilla name of the given mob type, or empty string if unknown type."
	},

	"BurnsInDaylight_0": {
		"prefix": "BurnsInDaylight",
		"body": "BurnsInDaylight()$0",
		"description": "(cMonster) (boolean) Returns whether the mob burns in daylight."
	},

	"HasCustomName_0": {
		"prefix": "HasCustomName",
		"body": "HasCustomName()$0",
		"description": "(cMonster) (boolean) Returns true if the monster has a custom name."
	},

	"IsBaby_0": {
		"prefix": "IsBaby",
		"body": "IsBaby()$0",
		"description": "(cMonster) (boolean) Returns true if the monster is a baby"
	},

	"FamilyFromType_0": {
		"prefix": "FamilyFromType",
		"body": "FamilyFromType(${1:MobType eMonsterType})$0",
		"description": "(cMonster) (MobFamily cMonster#eFamil) Returns the mob family ({{cMonster#eFamily|mfXXX}} constants) based on the mob type ({{Globals#eMonsterType|mtXXX}} constants)"
	},

	"LeashTo_0": {
		"prefix": "LeashTo",
		"body": "LeashTo(${1:Entity cEntity})$0",
		"description": "(cMonster) () Leash the monster to an entity."
	},

	"SetCanBeLeashed_0": {
		"prefix": "SetCanBeLeashed",
		"body": "SetCanBeLeashed(${1:CanBeLeashed boolean})$0",
		"description": "(cMonster) () Sets whether the mob can be leashed, for extensibility in plugins"
	},

	"Unleash_0": {
		"prefix": "Unleash",
		"body": "Unleash(${1:ShouldDropLeashPickup boolean})$0",
		"description": "(cMonster) () Unleash the monster."
	},

	"StringToMobType_0": {
		"prefix": "StringToMobType",
		"body": "StringToMobType(${1:MobTypeString string})$0",
		"description": "(cMonster) (MobType eMonsterTyp) Returns the mob type ({{Globals#eMonsterType|mtXXX}} constant) parsed from the string type ('creeper'), or mtInvalidType if unrecognized."
	},

	"SetAge_0": {
		"prefix": "SetAge",
		"body": "SetAge(${1:Age number})$0",
		"description": "(cMonster) () Sets the age of the monster"
	},

	"SetRelativeWalkSpeed_0": {
		"prefix": "SetRelativeWalkSpeed",
		"body": "SetRelativeWalkSpeed(${1:RelativeWalkSpeed number})$0",
		"description": "(cMonster) () Sets the relative walk speed of this mob. The default relative speed is 1.0."
	},

	"SetCustomNameAlwaysVisible_0": {
		"prefix": "SetCustomNameAlwaysVisible",
		"body": "SetCustomNameAlwaysVisible(${1:IsCustomNameAlwaysVisible boolean})$0",
		"description": "(cMonster) () Sets the custom name visiblity of this monster. If it's false, you only see the name when you sight the mob. If it's true, you always see the custom name."
	},

	"CanBeLeashed_0": {
		"prefix": "CanBeLeashed",
		"body": "CanBeLeashed()$0",
		"description": "(cMonster) (boolean) Returns whether the mob can be leashed."
	},

	"SetCustomName_0": {
		"prefix": "SetCustomName",
		"body": "SetCustomName(${1:CustomName string})$0",
		"description": "(cMonster) () Sets the custom name of the monster. You see the name over the monster. If you want to disable the custom name, simply set an empty string."
	},

	"MoveToPosition_0": {
		"prefix": "MoveToPosition",
		"body": "MoveToPosition(${1:Position Vector3d})$0",
		"description": "(cMonster) () Start moving (using a pathfinder) towards the specified position"
	},

	"SetBurnsInDaylight_0": {
		"prefix": "SetBurnsInDaylight",
		"body": "SetBurnsInDaylight(${1:BurnsInDaylight boolean})$0",
		"description": "(cMonster) () Sets whether the mob burns in daylight. Only evaluated at next burn-decision tick"
	},

	"GetMobFamily_0": {
		"prefix": "GetMobFamily",
		"body": "GetMobFamily()$0",
		"description": "(cMonster) (MobFamily cMonster#eFamil) Returns this mob's family ({{cMonster#eFamily|mfXXX}} constant)"
	},

	"IsLeashed_0": {
		"prefix": "IsLeashed",
		"body": "IsLeashed()$0",
		"description": "(cMonster) (boolean) Returns whether the monster is leashed to an entity."
	},

	"MobTypeToString_0": {
		"prefix": "MobTypeToString",
		"body": "MobTypeToString(${1:MobType eMonsterType})$0",
		"description": "(cMonster) (string) Returns the string representing the given mob type ({{Globals#eMonsterType|mtXXX}} constant), or empty string if unknown type."
	},

	"GetSpawnDelay_0": {
		"prefix": "GetSpawnDelay",
		"body": "GetSpawnDelay(${1:MobFamily cMonster#eFamily})$0",
		"description": "(cMonster) (number) Returns the spawn delay  - the number of game ticks between spawn attempts - for the specified mob family."
	},

	"IsCustomNameAlwaysVisible_0": {
		"prefix": "IsCustomNameAlwaysVisible",
		"body": "IsCustomNameAlwaysVisible()$0",
		"description": "(cMonster) (boolean) Is the custom name of this monster always visible? If not, you only see the name when you sight the mob."
	},

	"GetRelativeWalkSpeed_0": {
		"prefix": "GetRelativeWalkSpeed",
		"body": "GetRelativeWalkSpeed()$0",
		"description": "(cMonster) (number) Returns the relative walk speed of this mob. Standard is 1.0"
	},

	"GetCustomName_0": {
		"prefix": "GetCustomName",
		"body": "GetCustomName()$0",
		"description": "(cMonster) (string) Gets the custom name of the monster. If no custom name is set, the function returns an empty string."
	},

	"mfMaxplusone_0": {
		"prefix": "mfMaxplusone",
		"body": "mfMaxplusone$0",
		"description": "(cMonster) () The maximum family value, plus one. Returned when monster family not recognized."
	},

	"mtHorse_0": {
		"prefix": "mtHorse",
		"body": "mtHorse$0",
		"description": "(cMonster) () "
	},

	"mtZombie_0": {
		"prefix": "mtZombie",
		"body": "mtZombie$0",
		"description": "(cMonster) () "
	},

	"mtMagmaCube_0": {
		"prefix": "mtMagmaCube",
		"body": "mtMagmaCube$0",
		"description": "(cMonster) () "
	},

	"mtPig_0": {
		"prefix": "mtPig",
		"body": "mtPig$0",
		"description": "(cMonster) () "
	},

	"mfHostile_0": {
		"prefix": "mfHostile",
		"body": "mfHostile$0",
		"description": "(cMonster) () Family: hostile (blaze, cavespider, creeper, enderdragon, enderman, ghast, giant, magmacube, silverfish, skeleton, slime, spider, witch, wither, zombie, zombiepigman)"
	},

	"mtSnowGolem_0": {
		"prefix": "mtSnowGolem",
		"body": "mtSnowGolem$0",
		"description": "(cMonster) () "
	},

	"mtBlaze_0": {
		"prefix": "mtBlaze",
		"body": "mtBlaze$0",
		"description": "(cMonster) () "
	},

	"mtZombiePigman_0": {
		"prefix": "mtZombiePigman",
		"body": "mtZombiePigman$0",
		"description": "(cMonster) () "
	},

	"mtChicken_0": {
		"prefix": "mtChicken",
		"body": "mtChicken$0",
		"description": "(cMonster) () "
	},

	"mtEnderman_0": {
		"prefix": "mtEnderman",
		"body": "mtEnderman$0",
		"description": "(cMonster) () "
	},

	"mtEnderDragon_0": {
		"prefix": "mtEnderDragon",
		"body": "mtEnderDragon$0",
		"description": "(cMonster) () "
	},

	"mtInvalidType_0": {
		"prefix": "mtInvalidType",
		"body": "mtInvalidType$0",
		"description": "(cMonster) () Invalid monster type. Returned when monster type not recognized"
	},

	"mtWolf_0": {
		"prefix": "mtWolf",
		"body": "mtWolf$0",
		"description": "(cMonster) () "
	},

	"mtSilverfish_0": {
		"prefix": "mtSilverfish",
		"body": "mtSilverfish$0",
		"description": "(cMonster) () "
	},

	"mtGhast_0": {
		"prefix": "mtGhast",
		"body": "mtGhast$0",
		"description": "(cMonster) () "
	},

	"mfWater_0": {
		"prefix": "mfWater",
		"body": "mfWater$0",
		"description": "(cMonster) () Family: water (squid)"
	},

	"mfAmbient_0": {
		"prefix": "mfAmbient",
		"body": "mfAmbient$0",
		"description": "(cMonster) () Family: ambient (bat)"
	},

	"mtCow_0": {
		"prefix": "mtCow",
		"body": "mtCow$0",
		"description": "(cMonster) () "
	},

	"mtSkeleton_0": {
		"prefix": "mtSkeleton",
		"body": "mtSkeleton$0",
		"description": "(cMonster) () "
	},

	"mtIronGolem_0": {
		"prefix": "mtIronGolem",
		"body": "mtIronGolem$0",
		"description": "(cMonster) () "
	},

	"mtSheep_0": {
		"prefix": "mtSheep",
		"body": "mtSheep$0",
		"description": "(cMonster) () "
	},

	"mtCaveSpider_0": {
		"prefix": "mtCaveSpider",
		"body": "mtCaveSpider$0",
		"description": "(cMonster) () "
	},

	"mtSpider_0": {
		"prefix": "mtSpider",
		"body": "mtSpider$0",
		"description": "(cMonster) () "
	},

	"mtVillager_0": {
		"prefix": "mtVillager",
		"body": "mtVillager$0",
		"description": "(cMonster) () "
	},

	"mtSquid_0": {
		"prefix": "mtSquid",
		"body": "mtSquid$0",
		"description": "(cMonster) () "
	},

	"mtWitch_0": {
		"prefix": "mtWitch",
		"body": "mtWitch$0",
		"description": "(cMonster) () "
	},

	"mtSlime_0": {
		"prefix": "mtSlime",
		"body": "mtSlime$0",
		"description": "(cMonster) () "
	},

	"mtMooshroom_0": {
		"prefix": "mtMooshroom",
		"body": "mtMooshroom$0",
		"description": "(cMonster) () "
	},

	"mtOcelot_0": {
		"prefix": "mtOcelot",
		"body": "mtOcelot$0",
		"description": "(cMonster) () "
	},

	"mfPassive_0": {
		"prefix": "mfPassive",
		"body": "mfPassive$0",
		"description": "(cMonster) () Family: passive (chicken, cow, horse, irongolem, mooshroom, ocelot, pig, sheep, snowgolem, villager, wolf)"
	},

	"mtGiant_0": {
		"prefix": "mtGiant",
		"body": "mtGiant$0",
		"description": "(cMonster) () "
	},

	"mtCreeper_0": {
		"prefix": "mtCreeper",
		"body": "mtCreeper$0",
		"description": "(cMonster) () "
	},

	"mtWither_0": {
		"prefix": "mtWither",
		"body": "mtWither$0",
		"description": "(cMonster) () "
	},

	"mtBat_0": {
		"prefix": "mtBat",
		"body": "mtBat$0",
		"description": "(cMonster) () "
	},

	"cBeaconEntity_0": {
		"prefix": "cBeaconEntity",
		"body": "cBeaconEntity$0",
		"description": "(cBeaconEntity) () The Scary Class."
	},

	"GetPrimaryEffect_0": {
		"prefix": "GetPrimaryEffect",
		"body": "GetPrimaryEffect()$0",
		"description": "(cBeaconEntity) (EffectType cEntityEffect#eTyp) Returns the primary effect."
	},

	"IsValidEffect_0": {
		"prefix": "IsValidEffect",
		"body": "IsValidEffect(${1:EffectType cEntityEffect#eType}, ${2:BeaconLevel number})$0",
		"description": "(cBeaconEntity) (boolean) Returns true if the effect can be used."
	},

	"IsActive_0": {
		"prefix": "IsActive",
		"body": "IsActive()$0",
		"description": "(cBeaconEntity) (boolean) Is the beacon active?"
	},

	"UpdateBeacon_0": {
		"prefix": "UpdateBeacon",
		"body": "UpdateBeacon()$0",
		"description": "(cBeaconEntity) () Update the beacon."
	},

	"GetSecondaryEffect_0": {
		"prefix": "GetSecondaryEffect",
		"body": "GetSecondaryEffect()$0",
		"description": "(cBeaconEntity) (EffectType cEntityEffect#eTyp) Returns the secondary effect."
	},

	"IsMineralBlock_0": {
		"prefix": "IsMineralBlock",
		"body": "IsMineralBlock(${1:BlockType number})$0",
		"description": "(cBeaconEntity) (boolean) Returns true if the block is a diamond block, a golden block, an iron block or an emerald block."
	},

	"GetBeaconLevel_0": {
		"prefix": "GetBeaconLevel",
		"body": "GetBeaconLevel()$0",
		"description": "(cBeaconEntity) (number) Returns the beacon level. (0 - 4)"
	},

	"SetPrimaryEffect_0": {
		"prefix": "SetPrimaryEffect",
		"body": "SetPrimaryEffect(${1:EffectType cEntityEffect#eType})$0",
		"description": "(cBeaconEntity) (boolean) Select the primary effect. Returns false when the effect is invalid."
	},

	"SetSecondaryEffect_0": {
		"prefix": "SetSecondaryEffect",
		"body": "SetSecondaryEffect(${1:EffectType cEntityEffect#eType})$0",
		"description": "(cBeaconEntity) (boolean) Select the secondary effect. Returns false when the effect is invalid."
	},

	"IsBeaconBlocked_0": {
		"prefix": "IsBeaconBlocked",
		"body": "IsBeaconBlocked()$0",
		"description": "(cBeaconEntity) (boolean) Is the beacon blocked by non-transparent blocks that are higher than the beacon?"
	},

	"CalculatePyramidLevel_0": {
		"prefix": "CalculatePyramidLevel",
		"body": "CalculatePyramidLevel()$0",
		"description": "(cBeaconEntity) (number) Calculate the amount of layers the pyramid below the beacon has."
	},

	"GiveEffects_0": {
		"prefix": "GiveEffects",
		"body": "GiveEffects()$0",
		"description": "(cBeaconEntity) () Give the near-players the effects."
	},

	"cRankManager_0": {
		"prefix": "cRankManager",
		"body": "cRankManager$0",
		"description": "(cRankManager) () The Scary Class."
	},

	"GetDefaultRank_0": {
		"prefix": "GetDefaultRank",
		"body": "GetDefaultRank()$0",
		"description": "(cRankManager) (string) Returns the name of the default rank. "
	},

	"IsGroupInRank_0": {
		"prefix": "IsGroupInRank",
		"body": "IsGroupInRank(${1:GroupName string}, ${2:RankName string})$0",
		"description": "(cRankManager) (boolean) Returns true iff the specified group is assigned to the specified rank."
	},

	"GetRankRestrictions_0": {
		"prefix": "GetRankRestrictions",
		"body": "GetRankRestrictions(${1:RankName string})$0",
		"description": "(cRankManager) (table) Returns an array-table of all the restrictions that are assigned to the specified rank through its groups. Returns an empty table if there is no such rank."
	},

	"GetPlayerRankName_0": {
		"prefix": "GetPlayerRankName",
		"body": "GetPlayerRankName(${1:PlayerUUID cUUID})$0",
		"description": "(cRankManager) (RankName strin) Returns the name of the rank that is assigned to the specified player. An empty string (NOT the default rank) is returned if the player has no rank assigned to them."
	},

	"SetRankVisuals_0": {
		"prefix": "SetRankVisuals",
		"body": "SetRankVisuals(${1:RankName string}, ${2:MsgPrefix string}, ${3:MsgSuffix string}, ${4:MsgNameColorCode string})$0",
		"description": "(cRankManager) () Updates the rank's message visuals. Logs an info message and does nothing if rank not found."
	},

	"IsPermissionInGroup_0": {
		"prefix": "IsPermissionInGroup",
		"body": "IsPermissionInGroup(${1:Permission string}, ${2:GroupName string})$0",
		"description": "(cRankManager) (boolean) Returns true iff the specified permission is assigned to the specified group."
	},

	"AddPermissionToGroup_0": {
		"prefix": "AddPermissionToGroup",
		"body": "AddPermissionToGroup(${1:Permission string}, ${2:GroupName string})$0",
		"description": "(cRankManager) (boolean) Adds the specified permission to the specified group. Returns true on success, false on failure - if the group name is not found."
	},

	"GetPlayerMsgVisuals_0": {
		"prefix": "GetPlayerMsgVisuals",
		"body": "GetPlayerMsgVisuals(${1:PlayerUUID cUUID})$0",
		"description": "(cRankManager) (MsgPrefix string, MsgSuffix string, MsgNameColorCode strin) Returns the message visuals assigned to the player. If the player is not explicitly assigned a rank, the default rank's visuals are returned. If there is an error, no value is returned at all."
	},

	"SetDefaultRank_0": {
		"prefix": "SetDefaultRank",
		"body": "SetDefaultRank(${1:RankName string})$0",
		"description": "(cRankManager) (boolean) Sets the specified rank as the default rank. Returns true on success, false on failure (rank doesn't exist)."
	},

	"GetRankPermissions_0": {
		"prefix": "GetRankPermissions",
		"body": "GetRankPermissions(${1:RankName string})$0",
		"description": "(cRankManager) (table) Returns an array-table of all the permissions that are assigned to the specified rank through its groups. Returns an empty table if there is no such rank."
	},

	"GetAllRestrictions_0": {
		"prefix": "GetAllRestrictions",
		"body": "GetAllRestrictions()$0",
		"description": "(cRankManager) (table) Returns an array-table containing all the restrictions that are known to the manager."
	},

	"AddGroup_0": {
		"prefix": "AddGroup",
		"body": "AddGroup(${1:GroupName string})$0",
		"description": "(cRankManager) () Adds the group of the specified name. Logs a warning and does nothing if the group already exists."
	},

	"GetAllGroups_0": {
		"prefix": "GetAllGroups",
		"body": "GetAllGroups()$0",
		"description": "(cRankManager) (table) Returns an array-table containing the names of all the groups that are known to the manager."
	},

	"GetGroupRestrictions_0": {
		"prefix": "GetGroupRestrictions",
		"body": "GetGroupRestrictions(${1:GroupName string})$0",
		"description": "(cRankManager) (table) Returns an array-table containing the restrictions that the specified group contains."
	},

	"GetAllPermissions_0": {
		"prefix": "GetAllPermissions",
		"body": "GetAllPermissions()$0",
		"description": "(cRankManager) (table) Returns an array-table containing all the permissions that are known to the manager."
	},

	"GetGroupPermissions_0": {
		"prefix": "GetGroupPermissions",
		"body": "GetGroupPermissions(${1:GroupName string})$0",
		"description": "(cRankManager) (table) Returns an array-table containing the permissions that the specified group contains."
	},

	"RemovePermissionFromGroup_0": {
		"prefix": "RemovePermissionFromGroup",
		"body": "RemovePermissionFromGroup(${1:Permission string}, ${2:GroupName string})$0",
		"description": "(cRankManager) () Removes the specified permission from the specified group. Logs an info message and does nothing if the group doesn't exist."
	},

	"AddRank_0": {
		"prefix": "AddRank",
		"body": "AddRank(${1:RankName string}, ${2:MsgPrefix string}, ${3:MsgSuffix string}, ${4:MsgNameColorCode string})$0",
		"description": "(cRankManager) () Adds a new rank of the specified name and with the specified message visuals. Logs an info message and does nothing if the rank already exists."
	},

	"SetPlayerRank_0": {
		"prefix": "SetPlayerRank",
		"body": "SetPlayerRank(${1:PlayerUUID cUUID}, ${2:PlayerName string}, ${3:RankName string})$0",
		"description": "(cRankManager) () Updates the rank for the specified player. The player name is provided for reference, the UUID is used for identification. Logs a warning and does nothing if the rank is not found."
	},

	"GetAllPermissionsRestrictions_0": {
		"prefix": "GetAllPermissionsRestrictions",
		"body": "GetAllPermissionsRestrictions()$0",
		"description": "(cRankManager) (table) Returns an array-table containing all the permissions and restrictions (intermixed together) that are known to the manager."
	},

	"GetPlayerPermissions_0": {
		"prefix": "GetPlayerPermissions",
		"body": "GetPlayerPermissions(${1:PlayerUUID cUUID})$0",
		"description": "(cRankManager) (table) Returns an array-table containing all permissions that the specified player is assigned through their rank. Returns the default rank's permissions if the player has no explicit rank assigned to them. Returns an empty array on error."
	},

	"GetPlayerName_0": {
		"prefix": "GetPlayerName",
		"body": "GetPlayerName(${1:PlayerUUID cUUID})$0",
		"description": "(cRankManager) (PlayerName strin) Returns the last name that the specified player has, for a player in the ranks database. An empty string is returned if the player isn't in the database."
	},

	"IsRestrictionInGroup_0": {
		"prefix": "IsRestrictionInGroup",
		"body": "IsRestrictionInGroup(${1:Restriction string}, ${2:GroupName string})$0",
		"description": "(cRankManager) (boolean) Returns true iff the specified restriction is assigned to the specified group."
	},

	"AddRestrictionToGroup_0": {
		"prefix": "AddRestrictionToGroup",
		"body": "AddRestrictionToGroup(${1:Permission string}, ${2:GroupName string})$0",
		"description": "(cRankManager) (boolean) Adds a new restriction to the specified group. Returns true if successful, false if it fails (no such group). No action if the group already has the restriction."
	},

	"RenameGroup_0": {
		"prefix": "RenameGroup",
		"body": "RenameGroup(${1:OldName string}, ${2:NewName string})$0",
		"description": "(cRankManager) () Renames the specified group. Logs an info message and does nothing if the group is not found or the new name is already used."
	},

	"GetAllPlayerUUIDs_0": {
		"prefix": "GetAllPlayerUUIDs",
		"body": "GetAllPlayerUUIDs()$0",
		"description": "(cRankManager) (table) Returns the short uuids of all players stored in the rank DB, sorted by the players' names (case insensitive)."
	},

	"RemoveRestrictionFromGroup_0": {
		"prefix": "RemoveRestrictionFromGroup",
		"body": "RemoveRestrictionFromGroup(${1:Restriction string}, ${2:GroupName string})$0",
		"description": "(cRankManager) () Removes the specified restriction from the specified group."
	},

	"RemoveRank_0": {
		"prefix": "RemoveRank",
		"body": "RemoveRank(${1:RankName string}, ${2:ReplacementRankName string})$0",
		"description": "(cRankManager) () Removes the specified rank. If ReplacementRankName is given, the players that have RankName will get their rank set to ReplacementRankName. If it isn't given, or is an invalid rank, the players will be removed from the manager, their ranks will be unset completely. Logs an info message and does nothing if the rank is not found."
	},

	"RemovePlayerRank_0": {
		"prefix": "RemovePlayerRank",
		"body": "RemovePlayerRank(${1:PlayerUUID cUUID})$0",
		"description": "(cRankManager) () Removes the player's rank; the player's left without a rank. Note that this doesn't change the {{cPlayer}} instances for the already connected players, you need to update all the instances manually. No action if the player has no rank assigned to them already."
	},

	"RemoveGroupFromRank_0": {
		"prefix": "RemoveGroupFromRank",
		"body": "RemoveGroupFromRank(${1:GroupName string}, ${2:RankName string})$0",
		"description": "(cRankManager) () Removes the specified group from the specified rank. The group will still exist, even if it isn't assigned to any rank. Logs an info message and does nothing if the group or rank doesn't exist."
	},

	"RemoveGroup_0": {
		"prefix": "RemoveGroup",
		"body": "RemoveGroup(${1:GroupName string})$0",
		"description": "(cRankManager) () Removes the specified group completely. The group will be removed from all the ranks using it and then erased from the manager. Logs an info message and does nothing if the group doesn't exist."
	},

	"GetAllRanks_0": {
		"prefix": "GetAllRanks",
		"body": "GetAllRanks()$0",
		"description": "(cRankManager) (table) Returns an array-table containing the names of all the ranks that are known to the manager."
	},

	"GroupExists_0": {
		"prefix": "GroupExists",
		"body": "GroupExists(${1:GroupName string})$0",
		"description": "(cRankManager) (boolean) Returns true iff the specified group exists."
	},

	"IsPlayerRankSet_0": {
		"prefix": "IsPlayerRankSet",
		"body": "IsPlayerRankSet(${1:PlayerUUID cUUID})$0",
		"description": "(cRankManager) (boolean) Returns true iff the specified player has a rank assigned to them."
	},

	"RenameRank_0": {
		"prefix": "RenameRank",
		"body": "RenameRank(${1:OldName string}, ${2:NewName string})$0",
		"description": "(cRankManager) () Renames the specified rank. Logs an info message and does nothing if the rank is not found or the new name is already used."
	},

	"ClearPlayerRanks_0": {
		"prefix": "ClearPlayerRanks",
		"body": "ClearPlayerRanks()$0",
		"description": "(cRankManager) () Removes all player ranks from the database. Note that this doesn't change the cPlayer instances for the already connected players, you need to update all the instances manually."
	},

	"GetRankGroups_0": {
		"prefix": "GetRankGroups",
		"body": "GetRankGroups(${1:RankName string})$0",
		"description": "(cRankManager) (table) Returns an array-table of the names of all the groups that are assigned to the specified rank. Returns an empty table if there is no such rank."
	},

	"GetRankVisuals_0": {
		"prefix": "GetRankVisuals",
		"body": "GetRankVisuals(${1:RankName string})$0",
		"description": "(cRankManager) (MsgPrefix string, MsgSuffix string, MsgNameColorCode strin) Returns the message visuals for the specified rank. Returns no value if the specified rank does not exist."
	},

	"GetPlayerGroups_0": {
		"prefix": "GetPlayerGroups",
		"body": "GetPlayerGroups(${1:PlayerUUID cUUID})$0",
		"description": "(cRankManager) (table) Returns an array-table of the names of the groups that are assigned to the specified player through their rank. Returns an empty table if the player is not known or has no rank or groups assigned to them."
	},

	"RankExists_0": {
		"prefix": "RankExists",
		"body": "RankExists(${1:RankName string})$0",
		"description": "(cRankManager) (boolean) Returns true iff the specified rank exists."
	},

	"AddGroupToRank_0": {
		"prefix": "AddGroupToRank",
		"body": "AddGroupToRank(${1:GroupName string}, ${2:RankName string})$0",
		"description": "(cRankManager) (boolean) Adds the specified group to the specified rank. Returns true on success, false on failure - if the group name or the rank name is not found."
	},

	"cFile_0": {
		"prefix": "cFile",
		"body": "cFile$0",
		"description": "(cFile) () The Scary Class."
	},

	"GetFolderContents_0": {
		"prefix": "GetFolderContents",
		"body": "GetFolderContents(${1:FolderName string})$0",
		"description": "(cFile) (table) Returns the contents of the specified folder, as an array table of strings. Each filesystem object is listed. Use the IsFile() and IsFolder() functions to determine the object type. Note that '.' and '..' are NOT returned. The order of the names is arbitrary (as returned by OS, no sorting)."
	},

	"ReadWholeFile_0": {
		"prefix": "ReadWholeFile",
		"body": "ReadWholeFile(${1:FileName string})$0",
		"description": "(cFile) (string) Returns the entire contents of the specified file. Returns an empty string if the file cannot be opened."
	},

	"ChangeFileExt_0": {
		"prefix": "ChangeFileExt",
		"body": "ChangeFileExt(${1:FileName string}, ${2:NewExt string})$0",
		"description": "(cFile) (string) Returns FileName with its extension changed to NewExt. NewExt may begin with a dot, but needn't, the result is the same in both cases (the first dot, if present, is ignored). FileName may contain path elements, extension is recognized as the last dot after the last path separator in the string."
	},

	"GetPathSeparator_0": {
		"prefix": "GetPathSeparator",
		"body": "GetPathSeparator()$0",
		"description": "(cFile) (string) Returns the primary path separator used by the current platform. Returns '\\' on Windows and '/' on Linux. Note that the platform or CRT may support additional path separators, those are not reported."
	},

	"DeleteFolder_0": {
		"prefix": "DeleteFolder",
		"body": "DeleteFolder(${1:FolderPath string})$0",
		"description": "(cFile) (IsSuccess boolea) Deletes the specified file or folder. Returns true if successful. Only deletes folders that are empty."
	},

	"DeleteFile_0": {
		"prefix": "DeleteFile",
		"body": "DeleteFile(${1:FilePath string})$0",
		"description": "(cFile) (IsSuccess boolea) Deletes the specified file. Returns true if successful."
	},

	"DeleteFolderContents_0": {
		"prefix": "DeleteFolderContents",
		"body": "DeleteFolderContents(${1:FolderPath string})$0",
		"description": "(cFile) (IsSuccess boolea) Deletes everything from the specified folder, recursively. The specified folder stays intact. Returns true if successful."
	},

	"Delete_0": {
		"prefix": "Delete",
		"body": "Delete(${1:Path string})$0",
		"description": "(cFile) (IsSuccess boolea) Deletes the specified file or folder. Returns true if successful. Only deletes folders that are empty.<br/><b>NOTE</b>: If you already know if the object is a file or folder, use DeleteFile() or DeleteFolder() explicitly."
	},

	"GetExecutableExt_0": {
		"prefix": "GetExecutableExt",
		"body": "GetExecutableExt()$0",
		"description": "(cFile) (string) Returns the customary executable extension (including the dot) used by the current platform ('.exe' on Windows, empty string on Linux). "
	},

	"IsFile_0": {
		"prefix": "IsFile",
		"body": "IsFile(${1:Path string})$0",
		"description": "(cFile) (boolean) Returns true if the specified path points to an existing file."
	},

	"CreateFolderRecursive_0": {
		"prefix": "CreateFolderRecursive",
		"body": "CreateFolderRecursive(${1:FolderPath string})$0",
		"description": "(cFile) (IsSuccess boolea) Creates a new folder, creating its parents if needed. Returns true if successful."
	},

	"GetLastModificationTime_0": {
		"prefix": "GetLastModificationTime",
		"body": "GetLastModificationTime(${1:Path string})$0",
		"description": "(cFile) (number) Returns the last modification time (in current timezone) of the specified file or folder. Returns zero if file not found / not accessible. The returned value is in the same units as values returned by os.time()."
	},

	"Exists_0": {
		"prefix": "Exists",
		"body": "Exists(${1:Path string})$0",
		"description": "(cFile) (Exists boolea) Returns true if the specified file or folder exists.<br/><b>OBSOLETE</b>, use IsFile() or IsFolder() instead"
	},

	"Copy_0": {
		"prefix": "Copy",
		"body": "Copy(${1:SrcFileName string}, ${2:DstFileName string})$0",
		"description": "(cFile) (IsSuccess boolea) Copies a single file to a new destination. Returns true if successful. Fails if the destination already exists."
	},

	"GetSize_0": {
		"prefix": "GetSize",
		"body": "GetSize(${1:FileName string})$0",
		"description": "(cFile) (number) Returns the size of the file, or -1 on failure."
	},

	"CreateFolder_0": {
		"prefix": "CreateFolder",
		"body": "CreateFolder(${1:FolderPath string})$0",
		"description": "(cFile) (IsSuccess boolea) Creates a new folder. Returns true if successful. Only a single level can be created at a time, use CreateFolderRecursive() to create multiple levels of folders at once."
	},

	"Rename_0": {
		"prefix": "Rename",
		"body": "Rename(${1:OrigPath string}, ${2:NewPath string})$0",
		"description": "(cFile) (IsSuccess boolea) Renames a file or a folder. Returns true if successful. Undefined result if NewPath already exists."
	},

	"IsFolder_0": {
		"prefix": "IsFolder",
		"body": "IsFolder(${1:Path string})$0",
		"description": "(cFile) (boolean) Returns true if the specified path points to an existing folder."
	},

	"cItems_0": {
		"prefix": "cItems",
		"body": "cItems$0",
		"description": "(cItems) () The Scary Class."
	},

	"Clear_1": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cItems) () Removes all items from the collection"
	},

	"Delete_1": {
		"prefix": "Delete",
		"body": "Delete(${1:Index number})$0",
		"description": "(cItems) () Deletes item at the specified index"
	},

	"AddItemGrid_0": {
		"prefix": "AddItemGrid",
		"body": "AddItemGrid(${1:ItemGrid cItemGrid})$0",
		"description": "(cItems) () Adds a copy of each item in the specified {{cItemGrid|ItemGrid}}."
	},

	"Set_0": {
		"prefix": "Set",
		"body": "Set(${1:Index number}, ${2:cItem cItem})$0",
		"description": "(cItems) () Sets the item at the specified index to the specified item"
	},

	"Set_1": {
		"prefix": "Set",
		"body": "Set(${1:Index number}, ${2:ItemType number}, ${3:ItemCount number}, ${4:ItemDamage number})$0",
		"description": "(cItems) () Sets the item at the specified index to the specified item"
	},

	"ContainsType_0": {
		"prefix": "ContainsType",
		"body": "ContainsType(${1:Item cItem})$0",
		"description": "(cItems) (boolean) Returns true if the collection contains an item that is the same type as the parameter"
	},

	"constructor_0": {
		"prefix": "constructor",
		"body": "constructor()$0",
		"description": "(cItems) (cItems) Creates a new empty cItems object"
	},

	"Size_0": {
		"prefix": "Size",
		"body": "Size()$0",
		"description": "(cItems) (number) Returns the number of items in the collection"
	},

	"Contains_0": {
		"prefix": "Contains",
		"body": "Contains(${1:Item cItem})$0",
		"description": "(cItems) (boolean) Returns true if the collection contains an item that is fully equivalent to the parameter"
	},

	"Get_0": {
		"prefix": "Get",
		"body": "Get(${1:Index number})$0",
		"description": "(cItems) (cItem) Returns the item at the specified index"
	},

	"Add_1": {
		"prefix": "Add",
		"body": "Add(${1:cItem cItem})$0",
		"description": "(cItems) () Adds a new item to the end of the collection"
	},

	"Add_2": {
		"prefix": "Add",
		"body": "Add(${1:ItemType number}, ${2:ItemCount number}, ${3:ItemDamage number})$0",
		"description": "(cItems) () Adds a new item to the end of the collection"
	},

	"cFireChargeEntity_0": {
		"prefix": "cFireChargeEntity",
		"body": "cFireChargeEntity$0",
		"description": "(cFireChargeEntity) () The Scary Class."
	},

	"cWorld_0": {
		"prefix": "cWorld",
		"body": "cWorld$0",
		"description": "(cWorld) () The Scary Class."
	},

	"DoWithBeaconAt_0": {
		"prefix": "DoWithBeaconAt",
		"body": "DoWithBeaconAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a beacon at the specified coords, calls the CallbackFunction with the {{cBeaconEntity}} parameter representing the beacon. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cBeaconEntity|BeaconEntity}})</pre> The function returns false if there is no beacon, or if there is, it returns the bool value that the callback has returned."
	},

	"SetSpawn_0": {
		"prefix": "SetSpawn",
		"body": "SetSpawn(${1:X number}, ${2:Y number}, ${3:Z number})$0",
		"description": "(cWorld) (boolean) Sets the default spawn at the specified coords. Returns false if the new spawn couldn't be stored in the INI file."
	},

	"QueueUnloadUnusedChunks_0": {
		"prefix": "QueueUnloadUnusedChunks",
		"body": "QueueUnloadUnusedChunks()$0",
		"description": "(cWorld) () Queues a cTask that unloads chunks that are no longer needed and are saved."
	},

	"GetBlockTypeMeta_0": {
		"prefix": "GetBlockTypeMeta",
		"body": "GetBlockTypeMeta(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (IsBlockValid boolean, BlockType number, BlockMeta numbe) Returns the block type and metadata for the block at the specified coords. The first value specifies if the block is in a valid loaded chunk, the other values are valid only if BlockValid is true."
	},

	"DoWithDropperAt_0": {
		"prefix": "DoWithDropperAt",
		"body": "DoWithDropperAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a dropper at the specified coords, calls the CallbackFunction with the {{cDropperEntity}} parameter representing the dropper. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cDropperEntity|DropperEntity}})</pre> The function returns false if there is no dropper, or if there is, it returns the bool value that the callback has returned."
	},

	"SetTNTShrapnelLevel_0": {
		"prefix": "SetTNTShrapnelLevel",
		"body": "SetTNTShrapnelLevel(${1:ShrapnelLevel eShrapnelLevel})$0",
		"description": "(cWorld) () Sets the Shrapnel level of the world."
	},

	"GetBlock_0": {
		"prefix": "GetBlock",
		"body": "GetBlock(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (BLOCKTYPE numbe) Returns the block type of the block at the specified coords, or 0 if the appropriate chunk is not loaded."
	},

	"GetBlock_1": {
		"prefix": "GetBlock",
		"body": "GetBlock(${1:BlockCoords Vector3i})$0",
		"description": "(cWorld) (BLOCKTYPE numbe) Returns the block type of the block at the specified coords, or 0 if the appropriate chunk is not loaded."
	},

	"GrowPlantAt_0": {
		"prefix": "GrowPlantAt",
		"body": "GrowPlantAt(${1:BlockPos Vector3i}, ${2:NumStages number})$0",
		"description": "(cWorld) (number) Grows the plant at the specified block by the specified number of stages. Returns the number of stages actually grown. Returns zero for non-growable blocks."
	},

	"GetLinkedEndWorldName_0": {
		"prefix": "GetLinkedEndWorldName",
		"body": "GetLinkedEndWorldName()$0",
		"description": "(cWorld) (string) Returns the name of the end world this world is linked to."
	},

	"FastSetBlock_0": {
		"prefix": "FastSetBlock",
		"body": "FastSetBlock(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:BlockType number}, ${5:BlockMeta number})$0",
		"description": "(cWorld) () Sets the block at the specified coords, without waking up the simulators or replacing the block entities for the previous block type. Do not use if the block being replaced has a block entity tied to it!"
	},

	"FastSetBlock_1": {
		"prefix": "FastSetBlock",
		"body": "FastSetBlock(${1:BlockCoords Vector3i}, ${2:BlockType number}, ${3:BlockMeta number})$0",
		"description": "(cWorld) () Sets the block at the specified coords, without waking up the simulators or replacing the block entities for the previous block type. Do not use if the block being replaced has a block entity tied to it!"
	},

	"BroadcastChat_0": {
		"prefix": "BroadcastChat",
		"body": "BroadcastChat(${1:Message string}, ${2:ExcludeClient cClientHandle}, ${3:ChatPrefix eMessageType})$0",
		"description": "(cWorld) () Sends the Message to all players in this world, except the optional ExcludeClient. No formatting is done by the server."
	},

	"WakeUpSimulators_0": {
		"prefix": "WakeUpSimulators",
		"body": "WakeUpSimulators(${1:Block Vector3i})$0",
		"description": "(cWorld) () Wakes up the simulators for the specified block."
	},

	"WakeUpSimulators_1": {
		"prefix": "WakeUpSimulators",
		"body": "WakeUpSimulators(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) () Wakes up the simulators for the specified block. (DEPRECATED, use vector-parametered version)"
	},

	"DoWithDispenserAt_0": {
		"prefix": "DoWithDispenserAt",
		"body": "DoWithDispenserAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a dispenser at the specified coords, calls the CallbackFunction with the {{cDispenserEntity}} parameter representing the dispenser. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cDispenserEntity|DispenserEntity}})</pre> The function returns false if there is no dispenser, or if there is, it returns the bool value that the callback has returned."
	},

	"GrowTree_0": {
		"prefix": "GrowTree",
		"body": "GrowTree(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) () Grows a tree based at the specified coords. If there is a sapling there, grows the tree based on that sapling, otherwise chooses a tree image based on the biome."
	},

	"SetLinkedEndWorldName_0": {
		"prefix": "SetLinkedEndWorldName",
		"body": "SetLinkedEndWorldName(${1:WorldName string})$0",
		"description": "(cWorld) () Sets the name of the world that the end portal should link to."
	},

	"SetCommandBlockCommand_0": {
		"prefix": "SetCommandBlockCommand",
		"body": "SetCommandBlockCommand(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:Command string})$0",
		"description": "(cWorld) (boolean) Sets the command to be executed in a command block at the specified coordinates. Returns if command was changed."
	},

	"SpawnFallingBlock_0": {
		"prefix": "SpawnFallingBlock",
		"body": "SpawnFallingBlock(${1:X number}, ${2:Y number}, ${3:Z number}, ${4:BlockType number}, ${5:BlockMeta number})$0",
		"description": "(cWorld) (EntityID numbe) Spawns a {{cFallingBlock|Falling Block}} entity at the specified coords with the given block type/meta. Returns the EntityID of the new falling block, or {{cEntity#INVALID_ID|cEntity#INVALID_ID}} if no falling block was created."
	},

	"SetLinkedNetherWorldName_0": {
		"prefix": "SetLinkedNetherWorldName",
		"body": "SetLinkedNetherWorldName(${1:WorldName string})$0",
		"description": "(cWorld) () Sets the name of the world that the nether portal should link to."
	},

	"BroadcastChatDeath_0": {
		"prefix": "BroadcastChatDeath",
		"body": "BroadcastChatDeath(${1:Message string}, ${2:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Prepends Gray [DEATH] / colours entire text (depending on ShouldUseChatPrefixes()) and broadcasts message. For when a player dies."
	},

	"BroadcastSoundEffect_0": {
		"prefix": "BroadcastSoundEffect",
		"body": "BroadcastSoundEffect(${1:SoundName string}, ${2:X number}, ${3:Y number}, ${4:Z number}, ${5:Volume number}, ${6:Pitch number}, ${7:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Sends the specified sound effect to all players in this world, except the optional ExceptClient (DEPRECATED, use vector-parametered version instead)"
	},

	"FindAndDoWithPlayer_0": {
		"prefix": "FindAndDoWithPlayer",
		"body": "FindAndDoWithPlayer(${1:PlayerName string}, ${2:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the given callback function for the player with the name best matching the name string provided.<br>This function is case-insensitive and will match partial names.<br>Returns false if player not found or there is ambiguity, true otherwise. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cPlayer|Player}})</pre>"
	},

	"DoWithBrewingstandAt_0": {
		"prefix": "DoWithBrewingstandAt",
		"body": "DoWithBrewingstandAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a brewingstand at the specified coords, calls the CallbackFunction with the {{cBrewingstandEntity}} parameter representing the brewingstand. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cBrewingstandEntity|cBrewingstandEntity}})</pre> The function returns false if there is no brewingstand, or if there is, it returns the bool value that the callback has returned."
	},

	"GetMaxCactusHeight_0": {
		"prefix": "GetMaxCactusHeight",
		"body": "GetMaxCactusHeight()$0",
		"description": "(cWorld) (number) Returns the configured maximum height to which cacti will grow naturally."
	},

	"SetNextBlockTick_0": {
		"prefix": "SetNextBlockTick",
		"body": "SetNextBlockTick(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) () Sets the blockticking to start at the specified block in the next tick."
	},

	"ShouldLavaSpawnFire_0": {
		"prefix": "ShouldLavaSpawnFire",
		"body": "ShouldLavaSpawnFire()$0",
		"description": "(cWorld) (boolean) Returns true if the world is configured to spawn fires near lava (world.ini: [Physics].ShouldLavaSpawnFire value)"
	},

	"GetLinkedNetherWorldName_0": {
		"prefix": "GetLinkedNetherWorldName",
		"body": "GetLinkedNetherWorldName()$0",
		"description": "(cWorld) (string) Returns the name of the Netherworld linked to this world."
	},

	"SpawnPrimedTNT_0": {
		"prefix": "SpawnPrimedTNT",
		"body": "SpawnPrimedTNT(${1:Position Vector3d}, ${2:FuseTicks number}, ${3:InitialVelocityCoeff number})$0",
		"description": "(cWorld) (EntityID numbe) Spawns a {{cTNTEntity|primed TNT entity}} at the specified coords, with the given fuse ticks. The entity gets a random speed multiplied by the InitialVelocityCoeff, 1 being the default value. Returns the EntityID of the new spawned primed tnt, or {{cEntity#INVALID_ID|cEntity#INVALID_ID}} if no primed tnt was created."
	},

	"SpawnPrimedTNT_1": {
		"prefix": "SpawnPrimedTNT",
		"body": "SpawnPrimedTNT(${1:X number}, ${2:Y number}, ${3:Z number}, ${4:FuseTicks number}, ${5:InitialVelocityCoeff number})$0",
		"description": "(cWorld) (EntityID numbe) Spawns a {{cTNTEntity|primed TNT entity}} at the specified coords, with the given fuse ticks. The entity gets a random speed multiplied by the InitialVelocityCoeff, 1 being the default value. Returns the EntityID of the new spawned primed tnt, or {{cEntity#INVALID_ID|cEntity#INVALID_ID}} if no primed tnt was created. (DEPRECATED, use vector-parametered version)"
	},

	"ForEachPlayer_0": {
		"prefix": "ForEachPlayer",
		"body": "ForEachPlayer(${1:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each player in the loaded world. Returns true if all the players have been processed (including when there are zero players), or false if the callback function has aborted the enumeration by returning true. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cPlayer|Player}})</pre> The callback should return false or no value to continue with the next player, or true to abort the enumeration."
	},

	"ForEachEntityInChunk_0": {
		"prefix": "ForEachEntityInChunk",
		"body": "ForEachEntityInChunk(${1:ChunkX number}, ${2:ChunkZ number}, ${3:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each entity in the specified chunk. Returns true if all the entities have been processed (including when there are zero entities), or false if the chunk is not loaded or the callback function has aborted the enumeration by returning true. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cEntity|Entity}})</pre> The callback should return false or no value to continue with the next entity, or true to abort the enumeration."
	},

	"SetChunkAlwaysTicked_0": {
		"prefix": "SetChunkAlwaysTicked",
		"body": "SetChunkAlwaysTicked(${1:ChunkX number}, ${2:ChunkZ number}, ${3:IsAlwaysTicked boolean})$0",
		"description": "(cWorld) () Sets the chunk to always be ticked and loaded even when it doesn't contain any clients. IsAlwaysTicked set to true turns forced ticking on, set to false turns it off. Every call with 'true' should be paired with a later call with 'false', otherwise the ticking won't stop. Multiple actions can request ticking independently, the ticking will continue until the last call with 'false'."
	},

	"AreCommandBlocksEnabled_0": {
		"prefix": "AreCommandBlocksEnabled",
		"body": "AreCommandBlocksEnabled()$0",
		"description": "(cWorld) (boolean) Returns whether command blocks are enabled on the (entire) server"
	},

	"DoWithPlayerByUUID_0": {
		"prefix": "DoWithPlayerByUUID",
		"body": "DoWithPlayerByUUID(${1:PlayerUUID cUUID}, ${2:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is the player with the uuid, calls the CallbackFunction with the {{cPlayer}} parameter representing the player. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cPlayer|Player}})</pre> The function returns false if the player was not found, or whatever bool value the callback returned if the player was found."
	},

	"DoWithChestAt_0": {
		"prefix": "DoWithChestAt",
		"body": "DoWithChestAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a chest at the specified coords, calls the CallbackFunction with the {{cChestEntity}} parameter representing the chest. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cChestEntity|ChestEntity}})</pre> The function returns false if there is no chest, or if there is, it returns the bool value that the callback has returned."
	},

	"IsGameModeCreative_0": {
		"prefix": "IsGameModeCreative",
		"body": "IsGameModeCreative()$0",
		"description": "(cWorld) (boolean) Returns true if the current gamemode is gmCreative."
	},

	"BroadcastChatWarning_0": {
		"prefix": "BroadcastChatWarning",
		"body": "BroadcastChatWarning(${1:Message string}, ${2:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Prepends Rose [WARN] / colours entire text (depending on ShouldUseChatPrefixes()) and broadcasts message. For concerning events, such as plugin reload etc."
	},

	"GetMaxViewDistance_0": {
		"prefix": "GetMaxViewDistance",
		"body": "GetMaxViewDistance()$0",
		"description": "(cWorld) (number) Returns the maximum viewdistance that players can see in this world. The view distance is the amount of chunks around the player that the player can see."
	},

	"ChunkStay_0": {
		"prefix": "ChunkStay",
		"body": "ChunkStay(${1:ChunkCoordTable table}, ${2:OnChunkAvailable function}, ${3:OnAllChunksAvailable function})$0",
		"description": "(cWorld) () Queues the specified chunks to be loaded or generated and calls the specified callbacks once they are loaded. ChunkCoordTable is an arra-table of chunk coords, each coord being a table of 2 numbers: { {Chunk1x, Chunk1z}, {Chunk2x, Chunk2z}, ...}. When any of those chunks are made available (including being available at the start of this call), the OnChunkAvailable() callback is called. When all the chunks are available, the OnAllChunksAvailable() callback is called. The function signatures are: <pre class='prettyprint lang-lua'>function OnChunkAvailable(ChunkX, ChunkZ)function OnAllChunksAvailable()</pre> All return values from the callbacks are ignored."
	},

	"ForEachEntityInBox_0": {
		"prefix": "ForEachEntityInBox",
		"body": "ForEachEntityInBox(${1:Box cBoundingBox}, ${2:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each entity in the specified bounding box. Returns true if all the entities have been processed (including when there are zero entities), or false if the callback function has aborted the enumeration by returning true. If any chunk within the bounding box is not valid, it is silently skipped without any notification. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cEntity|Entity}})</pre> The callback should return false or no value to continue with the next entity, or true to abort the enumeration."
	},

	"GenerateChunk_0": {
		"prefix": "GenerateChunk",
		"body": "GenerateChunk(${1:ChunkX number}, ${2:ChunkZ number})$0",
		"description": "(cWorld) () Queues the specified chunk in the chunk generator. Ignored if the chunk is already generated (use RegenerateChunk() to force chunk re-generation)."
	},

	"IsWeatherWet_0": {
		"prefix": "IsWeatherWet",
		"body": "IsWeatherWet()$0",
		"description": "(cWorld) (boolean) Returns true if the world currently has any precipitation - rain, storm or snow."
	},

	"ForEachEntity_0": {
		"prefix": "ForEachEntity",
		"body": "ForEachEntity(${1:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each entity in the loaded world. Returns true if all the entities have been processed (including when there are zero entities), or false if the callback function has aborted the enumeration by returning true. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cEntity|Entity}})</pre> The callback should return false or no value to continue with the next entity, or true to abort the enumeration."
	},

	"GetName_1": {
		"prefix": "GetName",
		"body": "GetName()$0",
		"description": "(cWorld) (string) Returns the name of the world, as specified in the settings.ini file."
	},

	"ForEachChestInChunk_0": {
		"prefix": "ForEachChestInChunk",
		"body": "ForEachChestInChunk(${1:ChunkX number}, ${2:ChunkZ number}, ${3:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each chest in the chunk. Returns true if all chests in the chunk have been processed (including when there are zero chests), or false if the callback has aborted the enumeration by returning true. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cChestEntity|ChestEntity}})</pre> The callback should return false or no value to continue with the next chest, or true to abort the enumeration."
	},

	"GetDimension_0": {
		"prefix": "GetDimension",
		"body": "GetDimension()$0",
		"description": "(cWorld) (eDimension) Returns the dimension of the world - dimOverworld, dimNether or dimEnd."
	},

	"DoWithEntityByID_0": {
		"prefix": "DoWithEntityByID",
		"body": "DoWithEntityByID(${1:EntityID number}, ${2:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If an entity with the specified ID exists, calls the callback with the {{cEntity}} parameter representing the entity. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cEntity|Entity}})</pre> The function returns false if the entity was not found, and it returns the same bool value that the callback has returned if the entity was found."
	},

	"DoWithNoteBlockAt_0": {
		"prefix": "DoWithNoteBlockAt",
		"body": "DoWithNoteBlockAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a note block at the specified coords, calls the CallbackFunction with the {{cNoteEntity}} parameter representing the note block. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cNoteEntity|NoteEntity}})</pre> The function returns false if there is no note block, or if there is, it returns the bool value that the callback has returned."
	},

	"DoWithCommandBlockAt_0": {
		"prefix": "DoWithCommandBlockAt",
		"body": "DoWithCommandBlockAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a command block at the specified coords, calls the CallbackFunction with the {{cCommandBlockEntity}} parameter representing the command block. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cCommandBlockEntity|CommandBlockEntity}})</pre> The function returns false if there is no command block, or if there is, it returns the bool value that the callback has returned."
	},

	"GetSpawnY_0": {
		"prefix": "GetSpawnY",
		"body": "GetSpawnY()$0",
		"description": "(cWorld) (number) Returns the Y coord of the default spawn"
	},

	"GetDataPath_0": {
		"prefix": "GetDataPath",
		"body": "GetDataPath()$0",
		"description": "(cWorld) (string) Returns the path to the root of the world data."
	},

	"GetTNTShrapnelLevel_0": {
		"prefix": "GetTNTShrapnelLevel",
		"body": "GetTNTShrapnelLevel()$0",
		"description": "(cWorld) (ShrapnelLevel eShrapnelLeve) Returns the shrapnel level, representing the block types that are propelled outwards following an explosion. Based on this value and a random picker, blocks are selectively converted to physics entities (FallingSand) and flung outwards."
	},

	"RegenerateChunk_0": {
		"prefix": "RegenerateChunk",
		"body": "RegenerateChunk(${1:ChunkX number}, ${2:ChunkZ number})$0",
		"description": "(cWorld) () Queues the specified chunk to be re-generated, overwriting the current data. To queue a chunk for generating only if it doesn't exist, use the GenerateChunk() instead."
	},

	"IsWeatherRainAt_0": {
		"prefix": "IsWeatherRainAt",
		"body": "IsWeatherRainAt(${1:BlockX number}, ${2:BlockZ number})$0",
		"description": "(cWorld) (boolean) Returns true if it is rainy at the specified location. This takes into account biomes."
	},

	"IsWeatherStormAt_0": {
		"prefix": "IsWeatherStormAt",
		"body": "IsWeatherStormAt(${1:BlockX number}, ${2:BlockZ number})$0",
		"description": "(cWorld) (boolean) Returns true if it is stormy at the specified location. This takes into account biomes."
	},

	"UpdateSign_0": {
		"prefix": "UpdateSign",
		"body": "UpdateSign(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:Line1 string}, ${5:Line2 string}, ${6:Line3 string}, ${7:Line4 string}, ${8:Player cPlayer})$0",
		"description": "(cWorld) () (<b>DEPRECATED</b>) Please use SetSignLines()."
	},

	"DigBlock_0": {
		"prefix": "DigBlock",
		"body": "DigBlock(${1:X number}, ${2:Y number}, ${3:Z number})$0",
		"description": "(cWorld) (boolean) Replaces the specified block with air, without dropping the usual pickups for the block. Wakes up the simulators for the block and its neighbors. Returns true on success, or false if the chunk is not loaded or invalid coords. See also DropBlockAsPickups() for the version that drops pickups."
	},

	"SetMaxViewDistance_0": {
		"prefix": "SetMaxViewDistance",
		"body": "SetMaxViewDistance(${1:MaxViewDistance number})$0",
		"description": "(cWorld) () Sets the maximum viewdistance of the players in the world. This maximum takes precedence over each player's ViewDistance setting."
	},

	"ForEachFurnaceInChunk_0": {
		"prefix": "ForEachFurnaceInChunk",
		"body": "ForEachFurnaceInChunk(${1:ChunkX number}, ${2:ChunkZ number}, ${3:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each furnace in the chunk. Returns true if all furnaces in the chunk have been processed (including when there are zero furnaces), or false if the callback has aborted the enumeration by returning true. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cFurnaceEntity|FurnaceEntity}})</pre> The callback should return false or no value to continue with the next furnace, or true to abort the enumeration."
	},

	"SetAreaBiome_0": {
		"prefix": "SetAreaBiome",
		"body": "SetAreaBiome(${1:MinX number}, ${2:MaxX number}, ${3:MinZ number}, ${4:MaxZ number}, ${5:Biome EMCSBiome})$0",
		"description": "(cWorld) (boolean) Sets the biome in the rectangular area specified. Returns true if successful, false if any of the chunks were unloaded."
	},

	"SetAreaBiome_1": {
		"prefix": "SetAreaBiome",
		"body": "SetAreaBiome(${1:Cuboid cCuboid}, ${2:Biome EMCSBiome})$0",
		"description": "(cWorld) (boolean) Sets the biome in the cuboid specified. Returns true if successful, false if any of the chunks were unloaded. The cuboid needn't be sorted."
	},

	"GrowTreeFromSapling_0": {
		"prefix": "GrowTreeFromSapling",
		"body": "GrowTreeFromSapling(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:SaplingMeta number})$0",
		"description": "(cWorld) () Grows a tree based at the specified coords. The tree type is determined from the sapling meta (the sapling itself needn't be present)."
	},

	"GetLightingQueueLength_0": {
		"prefix": "GetLightingQueueLength",
		"body": "GetLightingQueueLength()$0",
		"description": "(cWorld) (number) Returns the number of chunks in the lighting thread's queue."
	},

	"SetTrapdoorOpen_0": {
		"prefix": "SetTrapdoorOpen",
		"body": "SetTrapdoorOpen(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:IsOpen boolean})$0",
		"description": "(cWorld) (boolean) Opens or closes a trapdoor at the specific coordinates. Returns true on success, false if there is no trapdoor or it's already in the requested state."
	},

	"PrepareChunk_0": {
		"prefix": "PrepareChunk",
		"body": "PrepareChunk(${1:ChunkX number}, ${2:ChunkZ number}, ${3:Callback function})$0",
		"description": "(cWorld) () Queues the chunk for preparing - making sure that it's generated and lit. It is legal to call with no callback. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback(ChunkX, ChunkZ)</pre>"
	},

	"GetTimeOfDay_0": {
		"prefix": "GetTimeOfDay",
		"body": "GetTimeOfDay()$0",
		"description": "(cWorld) (number) Returns the number of ticks that have passed from the sunrise, 0 .. 24000."
	},

	"BroadcastChatSuccess_0": {
		"prefix": "BroadcastChatSuccess",
		"body": "BroadcastChatSuccess(${1:Message string}, ${2:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Prepends Green [INFO] / colours entire text (depending on ShouldUseChatPrefixes()) and broadcasts message. For success messages."
	},

	"DoWithDropSpenserAt_0": {
		"prefix": "DoWithDropSpenserAt",
		"body": "DoWithDropSpenserAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a dropper or a dispenser at the specified coords, calls the CallbackFunction with the {{cDropSpenserEntity}} parameter representing the dropper or dispenser. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cDropSpenserEntity|DropSpenserEntity}})</pre> Note that this can be used to access both dispensers and droppers in a similar way. The function returns false if there is neither dispenser nor dropper, or if there is, it returns the bool value that the callback has returned."
	},

	"DoWithFurnaceAt_0": {
		"prefix": "DoWithFurnaceAt",
		"body": "DoWithFurnaceAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a furnace at the specified coords, calls the CallbackFunction with the {{cFurnaceEntity}} parameter representing the furnace. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cFurnaceEntity|FurnaceEntity}})</pre> The function returns false if there is no furnace, or if there is, it returns the bool value that the callback has returned."
	},

	"GetWeather_0": {
		"prefix": "GetWeather",
		"body": "GetWeather()$0",
		"description": "(cWorld) (eWeather) Returns the current weather in the world (wSunny, wRain, wStorm). To check for weather, use IsWeatherXXX() functions instead."
	},

	"SetCommandBlocksEnabled_0": {
		"prefix": "SetCommandBlocksEnabled",
		"body": "SetCommandBlocksEnabled(${1:AreEnabled boolean})$0",
		"description": "(cWorld) () Sets whether command blocks should be enabled on the (entire) server."
	},

	"GetScoreBoard_0": {
		"prefix": "GetScoreBoard",
		"body": "GetScoreBoard()$0",
		"description": "(cWorld) (cScoreboard) Returns the {{cScoreboard|Scoreboard}} object used by this world. "
	},

	"GetWorldAge_0": {
		"prefix": "GetWorldAge",
		"body": "GetWorldAge()$0",
		"description": "(cWorld) (number) Returns the total age of the world, in ticks. The age always grows, cannot be set by plugins and is unrelated to TimeOfDay."
	},

	"TryGetHeight_0": {
		"prefix": "TryGetHeight",
		"body": "TryGetHeight(${1:BlockX number}, ${2:BlockZ number})$0",
		"description": "(cWorld) (IsValid boolean, Height numbe) Returns true and height of the highest non-air block if the chunk is loaded, or false otherwise."
	},

	"UseBlockEntity_0": {
		"prefix": "UseBlockEntity",
		"body": "UseBlockEntity(${1:Player cPlayer}, ${2:BlockX number}, ${3:BlockY number}, ${4:BlockZ number})$0",
		"description": "(cWorld) () Makes the specified Player use the block entity at the specified coords (open chest UI, etc.) If the cords are in an unloaded chunk or there's no block entity, ignores the call."
	},

	"QueueSaveAllChunks_0": {
		"prefix": "QueueSaveAllChunks",
		"body": "QueueSaveAllChunks()$0",
		"description": "(cWorld) () Queues all chunks to be saved in the world storage thread"
	},

	"GetHeight_0": {
		"prefix": "GetHeight",
		"body": "GetHeight(${1:BlockX number}, ${2:BlockZ number})$0",
		"description": "(cWorld) (number) Returns the maximum height of the particula block column in the world. If the chunk is not loaded, it waits for it to load / generate. <b>WARNING</b>: Do not use, Use TryGetHeight() instead for a non-waiting version, otherwise you run the risk of a deadlock!"
	},

	"GetMinNetherPortalWidth_0": {
		"prefix": "GetMinNetherPortalWidth",
		"body": "GetMinNetherPortalWidth()$0",
		"description": "(cWorld) (number) Returns the minimum width for a nether portal"
	},

	"CreateProjectile_0": {
		"prefix": "CreateProjectile",
		"body": "CreateProjectile(${1:X number}, ${2:Y number}, ${3:Z number}, ${4:ProjectileKind cProjectileEntity#eKind}, ${5:Creator cEntity}, ${6:Originating Item cItem}, ${7:Speed Vector3d})$0",
		"description": "(cWorld) () Creates a new projectile of the specified kind at the specified coords. The projectile's creator is set to Creator (may be nil). The item that created the projectile entity, commonly the {{cPlayer|player}}'s currently equipped item, is used at present for fireworks to correctly set their entity metadata. It is not used for any other projectile. Optional speed indicates the initial speed for the projectile."
	},

	"GetDefaultWeatherInterval_0": {
		"prefix": "GetDefaultWeatherInterval",
		"body": "GetDefaultWeatherInterval(${1:Weather eWeather})$0",
		"description": "(cWorld) (number) Returns the default weather interval for the specific weather type. Returns -1 for any unknown weather."
	},

	"GetBlockSkyLight_0": {
		"prefix": "GetBlockSkyLight",
		"body": "GetBlockSkyLight(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (number) Returns the block skylight of the block at the specified coords, or 0 if the appropriate chunk is not loaded."
	},

	"GetStorageLoadQueueLength_0": {
		"prefix": "GetStorageLoadQueueLength",
		"body": "GetStorageLoadQueueLength()$0",
		"description": "(cWorld) (number) Returns the number of chunks queued up for loading"
	},

	"GetGeneratorQueueLength_0": {
		"prefix": "GetGeneratorQueueLength",
		"body": "GetGeneratorQueueLength()$0",
		"description": "(cWorld) (number) Returns the number of chunks that are queued in the chunk generator."
	},

	"DoWithFlowerPotAt_0": {
		"prefix": "DoWithFlowerPotAt",
		"body": "DoWithFlowerPotAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a flower pot at the specified coords, calls the CallbackFunction with the {{cFlowerPotEntity}} parameter representing the flower pot. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cFlowerPotEntity|FlowerPotEntity}})</pre> The function returns false if there is no flower pot, or if there is, it returns the bool value that the callback has returned."
	},

	"IsPVPEnabled_0": {
		"prefix": "IsPVPEnabled",
		"body": "IsPVPEnabled()$0",
		"description": "(cWorld) (boolean) Returns whether PVP is enabled in the world settings."
	},

	"GetSpawnX_0": {
		"prefix": "GetSpawnX",
		"body": "GetSpawnX()$0",
		"description": "(cWorld) (number) Returns the X coord of the default spawn"
	},

	"DoWithBlockEntityAt_0": {
		"prefix": "DoWithBlockEntityAt",
		"body": "DoWithBlockEntityAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a block entity at the specified coords, calls the CallbackFunction with the {{cBlockEntity}} parameter representing the block entity. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cBlockEntity|BlockEntity}})</pre> The function returns false if there is no block entity, or if there is, it returns the bool value that the callback has returned."
	},

	"WakeUpSimulatorsInArea_0": {
		"prefix": "WakeUpSimulatorsInArea",
		"body": "WakeUpSimulatorsInArea(${1:Area cCuboid})$0",
		"description": "(cWorld) () Wakes up the simulators for all the blocks in the specified area (edges inclusive)."
	},

	"WakeUpSimulatorsInArea_1": {
		"prefix": "WakeUpSimulatorsInArea",
		"body": "WakeUpSimulatorsInArea(${1:MinBlockX number}, ${2:MaxBlockX number}, ${3:MinBlockY number}, ${4:MaxBlockY number}, ${5:MinBlockZ number}, ${6:MaxBlockZ number})$0",
		"description": "(cWorld) () Wakes up the simulators for all the blocks in the specified area (edges inclusive). (DEPRECATED, use vector-parametered version)"
	},

	"IsWeatherWetAt_0": {
		"prefix": "IsWeatherWetAt",
		"body": "IsWeatherWetAt(${1:BlockX number}, ${2:BlockZ number})$0",
		"description": "(cWorld) (boolean) Returns true if it is raining or storming at the specified location. This takes into account biomes."
	},

	"ChangeWeather_0": {
		"prefix": "ChangeWeather",
		"body": "ChangeWeather()$0",
		"description": "(cWorld) () Forces the weather to change in the next game tick. Weather is changed according to the normal rules: wSunny <-> wRain <-> wStorm"
	},

	"SpawnBoat_0": {
		"prefix": "SpawnBoat",
		"body": "SpawnBoat(${1:Position Vector3d}, ${2:Material cBoat#eMaterial})$0",
		"description": "(cWorld) (EntityID numbe) Spawns a {{cBoat|boat}} at the specific coordinates. Returns the EntityID of the new boat, or {{cEntity#INVALID_ID|cEntity#INVALID_ID}} if no boat was created."
	},

	"SpawnBoat_1": {
		"prefix": "SpawnBoat",
		"body": "SpawnBoat(${1:X number}, ${2:Y number}, ${3:Z number}, ${4:Material cBoat#eMaterial})$0",
		"description": "(cWorld) (EntityID numbe) Spawns a {{cBoat|boat}} at the specific coordinates. Returns the EntityID of the new boat, or {{cEntity#INVALID_ID|cEntity#INVALID_ID}} if no boat was created. (DEPRECATED, use vector-parametered version)"
	},

	"VillagersShouldHarvestCrops_0": {
		"prefix": "VillagersShouldHarvestCrops",
		"body": "VillagersShouldHarvestCrops()$0",
		"description": "(cWorld) (boolean) Returns true if villagers can harvest crops."
	},

	"IsBlockDirectlyWatered_0": {
		"prefix": "IsBlockDirectlyWatered",
		"body": "IsBlockDirectlyWatered(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (boolean) Returns true if the specified block has a water block right next to it (on the X/Z axes)"
	},

	"SpawnSplitExperienceOrbs_0": {
		"prefix": "SpawnSplitExperienceOrbs",
		"body": "SpawnSplitExperienceOrbs(${1:Position Vector3d}, ${2:Reward number})$0",
		"description": "(cWorld) (EntityID tabl) Spawns experience orbs of the specified total value at the given location. The orbs' values are split according to regular Minecraft rules. Returns an array-table of UniqueID of all the orbs."
	},

	"BroadcastChatFatal_0": {
		"prefix": "BroadcastChatFatal",
		"body": "BroadcastChatFatal(${1:Message string}, ${2:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Prepends Red [FATAL] / colours entire text (depending on ShouldUseChatPrefixes()) and broadcasts message. For a plugin that crashed, or similar."
	},

	"SpawnMob_0": {
		"prefix": "SpawnMob",
		"body": "SpawnMob(${1:X number}, ${2:Y number}, ${3:Z number}, ${4:MonsterType eMonsterType}, ${5:IsBaby boolean})$0",
		"description": "(cWorld) (EntityID numbe) Spawns the specified type of mob at the specified coords. If the Baby parameter is true, the mob will be a baby. Returns the EntityID of the created entity, or {{cEntity#INVALID_ID|cEntity#INVALID_ID}} on failure."
	},

	"SpawnMinecart_0": {
		"prefix": "SpawnMinecart",
		"body": "SpawnMinecart(${1:X number}, ${2:Y number}, ${3:Z number}, ${4:MinecartType number}, ${5:Item cItem}, ${6:BlockHeight number})$0",
		"description": "(cWorld) (EntityID numbe) Spawns a minecart at the specific coordinates. MinecartType is the item type of the minecart. If the minecart is an empty minecart then the given Item (default: empty) is the block to be displayed inside the minecart, and BlockHeight (default: 1) is the relative distance of the block from the minecart. Returns the EntityID of the new minecart, or {{cEntity#INVALID_ID|cEntity#INVALID_ID}} if no minecart was created."
	},

	"GrowRipePlant_0": {
		"prefix": "GrowRipePlant",
		"body": "GrowRipePlant(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (boolean) OBSOLETE, use the Vector3-based overload instead. Grows the plant at the specified coords to its full. Returns true if the plant was grown, false if not."
	},

	"GrowRipePlant_1": {
		"prefix": "GrowRipePlant",
		"body": "GrowRipePlant(${1:BlockPos number})$0",
		"description": "(cWorld) (boolean) Grows the plant at the specified coords to its full. Returns true if the plant was grown, false if not."
	},

	"SetTicksUntilWeatherChange_0": {
		"prefix": "SetTicksUntilWeatherChange",
		"body": "SetTicksUntilWeatherChange(${1:NumTicks number})$0",
		"description": "(cWorld) () Sets the number of ticks after which the weather will be changed."
	},

	"SpawnItemPickups_0": {
		"prefix": "SpawnItemPickups",
		"body": "SpawnItemPickups(${1:Pickups cItems}, ${2:X number}, ${3:Y number}, ${4:Z number}, ${5:FlyAwaySpeed number}, ${6:IsPlayerCreated boolean})$0",
		"description": "(cWorld) () Spawns the specified pickups at the position specified. The FlyAwaySpeed is a coefficient (default: 1) used to initialize the random speed in which the pickups fly away from the spawn position. The IsPlayerCreated parameter (default: false) is used to initialize the created {{cPickup}} object's IsPlayerCreated value."
	},

	"SpawnItemPickups_1": {
		"prefix": "SpawnItemPickups",
		"body": "SpawnItemPickups(${1:Pickups cItems}, ${2:X number}, ${3:Y number}, ${4:Z number}, ${5:SpeedX number}, ${6:SpeedY number}, ${7:SpeedZ number}, ${8:IsPlayerCreated boolean})$0",
		"description": "(cWorld) () Spawns the specified pickups at the position specified. All the pickups fly away from the spawn position using the specified speed. The IsPlayerCreated parameter (default: false) is used to initialize the created {{cPickup}} object's IsPlayerCreated value."
	},

	"BroadcastBlockAction_0": {
		"prefix": "BroadcastBlockAction",
		"body": "BroadcastBlockAction(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:ActionByte1 number}, ${5:ActionByte2 number}, ${6:BlockType number}, ${7:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Broadcasts the BlockAction packet to all clients who have the appropriate chunk loaded (except ExcludeClient). The contents of the packet are specified by the parameters for the call, the blocktype needn't match the actual block that is present in the world data at the specified location. (DEPRECATED)"
	},

	"SpawnItemPickup_0": {
		"prefix": "SpawnItemPickup",
		"body": "SpawnItemPickup(${1:PosX number}, ${2:PosY number}, ${3:PosZ number}, ${4:Item cItem}, ${5:SpeedX number}, ${6:SpeedY number}, ${7:SpeedZ number}, ${8:LifetimeTicks number}, ${9:CanCombine boolean})$0",
		"description": "(cWorld) (EntityID numbe) Creates a single pickup entity of the given item at the given position with the given speed, and returns the entities unique ID."
	},

	"SetWeather_0": {
		"prefix": "SetWeather",
		"body": "SetWeather(${1:Weather eWeather})$0",
		"description": "(cWorld) () Sets the current weather (wSunny, wRain, wStorm) and resets the TicksUntilWeatherChange to the default value for the new weather. The normal weather-changing hooks are called for the change."
	},

	"SpawnExperienceOrb_0": {
		"prefix": "SpawnExperienceOrb",
		"body": "SpawnExperienceOrb(${1:X number}, ${2:Y number}, ${3:Z number}, ${4:Reward number})$0",
		"description": "(cWorld) (EntityID numbe) Spawns an {{cExpOrb|experience orb}} at the specified coords, with the given reward. Returns the EntityID of the new experience orb, or {{cEntity#INVALID_ID|cEntity#INVALID_ID}} if no experience orb was created."
	},

	"GetGameMode_0": {
		"prefix": "GetGameMode",
		"body": "GetGameMode()$0",
		"description": "(cWorld) (eGameMode) Returns the gamemode of the world - gmSurvival, gmCreative or gmAdventure."
	},

	"ShouldUseChatPrefixes_0": {
		"prefix": "ShouldUseChatPrefixes",
		"body": "ShouldUseChatPrefixes()$0",
		"description": "(cWorld) (boolean) Returns whether coloured chat prefixes are prepended to chat messages or the entire message is simply coloured."
	},

	"ShouldBroadcastDeathMessages_0": {
		"prefix": "ShouldBroadcastDeathMessages",
		"body": "ShouldBroadcastDeathMessages()$0",
		"description": "(cWorld) (boolean) Returns true if the server should broadcast death messages in this world."
	},

	"ForEachLoadedChunk_0": {
		"prefix": "ForEachLoadedChunk",
		"body": "ForEachLoadedChunk(${1:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each loaded chunk in the world. Returns true if all chunks have been processed, or false if the callback has aborted the enumeration by returning true. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback(ChunkX, ChunkZ)</pre> The callback should return false or no value to continue with the next chunk, or true to abort the enumeration."
	},

	"SetSignLines_0": {
		"prefix": "SetSignLines",
		"body": "SetSignLines(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:Line1 string}, ${5:Line2 string}, ${6:Line3 string}, ${7:Line4 string}, ${8:Player cPlayer})$0",
		"description": "(cWorld) () Sets the sign text at the specified coords. The sign-updating hooks are called for the change. The Player parameter is used to indicate the player from whom the change has come, it may be nil."
	},

	"ShouldBroadcastAchievementMessages_0": {
		"prefix": "ShouldBroadcastAchievementMessages",
		"body": "ShouldBroadcastAchievementMessages()$0",
		"description": "(cWorld) (boolean) Returns true if the server should broadcast achievement messages in this world."
	},

	"SetTimeOfDay_0": {
		"prefix": "SetTimeOfDay",
		"body": "SetTimeOfDay(${1:TimeOfDayTicks number})$0",
		"description": "(cWorld) () Sets the time of day, expressed as number of ticks past sunrise, in the range 0 .. 24000."
	},

	"SetShouldUseChatPrefixes_0": {
		"prefix": "SetShouldUseChatPrefixes",
		"body": "SetShouldUseChatPrefixes(${1:ShouldUseChatPrefixes boolean})$0",
		"description": "(cWorld) () Sets whether coloured chat prefixes such as [INFO] is used with the SendMessageXXX() or BroadcastChatXXX(), or simply the entire message is coloured in the respective colour."
	},

	"BroadcastSoundParticleEffect_0": {
		"prefix": "BroadcastSoundParticleEffect",
		"body": "BroadcastSoundParticleEffect(${1:EffectID number}, ${2:SourcePos Vector3i}, ${3:EffectData string}, ${4:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Sends the specified effect to all players in this world, except the optional ExceptClient"
	},

	"SetMinNetherPortalWidth_0": {
		"prefix": "SetMinNetherPortalWidth",
		"body": "SetMinNetherPortalWidth(${1:Width number})$0",
		"description": "(cWorld) () Sets the minimum width for a nether portal"
	},

	"DoWithBedAt_0": {
		"prefix": "DoWithBedAt",
		"body": "DoWithBedAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a bed at the specified coords, calls the CallbackFunction with the {{cBedEntity}} parameter representing the bed. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cBedEntity|cBedEntity}})</pre> The function returns false if there is no bed, or if there is, it returns the bool value that the callback has returned."
	},

	"SetMinNetherPortalHeight_0": {
		"prefix": "SetMinNetherPortalHeight",
		"body": "SetMinNetherPortalHeight(${1:Height number})$0",
		"description": "(cWorld) () Sets the minimum height for a nether portal"
	},

	"ScheduleTask_0": {
		"prefix": "ScheduleTask",
		"body": "ScheduleTask(${1:DelayTicks number}, ${2:TaskFunction function})$0",
		"description": "(cWorld) () Queues the specified function to be executed in the world's tick thread after a the specified number of ticks. This enables operations to be queued for execution in the future. The function signature is <pre class='pretty-print lang-lua'>function({{cWorld|World}})</pre>All return values from the function are ignored. Note that it is unsafe to store references to Cuberite objects, such as entities, across from the caller to the task handler function; store the EntityID instead."
	},

	"SetBiomeAt_0": {
		"prefix": "SetBiomeAt",
		"body": "SetBiomeAt(${1:BlockX number}, ${2:BlockZ number}, ${3:Biome EMCSBiome})$0",
		"description": "(cWorld) (boolean) Sets the biome at the specified block coords. Returns true if successful, false otherwise."
	},

	"GetLinkedOverworldName_0": {
		"prefix": "GetLinkedOverworldName",
		"body": "GetLinkedOverworldName()$0",
		"description": "(cWorld) (string) Returns the name of the world this world is linked to."
	},

	"SetMaxNetherPortalHeight_0": {
		"prefix": "SetMaxNetherPortalHeight",
		"body": "SetMaxNetherPortalHeight(${1:Height number})$0",
		"description": "(cWorld) () Sets the maximum height for a nether portal"
	},

	"GetBlockMeta_0": {
		"prefix": "GetBlockMeta",
		"body": "GetBlockMeta(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (number) Returns the block metadata of the block at the specified coords, or 0 if the appropriate chunk is not loaded."
	},

	"GetBlockMeta_1": {
		"prefix": "GetBlockMeta",
		"body": "GetBlockMeta(${1:BlockCoords Vector3i})$0",
		"description": "(cWorld) (number) Returns the block metadata of the block at the specified coords, or 0 if the appropriate chunk is not loaded."
	},

	"GetNumChunks_0": {
		"prefix": "GetNumChunks",
		"body": "GetNumChunks()$0",
		"description": "(cWorld) (number) Returns the number of chunks currently loaded."
	},

	"SetLinkedOverworldName_0": {
		"prefix": "SetLinkedOverworldName",
		"body": "SetLinkedOverworldName(${1:WorldName string})$0",
		"description": "(cWorld) () Sets the name of the world that the nether portal should link to?"
	},

	"CastThunderbolt_0": {
		"prefix": "CastThunderbolt",
		"body": "CastThunderbolt(${1:X number}, ${2:Y number}, ${3:Z number})$0",
		"description": "(cWorld) () Creates a thunderbolt at the specified coords (DEPRECATED, use vector-parametered version instead)"
	},

	"SetDaylightCycleEnabled_0": {
		"prefix": "SetDaylightCycleEnabled",
		"body": "SetDaylightCycleEnabled(${1:IsEnabled boolean})$0",
		"description": "(cWorld) () Starts or stops the daylight cycle."
	},

	"GetMaxNetherPortalWidth_0": {
		"prefix": "GetMaxNetherPortalWidth",
		"body": "GetMaxNetherPortalWidth()$0",
		"description": "(cWorld) (number) Returns the maximum width for a nether portal"
	},

	"DoWithMobHeadAt_0": {
		"prefix": "DoWithMobHeadAt",
		"body": "DoWithMobHeadAt(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a mob head at the specified coords, calls the CallbackFunction with the {{cMobHeadEntity}} parameter representing the furnace. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cMobHeadEntity|MobHeadEntity}})</pre> The function returns false if there is no mob head, or if there is, it returns the bool value that the callback has returned."
	},

	"SetBlock_0": {
		"prefix": "SetBlock",
		"body": "SetBlock(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:BlockType number}, ${5:BlockMeta number})$0",
		"description": "(cWorld) () Sets the block at the specified coords, replaces the block entities for the previous block type, creates a new block entity for the new block, if appropriate, and wakes up the simulators. This is the preferred way to set blocks, as opposed to FastSetBlock(), which is only to be used under special circumstances."
	},

	"ForEachBlockEntityInChunk_0": {
		"prefix": "ForEachBlockEntityInChunk",
		"body": "ForEachBlockEntityInChunk(${1:ChunkX number}, ${2:ChunkZ number}, ${3:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each block entity in the chunk. Returns true if all block entities in the chunk have been processed (including when there are zero block entities), or false if the callback has aborted the enumeration by returning true. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cBlockEntity|BlockEntity}})</pre> The callback should return false or no value to continue with the next block entity, or true to abort the enumeration."
	},

	"SetMaxNetherPortalWidth_0": {
		"prefix": "SetMaxNetherPortalWidth",
		"body": "SetMaxNetherPortalWidth(${1:Width number})$0",
		"description": "(cWorld) () Sets the maximum width for a nether portal"
	},

	"QueueBlockForTick_0": {
		"prefix": "QueueBlockForTick",
		"body": "QueueBlockForTick(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:TicksToWait number})$0",
		"description": "(cWorld) () Queues the specified block to be ticked after the specified number of gameticks."
	},

	"QueueTask_0": {
		"prefix": "QueueTask",
		"body": "QueueTask(${1:TaskFunction function})$0",
		"description": "(cWorld) () Queues the specified function to be executed in the tick thread. This is the primary meansof interaction with a cWorld from the WebAdmin page handlers (see {{WebWorldThreads}}). The functionsignature is <pre class=\\'pretty-print lang-lua\\'>function({{cWorld|World}})</pre>All return valuesfrom the function are ignored. Note that this function is actually called *after* the QueueTask()function returns. Note that it is unsafe to store references to Cuberite objects, such as entities,across from the caller to the task handler function; store the EntityID instead."
	},

	"PickupsFromBlock_0": {
		"prefix": "PickupsFromBlock",
		"body": "PickupsFromBlock(${1:BlockPos Vector3i}, ${2:Digger cEntity}, ${3:Tool cItem})$0",
		"description": "(cWorld) (Items cItem) Returns all the pickups that would result if the Digger dug up the block at BlockPos using Tool. Digger is usually a {{cPlayer}}, but can be nil for natural causes. Tool is usually the equipped {{cItem|item}}, can be nil for empty hand. Returns an empty {{cItems}} object if the chunk is not present."
	},

	"GetSeed_0": {
		"prefix": "GetSeed",
		"body": "GetSeed()$0",
		"description": "(cWorld) (number) Returns the seed of the world."
	},

	"IsWeatherWetAtXYZ_0": {
		"prefix": "IsWeatherWetAtXYZ",
		"body": "IsWeatherWetAtXYZ(${1:Pos Vector3i})$0",
		"description": "(cWorld) (boolean) Returns true if the specified location has wet weather (rain or storm), using the same logic as IsWeatherWetAt, except that any rain-blocking blocks above the specified position will block the precipitation and this function will return false."
	},

	"GetMinNetherPortalHeight_0": {
		"prefix": "GetMinNetherPortalHeight",
		"body": "GetMinNetherPortalHeight()$0",
		"description": "(cWorld) (number) Returns the minimum height for a nether portal"
	},

	"IsWeatherSunny_0": {
		"prefix": "IsWeatherSunny",
		"body": "IsWeatherSunny()$0",
		"description": "(cWorld) (boolean) Returns true if the current weather is sunny."
	},

	"GetBiomeAt_0": {
		"prefix": "GetBiomeAt",
		"body": "GetBiomeAt(${1:BlockX number}, ${2:BlockZ number})$0",
		"description": "(cWorld) (eBiome EMCSBiom) Returns the biome at the specified coords. Reads the biome from the chunk, if it is loaded, otherwise it uses the chunk generator to provide the biome value."
	},

	"IsWeatherStorm_0": {
		"prefix": "IsWeatherStorm",
		"body": "IsWeatherStorm()$0",
		"description": "(cWorld) (boolean) Returns true if the current weather is stormy."
	},

	"BroadcastEntityAnimation_0": {
		"prefix": "BroadcastEntityAnimation",
		"body": "BroadcastEntityAnimation(${1:TargetEntity cEntity}, ${2:Animation number}, ${3:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Sends an animation of an entity to all clienthandles (except ExcludeClient if given)"
	},

	"GrowSugarcane_0": {
		"prefix": "GrowSugarcane",
		"body": "GrowSugarcane(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:NumBlocksToGrow number})$0",
		"description": "(cWorld) (number) OBSOLETE, use GrowPlantAt instead. Grows a sugarcane block at the specified coords, by up to the specified number of blocks. Adheres to the world's maximum sugarcane growth (GetMaxSugarcaneHeight()). Returns the amount of blocks the sugarcane grew inside this call."
	},

	"IsTrapdoorOpen_0": {
		"prefix": "IsTrapdoorOpen",
		"body": "IsTrapdoorOpen(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (boolean) Returns false if there is no trapdoor there or if the block isn't a trapdoor or if the chunk wasn't loaded. Returns true if trapdoor is open."
	},

	"ForEachBrewingstandInChunk_0": {
		"prefix": "ForEachBrewingstandInChunk",
		"body": "ForEachBrewingstandInChunk(${1:ChunkX number}, ${2:ChunkZ number}, ${3:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) Calls the specified callback for each brewingstand in the chunk. Returns true if all brewingstands in the chunk have been processed (including when there are zero brewingstands), or false if the callback has aborted the enumeration by returning true. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cBrewingstandEntity|cBrewingstandEntity}})</pre> The callback should return false or no value to continue with the next brewingstand, or true to abort the enumeration."
	},

	"BroadcastChatFailure_0": {
		"prefix": "BroadcastChatFailure",
		"body": "BroadcastChatFailure(${1:Message string}, ${2:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Prepends Rose [INFO] / colours entire text (depending on ShouldUseChatPrefixes()) and broadcasts message. For a command that failed to run because of insufficient permissions, etc."
	},

	"IsSavingEnabled_0": {
		"prefix": "IsSavingEnabled",
		"body": "IsSavingEnabled()$0",
		"description": "(cWorld) (boolean) Returns whether or not saving chunk data is enabled. If disabled, the world will keep dirty chunks in memory forever, and will simply regenerate non-dirty chunks that are unloaded."
	},

	"IsGameModeSurvival_0": {
		"prefix": "IsGameModeSurvival",
		"body": "IsGameModeSurvival()$0",
		"description": "(cWorld) (boolean) Returns true if the current gamemode is gmSurvival."
	},

	"DoWithNearestPlayer_0": {
		"prefix": "DoWithNearestPlayer",
		"body": "DoWithNearestPlayer(${1:Position Vector3d}, ${2:RangeLimit number}, ${3:CallbackFunction function}, ${4:CheckLineOfSight boolean}, ${5:IgnoreSpectator boolean})$0",
		"description": "(cWorld) (boolean) Calls the specified callback function with the {{cPlayer|player}} nearest to the specified position as its parameter, if they are still within the range limit. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cPlayer|Player}})</pre> The function returns false if the player was not found, or whatever bool value the callback returned if the player was found."
	},

	"GetIniFileName_0": {
		"prefix": "GetIniFileName",
		"body": "GetIniFileName()$0",
		"description": "(cWorld) (string) Returns the name of the world.ini file that the world uses to store the information."
	},

	"IsGameModeSpectator_0": {
		"prefix": "IsGameModeSpectator",
		"body": "IsGameModeSpectator()$0",
		"description": "(cWorld) (boolean) Returns true if the current gamemode is gmSpectator."
	},

	"IsGameModeAdventure_0": {
		"prefix": "IsGameModeAdventure",
		"body": "IsGameModeAdventure()$0",
		"description": "(cWorld) (boolean) Returns true if the current gamemode is gmAdventure."
	},

	"GrowCactus_0": {
		"prefix": "GrowCactus",
		"body": "GrowCactus(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:NumBlocksToGrow number})$0",
		"description": "(cWorld) (number) OBSOLETE, use GrowPlantAt instead. Grows a cactus block at the specified coords, by up to the specified number of blocks. Adheres to the world's maximum cactus growth (GetMaxCactusHeight()). Returns the amount of blocks the cactus grew inside this call."
	},

	"IsDeepSnowEnabled_0": {
		"prefix": "IsDeepSnowEnabled",
		"body": "IsDeepSnowEnabled()$0",
		"description": "(cWorld) (boolean) Returns whether the configuration has DeepSnow enabled."
	},

	"IsDaylightCycleEnabled_0": {
		"prefix": "IsDaylightCycleEnabled",
		"body": "IsDaylightCycleEnabled()$0",
		"description": "(cWorld) (boolean) Returns true if the daylight cycle is enabled."
	},

	"GetMapManager_0": {
		"prefix": "GetMapManager",
		"body": "GetMapManager()$0",
		"description": "(cWorld) (cMapManager) Returns the {{cMapManager|MapManager}} object used by this world."
	},

	"BroadcastChatInfo_0": {
		"prefix": "BroadcastChatInfo",
		"body": "BroadcastChatInfo(${1:Message string}, ${2:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Prepends Yellow [INFO] / colours entire text (depending on ShouldUseChatPrefixes()) and broadcasts message. For informational messages, such as command usage."
	},

	"GrowTreeByBiome_0": {
		"prefix": "GrowTreeByBiome",
		"body": "GrowTreeByBiome(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) () Grows a tree based at the specified coords. The tree type is picked from types available for the biome at those coords."
	},

	"IsWeatherRain_0": {
		"prefix": "IsWeatherRain",
		"body": "IsWeatherRain()$0",
		"description": "(cWorld) (boolean) Returns true if the current weather is rainy."
	},

	"GrowMelonPumpkin_0": {
		"prefix": "GrowMelonPumpkin",
		"body": "GrowMelonPumpkin(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:StemBlockType number})$0",
		"description": "(cWorld) (boolean) OBSOLETE, use GrowPlantAt instead. Grows a melon or pumpkin, based on the stem block type specified (assumed to be at the coords provided). Checks for normal melon / pumpkin growth conditions - stem not having another produce next to it and suitable ground below. Returns true if the melon or pumpkin grew successfully."
	},

	"GetTicksUntilWeatherChange_0": {
		"prefix": "GetTicksUntilWeatherChange",
		"body": "GetTicksUntilWeatherChange()$0",
		"description": "(cWorld) (number) Returns the number of ticks that will pass before the weather is changed"
	},

	"BroadcastParticleEffect_0": {
		"prefix": "BroadcastParticleEffect",
		"body": "BroadcastParticleEffect(${1:ParticleName string}, ${2:SourcePos Vector3f}, ${3:Offset Vector3f}, ${4:ParticleData number}, ${5:ParticleAmount number}, ${6:ExcludeClient cClientHandle})$0",
		"description": "(cWorld) () Spawns the specified particles to all players in the world exept the optional ExeptClient. A list of available particles by thinkofdeath can be found {{https://gist.github.com/thinkofdeath/5110835|Here}}"
	},

	"DropBlockAsPickups_0": {
		"prefix": "DropBlockAsPickups",
		"body": "DropBlockAsPickups(${1:BlockPos Vector3i}, ${2:Digger cEntity}, ${3:Tool cItem})$0",
		"description": "(cWorld) (IsSuccess boolea) Digs up the specified block and spawns the appropriate pickups for it. The optional Digger parameter specifies the {{cEntity|entity}} who dug the block, usually a {{cPlayer|player}}. The optional Tool parameter specifies the tool used to dig the block, not present means an empty hand. Returns true on success, false if the chunk is not present. See also DigBlock() for the pickup-less version."
	},

	"GetBlockInfo_0": {
		"prefix": "GetBlockInfo",
		"body": "GetBlockInfo(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (IsBlockValid boolean, BlockType number, BlockMeta number, BlockSkyLight number, BlockBlockLight numbe) Returns the complete block info for the block at the specified coords. The first value specifies if the block is in a valid loaded chunk, the other values are valid only if BlockValid is true."
	},

	"GetStorageSaveQueueLength_0": {
		"prefix": "GetStorageSaveQueueLength",
		"body": "GetStorageSaveQueueLength()$0",
		"description": "(cWorld) (number) Returns the number of chunks queued up for saving"
	},

	"GetSpawnZ_0": {
		"prefix": "GetSpawnZ",
		"body": "GetSpawnZ()$0",
		"description": "(cWorld) (number) Returns the Z coord of the default spawn"
	},

	"GetSignLines_0": {
		"prefix": "GetSignLines",
		"body": "GetSignLines(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (IsValid boolean, Line1 string, Line2 string, Line3 string, Line4 strin) Returns true and the lines of a sign at the specified coords, or false if there is no sign at the coords."
	},

	"GetNumUnusedDirtyChunks_0": {
		"prefix": "GetNumUnusedDirtyChunks",
		"body": "GetNumUnusedDirtyChunks()$0",
		"description": "(cWorld) (number) Returns the number of unused dirty chunks. That's the number of chunks that we can save and then unload."
	},

	"IsWeatherSunnyAt_0": {
		"prefix": "IsWeatherSunnyAt",
		"body": "IsWeatherSunnyAt(${1:BlockX number}, ${2:BlockZ number})$0",
		"description": "(cWorld) (boolean) Returns true if it is sunny at the specified location. This takes into account biomes."
	},

	"GetBlockBlockLight_0": {
		"prefix": "GetBlockBlockLight",
		"body": "GetBlockBlockLight(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number})$0",
		"description": "(cWorld) (number) Returns the amount of block light at the specified coords, or 0 if the appropriate chunk is not loaded."
	},

	"GetBlockBlockLight_1": {
		"prefix": "GetBlockBlockLight",
		"body": "GetBlockBlockLight(${1:Pos Vector3i})$0",
		"description": "(cWorld) (number) Returns the amount of block light at the specified coords, or 0 if the appropriate chunk is not loaded."
	},

	"GetMaxSugarcaneHeight_0": {
		"prefix": "GetMaxSugarcaneHeight",
		"body": "GetMaxSugarcaneHeight()$0",
		"description": "(cWorld) (number) Returns the configured maximum height to which sugarcane will grow naturally."
	},

	"GetMaxNetherPortalHeight_0": {
		"prefix": "GetMaxNetherPortalHeight",
		"body": "GetMaxNetherPortalHeight()$0",
		"description": "(cWorld) (number) Returns the maximum height for a nether portal"
	},

	"SendBlockTo_0": {
		"prefix": "SendBlockTo",
		"body": "SendBlockTo(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:Player cPlayer})$0",
		"description": "(cWorld) () Sends the block at the specified coords to the specified player's client, as an UpdateBlock packet."
	},

	"DoWithPlayer_0": {
		"prefix": "DoWithPlayer",
		"body": "DoWithPlayer(${1:PlayerName string}, ${2:CallbackFunction function})$0",
		"description": "(cWorld) (boolean) If there is a player of the specified name (exact match), calls the CallbackFunction with the {{cPlayer}} parameter representing the player. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cPlayer|Player}})</pre> The function returns false if the player was not found, or whatever bool value the callback returned if the player was found."
	},

	"SetBlockMeta_0": {
		"prefix": "SetBlockMeta",
		"body": "SetBlockMeta(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:BlockMeta number}, ${5:ShouldMarkChunkDirty boolean}, ${6:ShouldSendToClients boolean})$0",
		"description": "(cWorld) () Sets the meta for the block at the specified coords. If ShouldMarkChunkDirty is true (default), the chunk is marked dirty and will be saved later on. If ShouldSendToClients is true (default), the change is broadcast to all clients who have the chunk loaded, if false, the change is kept server-side only."
	},

	"SetBlockMeta_1": {
		"prefix": "SetBlockMeta",
		"body": "SetBlockMeta(${1:BlockCoords Vector3i}, ${2:BlockMeta number})$0",
		"description": "(cWorld) () Sets the meta for the block at the specified coords."
	},

	"DoExplosionAt_0": {
		"prefix": "DoExplosionAt",
		"body": "DoExplosionAt(${1:Force number}, ${2:X number}, ${3:Y number}, ${4:Z number}, ${5:CanCauseFire boolean}, ${6:Source eExplosionSource}, ${7:SourceData any})$0",
		"description": "(cWorld) () Creates an explosion of the specified relative force in the specified position. If CanCauseFire is set, the explosion will set blocks on fire, too. The Source parameter specifies the source of the explosion, one of the esXXX constants. The SourceData parameter is specific to each source type, usually it provides more info about the source."
	},

	"SetSavingEnabled_0": {
		"prefix": "SetSavingEnabled",
		"body": "SetSavingEnabled(${1:SavingEnabled boolean})$0",
		"description": "(cWorld) () Sets whether saving chunk data is enabled. If disabled, dirty chunks will stay in memory forever, which may cause performance and stability issues."
	},

	"cChunkDesc_0": {
		"prefix": "cChunkDesc",
		"body": "cChunkDesc$0",
		"description": "(cChunkDesc) () The Scary Class."
	},

	"WriteBlockArea_0": {
		"prefix": "WriteBlockArea",
		"body": "WriteBlockArea(${1:BlockArea cBlockArea}, ${2:MinRelX number}, ${3:MinRelY number}, ${4:MinRelZ number}, ${5:MergeStrategy cBlockArea})$0",
		"description": "(cChunkDesc) () Writes data from the block area into the chunk"
	},

	"SetHeight_0": {
		"prefix": "SetHeight",
		"body": "SetHeight(${1:RelX number}, ${2:RelZ number}, ${3:Height number})$0",
		"description": "(cChunkDesc) () Sets the height at the specified relative coords"
	},

	"GetBlockMeta_2": {
		"prefix": "GetBlockMeta",
		"body": "GetBlockMeta(${1:RelX number}, ${2:RelY number}, ${3:RelZ number})$0",
		"description": "(cChunkDesc) (NIBBLETYPE numbe) Returns the block meta at the specified relative coords"
	},

	"GetBlockTypeMeta_1": {
		"prefix": "GetBlockTypeMeta",
		"body": "GetBlockTypeMeta(${1:RelX number}, ${2:RelY number}, ${3:RelZ number})$0",
		"description": "(cChunkDesc) (BLOCKTYPE number, NIBBLETYPE numbe) Returns the block type and meta at the specified relative coords"
	},

	"SetUseDefaultHeight_0": {
		"prefix": "SetUseDefaultHeight",
		"body": "SetUseDefaultHeight(${1:ShouldUseDefaultHeight boolean})$0",
		"description": "(cChunkDesc) () Sets the chunk to use default height generator or not"
	},

	"GetBiome_0": {
		"prefix": "GetBiome",
		"body": "GetBiome(${1:RelX number}, ${2:RelZ number})$0",
		"description": "(cChunkDesc) (EMCSBiome) Returns the biome at the specified relative coords"
	},

	"IsUsingDefaultComposition_0": {
		"prefix": "IsUsingDefaultComposition",
		"body": "IsUsingDefaultComposition()$0",
		"description": "(cChunkDesc) (boolean) Returns true if the chunk is set to use default composition generator"
	},

	"GetMinHeight_0": {
		"prefix": "GetMinHeight",
		"body": "GetMinHeight()$0",
		"description": "(cChunkDesc) (number) Returns the minimum height value in the heightmap."
	},

	"GetChunkX_0": {
		"prefix": "GetChunkX",
		"body": "GetChunkX()$0",
		"description": "(cChunkDesc) (number) Returns the X coord of the chunk contained."
	},

	"GetBlockEntity_0": {
		"prefix": "GetBlockEntity",
		"body": "GetBlockEntity(${1:RelX number}, ${2:RelY number}, ${3:RelZ number})$0",
		"description": "(cChunkDesc) (cBlockEntity) Returns the block entity for the block at the specified coords. Creates it if it doesn't exist. Returns nil if the block has no block entity capability."
	},

	"SetBlockTypeMeta_0": {
		"prefix": "SetBlockTypeMeta",
		"body": "SetBlockTypeMeta(${1:RelX number}, ${2:RelY number}, ${3:RelZ number}, ${4:BlockType number}, ${5:BlockMeta number})$0",
		"description": "(cChunkDesc) () Sets the block type and meta at the specified relative coords"
	},

	"GetHeight_1": {
		"prefix": "GetHeight",
		"body": "GetHeight(${1:RelX number}, ${2:RelZ number})$0",
		"description": "(cChunkDesc) (number) Returns the height at the specified relative coords"
	},

	"IsUsingDefaultStructures_0": {
		"prefix": "IsUsingDefaultStructures",
		"body": "IsUsingDefaultStructures()$0",
		"description": "(cChunkDesc) (boolean) Returns true if the chunk is set to use default structures"
	},

	"SetBiome_0": {
		"prefix": "SetBiome",
		"body": "SetBiome(${1:RelX number}, ${2:RelZ number}, ${3:Biome EMCSBiome})$0",
		"description": "(cChunkDesc) () Sets the biome at the specified relative coords"
	},

	"FillRelCuboid_0": {
		"prefix": "FillRelCuboid",
		"body": "FillRelCuboid(${1:RelCuboid cCuboid}, ${2:BlockType number}, ${3:BlockMeta number})$0",
		"description": "(cChunkDesc) () Fills the cuboid, specified in relative coords, by the specified block type and block meta. The cuboid may reach outside of the chunk, only the part intersecting with this chunk is filled."
	},

	"FillRelCuboid_1": {
		"prefix": "FillRelCuboid",
		"body": "FillRelCuboid(${1:MinRelX number}, ${2:MaxRelX number}, ${3:MinRelY number}, ${4:MaxRelY number}, ${5:MinRelZ number}, ${6:MaxRelZ number}, ${7:BlockType number}, ${8:BlockMeta number})$0",
		"description": "(cChunkDesc) () Fills the cuboid, specified in relative coords, by the specified block type and block meta. The cuboid may reach outside of the chunk, only the part intersecting with this chunk is filled."
	},

	"SetBlockType_0": {
		"prefix": "SetBlockType",
		"body": "SetBlockType(${1:RelX number}, ${2:RelY number}, ${3:RelZ number}, ${4:BlockType number})$0",
		"description": "(cChunkDesc) () Sets the block type at the specified relative coords"
	},

	"FloorRelCuboid_0": {
		"prefix": "FloorRelCuboid",
		"body": "FloorRelCuboid(${1:RelCuboid cCuboid}, ${2:BlockType number}, ${3:BlockMeta number})$0",
		"description": "(cChunkDesc) () Fills those blocks of the cuboid (specified in relative coords) that are considered non-floor (air, water) with the specified block type and meta. Cuboid may reach outside the chunk, only the part intersecting with this chunk is filled."
	},

	"FloorRelCuboid_1": {
		"prefix": "FloorRelCuboid",
		"body": "FloorRelCuboid(${1:MinRelX number}, ${2:MaxRelX number}, ${3:MinRelY number}, ${4:MaxRelY number}, ${5:MinRelZ number}, ${6:MaxRelZ number}, ${7:BlockType number}, ${8:BlockMeta number})$0",
		"description": "(cChunkDesc) () Fills those blocks of the cuboid (specified in relative coords) that are considered non-floor (air, water) with the specified block type and meta. Cuboid may reach outside the chunk, only the part intersecting with this chunk is filled."
	},

	"IsUsingDefaultFinish_0": {
		"prefix": "IsUsingDefaultFinish",
		"body": "IsUsingDefaultFinish()$0",
		"description": "(cChunkDesc) (boolean) Returns true if the chunk is set to use default finishers"
	},

	"SetUseDefaultFinish_0": {
		"prefix": "SetUseDefaultFinish",
		"body": "SetUseDefaultFinish(${1:ShouldUseDefaultFinish boolean})$0",
		"description": "(cChunkDesc) () Sets the chunk to use default finishers or not"
	},

	"IsUsingDefaultBiomes_0": {
		"prefix": "IsUsingDefaultBiomes",
		"body": "IsUsingDefaultBiomes()$0",
		"description": "(cChunkDesc) (boolean) Returns true if the chunk is set to use default biome generator"
	},

	"FillBlocks_0": {
		"prefix": "FillBlocks",
		"body": "FillBlocks(${1:BlockType number}, ${2:BlockMeta number})$0",
		"description": "(cChunkDesc) () Fills the entire chunk with the specified blocks"
	},

	"GetBlockType_0": {
		"prefix": "GetBlockType",
		"body": "GetBlockType(${1:RelX number}, ${2:RelY number}, ${3:RelZ number})$0",
		"description": "(cChunkDesc) (BLOCKTYPE numbe) Returns the block type at the specified relative coords"
	},

	"GetMaxHeight_0": {
		"prefix": "GetMaxHeight",
		"body": "GetMaxHeight()$0",
		"description": "(cChunkDesc) (number) Returns the maximum height contained in the heightmap."
	},

	"ReplaceRelCuboid_0": {
		"prefix": "ReplaceRelCuboid",
		"body": "ReplaceRelCuboid(${1:RelCuboid cCuboid}, ${2:SrcBlockType number}, ${3:SrcBlockMeta number}, ${4:DstBlockType number}, ${5:DstBlockMeta number})$0",
		"description": "(cChunkDesc) () Replaces all SrcBlockType + SrcBlockMeta blocks in the cuboid (specified in relative coords) with DstBlockType + DstBlockMeta blocks. Cuboid may reach outside the chunk, only the part intersecting with this chunk is filled."
	},

	"ReplaceRelCuboid_1": {
		"prefix": "ReplaceRelCuboid",
		"body": "ReplaceRelCuboid(${1:MinRelX number}, ${2:MaxRelX number}, ${3:MinRelY number}, ${4:MaxRelY number}, ${5:MinRelZ number}, ${6:MaxRelZ number}, ${7:SrcBlockType number}, ${8:SrcBlockMeta number}, ${9:DstBlockType number}, ${10:DstBlockMeta number})$0",
		"description": "(cChunkDesc) () Replaces all SrcBlockType + SrcBlockMeta blocks in the cuboid (specified in relative coords) with DstBlockType + DstBlockMeta blocks. Cuboid may reach outside the chunk, only the part intersecting with this chunk is filled."
	},

	"UpdateHeightmap_0": {
		"prefix": "UpdateHeightmap",
		"body": "UpdateHeightmap()$0",
		"description": "(cChunkDesc) () Updates the heightmap to match current contents. The plugins should do that if they modify the contents and don't modify the heightmap accordingly; Cuberite expects (and checks in Debug mode) that the heightmap matches the contents when the cChunkDesc is returned from a plugin."
	},

	"RandomFillRelCuboid_0": {
		"prefix": "RandomFillRelCuboid",
		"body": "RandomFillRelCuboid(${1:RelCuboid cCuboid}, ${2:BlockType number}, ${3:BlockMeta number}, ${4:RandomSeed number}, ${5:ChanceOutOf10k number})$0",
		"description": "(cChunkDesc) () Fills the specified relative cuboid with block type and meta in random locations. RandomSeed is used for the random number genertion (same seed produces same results); ChanceOutOf10k specifies the density (how many out of every 10000 blocks should be filled). Cuboid may reach outside the chunk, only the part intersecting with this chunk is filled."
	},

	"RandomFillRelCuboid_1": {
		"prefix": "RandomFillRelCuboid",
		"body": "RandomFillRelCuboid(${1:MinRelX number}, ${2:ChanceOutOf10k number}, ${3:MaxRelX number}, ${4:MinRelY number}, ${5:MaxRelY number}, ${6:MinRelZ number}, ${7:MaxRelZ number}, ${8:BlockType number}, ${9:BlockMeta number}, ${10:RandomSeed number})$0",
		"description": "(cChunkDesc) () Fills the specified relative cuboid with block type and meta in random locations. RandomSeed is used for the random number genertion (same seed produces same results); ChanceOutOf10k specifies the density (how many out of every 10000 blocks should be filled). Cuboid may reach outside the chunk, only the part intersecting with this chunk is filled."
	},

	"ReadBlockArea_0": {
		"prefix": "ReadBlockArea",
		"body": "ReadBlockArea(${1:BlockArea cBlockArea}, ${2:MinRelX number}, ${3:MaxRelX number}, ${4:MinRelY number}, ${5:MaxRelY number}, ${6:MinRelZ number}, ${7:MaxRelZ number})$0",
		"description": "(cChunkDesc) () Reads data from the chunk into the block area object. Block types and metas are processed."
	},

	"SetUseDefaultBiomes_0": {
		"prefix": "SetUseDefaultBiomes",
		"body": "SetUseDefaultBiomes(${1:ShouldUseDefaultBiomes boolean})$0",
		"description": "(cChunkDesc) () Sets the chunk to use default biome generator or not"
	},

	"IsUsingDefaultHeight_0": {
		"prefix": "IsUsingDefaultHeight",
		"body": "IsUsingDefaultHeight()$0",
		"description": "(cChunkDesc) (boolean) Returns true if the chunk is set to use default height generator"
	},

	"SetUseDefaultComposition_0": {
		"prefix": "SetUseDefaultComposition",
		"body": "SetUseDefaultComposition(${1:ShouldUseDefaultComposition boolean})$0",
		"description": "(cChunkDesc) () Sets the chunk to use default composition generator or not"
	},

	"SetBlockMeta_2": {
		"prefix": "SetBlockMeta",
		"body": "SetBlockMeta(${1:RelX number}, ${2:RelY number}, ${3:RelZ number}, ${4:BlockMeta number})$0",
		"description": "(cChunkDesc) () Sets the block meta at the specified relative coords"
	},

	"SetUseDefaultStructures_0": {
		"prefix": "SetUseDefaultStructures",
		"body": "SetUseDefaultStructures(${1:ShouldUseDefaultStructures boolean})$0",
		"description": "(cChunkDesc) () Sets the chunk to use default structures or not"
	},

	"GetChunkZ_0": {
		"prefix": "GetChunkZ",
		"body": "GetChunkZ()$0",
		"description": "(cChunkDesc) (number) Returns the Z coord of the chunk contained."
	},

	"lxp_0": {
		"prefix": "lxp",
		"body": "lxp$0",
		"description": "(lxp) () The Scary Class."
	},

	"_VERSION_0": {
		"prefix": "_VERSION",
		"body": "_VERSION$0",
		"description": "(lxp) () "
	},

	"_DESCRIPTION_0": {
		"prefix": "_DESCRIPTION",
		"body": "_DESCRIPTION$0",
		"description": "(lxp) () "
	},

	"_COPYRIGHT_0": {
		"prefix": "_COPYRIGHT",
		"body": "_COPYRIGHT$0",
		"description": "(lxp) () "
	},

	"new_0": {
		"prefix": "new",
		"body": "new(${1:CallbacksTable table}, ${2:SeparatorChar string})$0",
		"description": "(lxp) (XMLParser object tabl) Creates a new XML parser object, with the specified callbacks table and optional separator character."
	},

	"cBedEntity_0": {
		"prefix": "cBedEntity",
		"body": "cBedEntity$0",
		"description": "(cBedEntity) () The Scary Class."
	},

	"IsPillowBlock_0": {
		"prefix": "IsPillowBlock",
		"body": "IsPillowBlock()$0",
		"description": "(cBedEntity) (boolean) Returns true if this is the pillow block, it has then the meta 8."
	},

	"SetColor_0": {
		"prefix": "SetColor",
		"body": "SetColor(${1:number })$0",
		"description": "(cBedEntity) () Set the color of the bed. A value between 0 - 15. The wool meta color values can be used."
	},

	"GetColor_0": {
		"prefix": "GetColor",
		"body": "GetColor()$0",
		"description": "(cBedEntity) (number) Returns the color of the bed."
	},

	"cPluginManager_0": {
		"prefix": "cPluginManager",
		"body": "cPluginManager$0",
		"description": "(cPluginManager) () The Scary Class."
	},

	"HOOK_CHUNK_GENERATED_0": {
		"prefix": "HOOK_CHUNK_GENERATED",
		"body": "HOOK_CHUNK_GENERATED$0",
		"description": "(cPluginManager) () Called after a chunk is generated. A plugin may do last modifications on the generated chunk before it is handed of to the {{cWorld|world}}."
	},

	"HOOK_UPDATING_SIGN_0": {
		"prefix": "HOOK_UPDATING_SIGN",
		"body": "HOOK_UPDATING_SIGN$0",
		"description": "(cPluginManager) () Called before a {{cSignEntity|sign}} text is updated, either by a player or by any external means."
	},

	"HOOK_PLAYER_FISHING_0": {
		"prefix": "HOOK_PLAYER_FISHING",
		"body": "HOOK_PLAYER_FISHING$0",
		"description": "(cPluginManager) () Called when the player reels the fishing rod back in, plugins may alter the fishing reward."
	},

	"HOOK_PLAYER_BROKEN_BLOCK_0": {
		"prefix": "HOOK_PLAYER_BROKEN_BLOCK",
		"body": "HOOK_PLAYER_BROKEN_BLOCK$0",
		"description": "(cPluginManager) () Called after a player has broken a block."
	},

	"HOOK_HOPPER_PUSHING_ITEM_0": {
		"prefix": "HOOK_HOPPER_PUSHING_ITEM",
		"body": "HOOK_HOPPER_PUSHING_ITEM$0",
		"description": "(cPluginManager) () Called when a hopper is pushing an item into the container it is aimed at."
	},

	"HOOK_PLAYER_LEFT_CLICK_0": {
		"prefix": "HOOK_PLAYER_LEFT_CLICK",
		"body": "HOOK_PLAYER_LEFT_CLICK$0",
		"description": "(cPluginManager) () Called when the client sends the LeftClick packet."
	},

	"HOOK_KILLED_0": {
		"prefix": "HOOK_KILLED",
		"body": "HOOK_KILLED$0",
		"description": "(cPluginManager) () Called when an entity has been killed."
	},

	"HOOK_DISCONNECT_0": {
		"prefix": "HOOK_DISCONNECT",
		"body": "HOOK_DISCONNECT$0",
		"description": "(cPluginManager) () Called after the player has disconnected."
	},

	"crError_0": {
		"prefix": "crError",
		"body": "crError$0",
		"description": "(cPluginManager) () When the command handler for the given command results in an error"
	},

	"crBlocked_0": {
		"prefix": "crBlocked",
		"body": "crBlocked$0",
		"description": "(cPluginManager) () When a plugin stopped the command using the OnExecuteCommand hook"
	},

	"HOOK_HANDSHAKE_0": {
		"prefix": "HOOK_HANDSHAKE",
		"body": "HOOK_HANDSHAKE$0",
		"description": "(cPluginManager) () Called when a Handshake packet is received from a client."
	},

	"HOOK_PLAYER_PLACING_BLOCK_0": {
		"prefix": "HOOK_PLAYER_PLACING_BLOCK",
		"body": "HOOK_PLAYER_PLACING_BLOCK$0",
		"description": "(cPluginManager) () Called when the player is about to place a block. A plugin may cancel the event."
	},

	"HOOK_BLOCK_SPREAD_0": {
		"prefix": "HOOK_BLOCK_SPREAD",
		"body": "HOOK_BLOCK_SPREAD$0",
		"description": "(cPluginManager) () Called when a block spreads based on world conditions"
	},

	"HOOK_PLAYER_USED_BLOCK_0": {
		"prefix": "HOOK_PLAYER_USED_BLOCK",
		"body": "HOOK_PLAYER_USED_BLOCK$0",
		"description": "(cPluginManager) () Called after the player has right-clicked a block"
	},

	"HOOK_PLAYER_EATING_0": {
		"prefix": "HOOK_PLAYER_EATING",
		"body": "HOOK_PLAYER_EATING$0",
		"description": "(cPluginManager) () Called when the player starts eating a held item. Plugins may abort the eating."
	},

	"HOOK_BREWING_COMPLETING_0": {
		"prefix": "HOOK_BREWING_COMPLETING",
		"body": "HOOK_BREWING_COMPLETING$0",
		"description": "(cPluginManager) () Called before a brewing stand completes a brewing process."
	},

	"HOOK_EXECUTE_COMMAND_0": {
		"prefix": "HOOK_EXECUTE_COMMAND",
		"body": "HOOK_EXECUTE_COMMAND$0",
		"description": "(cPluginManager) () Called when a client sends a chat message that is recognized as a command, before handing that command to the regular command handler. A plugin may stop the command from being handled. This hook is called even when the player doesn't have permissions for the command."
	},

	"HOOK_COLLECTING_PICKUP_0": {
		"prefix": "HOOK_COLLECTING_PICKUP",
		"body": "HOOK_COLLECTING_PICKUP$0",
		"description": "(cPluginManager) () Called when a player is about to collect a pickup."
	},

	"HOOK_CHUNK_GENERATING_0": {
		"prefix": "HOOK_CHUNK_GENERATING",
		"body": "HOOK_CHUNK_GENERATING$0",
		"description": "(cPluginManager) () Called before a chunk is generated. A plugin may override some parts of the generation algorithm."
	},

	"HOOK_ENTITY_CHANGING_WORLD_0": {
		"prefix": "HOOK_ENTITY_CHANGING_WORLD",
		"body": "HOOK_ENTITY_CHANGING_WORLD$0",
		"description": "(cPluginManager) () Called before a entity has changed the world. Plugin may disallow a entity to change the world."
	},

	"HOOK_PLAYER_SPAWNED_0": {
		"prefix": "HOOK_PLAYER_SPAWNED",
		"body": "HOOK_PLAYER_SPAWNED$0",
		"description": "(cPluginManager) () Called after the player entity has been created. The entity is fully initialized and is spawning in the {{cWorld|world}}."
	},

	"HOOK_PLAYER_SHOOTING_0": {
		"prefix": "HOOK_PLAYER_SHOOTING",
		"body": "HOOK_PLAYER_SHOOTING$0",
		"description": "(cPluginManager) () Called when the player releases the mouse button to fire their bow."
	},

	"HOOK_PRE_CRAFTING_0": {
		"prefix": "HOOK_PRE_CRAFTING",
		"body": "HOOK_PRE_CRAFTING$0",
		"description": "(cPluginManager) () Called before a recipe is searched for the current contents of the crafting grid. Plugins may provide a recipe and cancel the built-in search."
	},

	"HOOK_PLAYER_USING_BLOCK_0": {
		"prefix": "HOOK_PLAYER_USING_BLOCK",
		"body": "HOOK_PLAYER_USING_BLOCK$0",
		"description": "(cPluginManager) () Called when the player is about to use (right-click) a block"
	},

	"crNoPermission_0": {
		"prefix": "crNoPermission",
		"body": "crNoPermission$0",
		"description": "(cPluginManager) () When the player doesn't have permission to execute the given command."
	},

	"HOOK_ENTITY_CHANGED_WORLD_0": {
		"prefix": "HOOK_ENTITY_CHANGED_WORLD",
		"body": "HOOK_ENTITY_CHANGED_WORLD$0",
		"description": "(cPluginManager) () Called after a entity has changed the world."
	},

	"HOOK_SPAWNING_ENTITY_0": {
		"prefix": "HOOK_SPAWNING_ENTITY",
		"body": "HOOK_SPAWNING_ENTITY$0",
		"description": "(cPluginManager) () Called just before an entity is spawned in a {{cWorld|world}}."
	},

	"HOOK_BREWING_COMPLETED_0": {
		"prefix": "HOOK_BREWING_COMPLETED",
		"body": "HOOK_BREWING_COMPLETED$0",
		"description": "(cPluginManager) () Called when a brewing stand completed a brewing process."
	},

	"HOOK_PLAYER_USED_ITEM_0": {
		"prefix": "HOOK_PLAYER_USED_ITEM",
		"body": "HOOK_PLAYER_USED_ITEM$0",
		"description": "(cPluginManager) () Called after the player has right-clicked with a usable item in their hand."
	},

	"HOOK_BLOCK_TO_PICKUPS_0": {
		"prefix": "HOOK_BLOCK_TO_PICKUPS",
		"body": "HOOK_BLOCK_TO_PICKUPS$0",
		"description": "(cPluginManager) () Called when a block has been dug and is being converted to pickups. The server has provided the default pickups and the plugins may modify them."
	},

	"HOOK_CHUNK_UNLOADING_0": {
		"prefix": "HOOK_CHUNK_UNLOADING",
		"body": "HOOK_CHUNK_UNLOADING$0",
		"description": "(cPluginManager) () Called before a chunk is unloaded from a {{cWorld|world}}. The chunk has already been saved."
	},

	"HOOK_SERVER_PING_0": {
		"prefix": "HOOK_SERVER_PING",
		"body": "HOOK_SERVER_PING$0",
		"description": "(cPluginManager) () Called when a client pings the server from the server list. Plugins may change the favicon, server description, players online and maximum players values."
	},

	"HOOK_ENTITY_ADD_EFFECT_0": {
		"prefix": "HOOK_ENTITY_ADD_EFFECT",
		"body": "HOOK_ENTITY_ADD_EFFECT$0",
		"description": "(cPluginManager) () Called when an effect is being added to an {{cEntity|entity}}. Plugin may refuse the effect."
	},

	"HOOK_EXPLODED_0": {
		"prefix": "HOOK_EXPLODED",
		"body": "HOOK_EXPLODED$0",
		"description": "(cPluginManager) () Called after an explosion has been processed in a {{cWorld|world}}."
	},

	"HOOK_PROJECTILE_HIT_BLOCK_0": {
		"prefix": "HOOK_PROJECTILE_HIT_BLOCK",
		"body": "HOOK_PROJECTILE_HIT_BLOCK$0",
		"description": "(cPluginManager) () Called when a {{cProjectileEntity|projectile}} hits a block."
	},

	"crExecuted_0": {
		"prefix": "crExecuted",
		"body": "crExecuted$0",
		"description": "(cPluginManager) () When the command is successfully executed."
	},

	"HOOK_CHUNK_AVAILABLE_0": {
		"prefix": "HOOK_CHUNK_AVAILABLE",
		"body": "HOOK_CHUNK_AVAILABLE$0",
		"description": "(cPluginManager) () Called when a chunk is loaded or generated and becomes available in the {{cWorld|world}}."
	},

	"HOOK_SPAWNING_MONSTER_0": {
		"prefix": "HOOK_SPAWNING_MONSTER",
		"body": "HOOK_SPAWNING_MONSTER$0",
		"description": "(cPluginManager) () Called just before a mob is spawned in a {{cWorld|world}}."
	},

	"HOOK_KILLING_0": {
		"prefix": "HOOK_KILLING",
		"body": "HOOK_KILLING$0",
		"description": "(cPluginManager) () Called when an entity has just been killed. A plugin may resurrect the entity by setting its health to above zero."
	},

	"HOOK_PLAYER_USING_ITEM_0": {
		"prefix": "HOOK_PLAYER_USING_ITEM",
		"body": "HOOK_PLAYER_USING_ITEM$0",
		"description": "(cPluginManager) () Called when the player is about to right-click with a usable item in their hand."
	},

	"psUnloaded_0": {
		"prefix": "psUnloaded",
		"body": "psUnloaded$0",
		"description": "(cPluginManager) () The plugin is enabled in settings.ini, but it has been unloaded (by a command)."
	},

	"psNotFound_0": {
		"prefix": "psNotFound",
		"body": "psNotFound$0",
		"description": "(cPluginManager) () The plugin has been loaded, but is no longer present on disk."
	},

	"psLoaded_0": {
		"prefix": "psLoaded",
		"body": "psLoaded$0",
		"description": "(cPluginManager) () The plugin is enabled and loaded."
	},

	"psError_0": {
		"prefix": "psError",
		"body": "psError$0",
		"description": "(cPluginManager) () The plugin is enabled in settings.ini, but it has run into an error while loading. Use {{cPlugin}}:GetLoadError() to identify the error."
	},

	"psDisabled_0": {
		"prefix": "psDisabled",
		"body": "psDisabled$0",
		"description": "(cPluginManager) () The plugin is not enabled in settings.ini"
	},

	"HOOK_PROJECTILE_HIT_ENTITY_0": {
		"prefix": "HOOK_PROJECTILE_HIT_ENTITY",
		"body": "HOOK_PROJECTILE_HIT_ENTITY$0",
		"description": "(cPluginManager) () Called when a {{cProjectileEntity|projectile}} hits an {{cEntity|entity}}."
	},

	"HOOK_WORLD_TICK_0": {
		"prefix": "HOOK_WORLD_TICK",
		"body": "HOOK_WORLD_TICK$0",
		"description": "(cPluginManager) () Called in each world's tick thread when the game logic is about to tick (20 times a second)."
	},

	"HOOK_WORLD_STARTED_0": {
		"prefix": "HOOK_WORLD_STARTED",
		"body": "HOOK_WORLD_STARTED$0",
		"description": "(cPluginManager) () Called when a world has been started."
	},

	"HOOK_EXPLODING_0": {
		"prefix": "HOOK_EXPLODING",
		"body": "HOOK_EXPLODING$0",
		"description": "(cPluginManager) () Called before an explosion is processed in a {{cWorld|world}}. A plugin may alter the explosion parameters or cancel the explosion altogether."
	},

	"HOOK_PLAYER_TOSSING_ITEM_0": {
		"prefix": "HOOK_PLAYER_TOSSING_ITEM",
		"body": "HOOK_PLAYER_TOSSING_ITEM$0",
		"description": "(cPluginManager) () Called when the player is tossing the held item (keypress Q)"
	},

	"HOOK_CHUNK_UNLOADED_0": {
		"prefix": "HOOK_CHUNK_UNLOADED",
		"body": "HOOK_CHUNK_UNLOADED$0",
		"description": "(cPluginManager) () Called after a chunk has been unloaded from a {{cWorld|world}}."
	},

	"HOOK_HOPPER_PULLING_ITEM_0": {
		"prefix": "HOOK_HOPPER_PULLING_ITEM",
		"body": "HOOK_HOPPER_PULLING_ITEM$0",
		"description": "(cPluginManager) () Called when a hopper is pulling an item from the container above it."
	},

	"HOOK_ENTITY_TELEPORT_0": {
		"prefix": "HOOK_ENTITY_TELEPORT",
		"body": "HOOK_ENTITY_TELEPORT$0",
		"description": "(cPluginManager) () Called when an {{cEntity|entity}} is being teleported. Plugin may refuse the teleportation."
	},

	"HOOK_WEATHER_CHANGING_0": {
		"prefix": "HOOK_WEATHER_CHANGING",
		"body": "HOOK_WEATHER_CHANGING$0",
		"description": "(cPluginManager) () Called just before the weather changes"
	},

	"HOOK_WEATHER_CHANGED_0": {
		"prefix": "HOOK_WEATHER_CHANGED",
		"body": "HOOK_WEATHER_CHANGED$0",
		"description": "(cPluginManager) () Called after the weather has changed."
	},

	"HOOK_PLAYER_FISHED_0": {
		"prefix": "HOOK_PLAYER_FISHED",
		"body": "HOOK_PLAYER_FISHED$0",
		"description": "(cPluginManager) () Called when the player reels the fishing rod back in, after the server decides the player's fishing reward."
	},

	"HOOK_UPDATED_SIGN_0": {
		"prefix": "HOOK_UPDATED_SIGN",
		"body": "HOOK_UPDATED_SIGN$0",
		"description": "(cPluginManager) () Called after a {{cSignEntity|sign}} text has been updated, either by a player or by any external means."
	},

	"HOOK_PLUGIN_MESSAGE_0": {
		"prefix": "HOOK_PLUGIN_MESSAGE",
		"body": "HOOK_PLUGIN_MESSAGE$0",
		"description": "(cPluginManager) () Called when a PluginMessage packet is received from a client."
	},

	"HOOK_CRAFTING_NO_RECIPE_0": {
		"prefix": "HOOK_CRAFTING_NO_RECIPE",
		"body": "HOOK_CRAFTING_NO_RECIPE$0",
		"description": "(cPluginManager) () Called when a player has items in the crafting slots and the server cannot locate any recipe. Plugin may provide a recipe."
	},

	"HOOK_LOGIN_0": {
		"prefix": "HOOK_LOGIN",
		"body": "HOOK_LOGIN$0",
		"description": "(cPluginManager) () Called when a Login packet is sent to the client, before the client is queued for authentication."
	},

	"HOOK_TICK_0": {
		"prefix": "HOOK_TICK",
		"body": "HOOK_TICK$0",
		"description": "(cPluginManager) () Called when the main server thread ticks - 20 times a second."
	},

	"HOOK_TAKE_DAMAGE_0": {
		"prefix": "HOOK_TAKE_DAMAGE",
		"body": "HOOK_TAKE_DAMAGE$0",
		"description": "(cPluginManager) () Called when an entity is taking any kind of damage. Plugins may modify the damage value, effects, source or cancel the damage."
	},

	"HOOK_SPAWNED_MONSTER_0": {
		"prefix": "HOOK_SPAWNED_MONSTER",
		"body": "HOOK_SPAWNED_MONSTER$0",
		"description": "(cPluginManager) () Called after a mob is spawned in a {{cWorld|world}}. The mob is already part of the world."
	},

	"HOOK_SPAWNED_ENTITY_0": {
		"prefix": "HOOK_SPAWNED_ENTITY",
		"body": "HOOK_SPAWNED_ENTITY$0",
		"description": "(cPluginManager) () Called after an entity is spawned in a {{cWorld|world}}. The entity is already part of the world."
	},

	"HOOK_CHAT_0": {
		"prefix": "HOOK_CHAT",
		"body": "HOOK_CHAT$0",
		"description": "(cPluginManager) () Called when a client sends a chat message that is not a command. The plugin may modify the chat message"
	},

	"HOOK_PLAYER_FOOD_LEVEL_CHANGE_0": {
		"prefix": "HOOK_PLAYER_FOOD_LEVEL_CHANGE",
		"body": "HOOK_PLAYER_FOOD_LEVEL_CHANGE$0",
		"description": "(cPluginManager) () Called when the player's food level is changing. Plugins may refuse the change."
	},

	"HOOK_LOGIN_FORGE_0": {
		"prefix": "HOOK_LOGIN_FORGE",
		"body": "HOOK_LOGIN_FORGE$0",
		"description": "(cPluginManager) () Called when a Forge client has sent its ModList to the server, during the login handshake."
	},

	"HOOK_POST_CRAFTING_0": {
		"prefix": "HOOK_POST_CRAFTING",
		"body": "HOOK_POST_CRAFTING$0",
		"description": "(cPluginManager) () Called after a valid recipe has been chosen for the current contents of the crafting grid. Plugins may modify the recipe."
	},

	"HOOK_PLUGINS_LOADED_0": {
		"prefix": "HOOK_PLUGINS_LOADED",
		"body": "HOOK_PLUGINS_LOADED$0",
		"description": "(cPluginManager) () Called after all plugins have loaded."
	},

	"HOOK_PLAYER_RIGHT_CLICKING_ENTITY_0": {
		"prefix": "HOOK_PLAYER_RIGHT_CLICKING_ENTITY",
		"body": "HOOK_PLAYER_RIGHT_CLICKING_ENTITY$0",
		"description": "(cPluginManager) () Called when the client sends the UseEntity packet."
	},

	"HOOK_PLAYER_RIGHT_CLICK_0": {
		"prefix": "HOOK_PLAYER_RIGHT_CLICK",
		"body": "HOOK_PLAYER_RIGHT_CLICK$0",
		"description": "(cPluginManager) () Called when the client sends the RightClick packet."
	},

	"HOOK_PLAYER_PLACED_BLOCK_0": {
		"prefix": "HOOK_PLAYER_PLACED_BLOCK",
		"body": "HOOK_PLAYER_PLACED_BLOCK$0",
		"description": "(cPluginManager) () Called when the player has just placed a block"
	},

	"HOOK_PLAYER_OPENING_WINDOW_0": {
		"prefix": "HOOK_PLAYER_OPENING_WINDOW",
		"body": "HOOK_PLAYER_OPENING_WINDOW$0",
		"description": "(cPluginManager) () Called when the player is about to open a window. The plugin can return true to cancel the window opening."
	},

	"HOOK_PLAYER_DESTROYED_0": {
		"prefix": "HOOK_PLAYER_DESTROYED",
		"body": "HOOK_PLAYER_DESTROYED$0",
		"description": "(cPluginManager) () Called when the {{cPlayer}} object is destroyed - a player has disconnected."
	},

	"HOOK_PLAYER_JOINED_0": {
		"prefix": "HOOK_PLAYER_JOINED",
		"body": "HOOK_PLAYER_JOINED$0",
		"description": "(cPluginManager) () Called when the player entity has been created. It has not yet been fully initialized."
	},

	"HOOK_PLAYER_MOVING_0": {
		"prefix": "HOOK_PLAYER_MOVING",
		"body": "HOOK_PLAYER_MOVING$0",
		"description": "(cPluginManager) () Called when the player has moved and the movement is now being applied."
	},

	"HOOK_PLAYER_BREAKING_BLOCK_0": {
		"prefix": "HOOK_PLAYER_BREAKING_BLOCK",
		"body": "HOOK_PLAYER_BREAKING_BLOCK$0",
		"description": "(cPluginManager) () Called when a player is about to break a block. A plugin may cancel the event."
	},

	"crUnknownCommand_0": {
		"prefix": "crUnknownCommand",
		"body": "crUnknownCommand$0",
		"description": "(cPluginManager) () When the given command doesn't exist."
	},

	"HOOK_PLAYER_ANIMATION_0": {
		"prefix": "HOOK_PLAYER_ANIMATION",
		"body": "HOOK_PLAYER_ANIMATION$0",
		"description": "(cPluginManager) () Called when a client send the Animation packet."
	},

	"ReloadPlugins_0": {
		"prefix": "ReloadPlugins",
		"body": "ReloadPlugins()$0",
		"description": "(cPluginManager) () Reloads all active plugins"
	},

	"UnloadPlugin_0": {
		"prefix": "UnloadPlugin",
		"body": "UnloadPlugin(${1:PluginName string})$0",
		"description": "(cPluginManager) () Queues the specified plugin to be unloaded. To avoid deadlocks, the unloading happens in the main tick thread asynchronously."
	},

	"IsConsoleCommandBound_0": {
		"prefix": "IsConsoleCommandBound",
		"body": "IsConsoleCommandBound(${1:Command string})$0",
		"description": "(cPluginManager) (boolean) Returns true if console Command is already bound (by any plugin)"
	},

	"GetNumLoadedPlugins_0": {
		"prefix": "GetNumLoadedPlugins",
		"body": "GetNumLoadedPlugins()$0",
		"description": "(cPluginManager) (number) Returns the number of loaded plugins (psLoaded only)"
	},

	"DoWithPlugin_0": {
		"prefix": "DoWithPlugin",
		"body": "DoWithPlugin(${1:PluginName string}, ${2:CallbackFn function})$0",
		"description": "(cPluginManager) (boolean) Calls the CallbackFn for the specified plugin, if found. A plugin can be found even if it is currently unloaded, disabled or errored, the callback should check the plugin status. If the plugin is not found, this function returns false, otherwise it returns the bool value that the callback has returned. The CallbackFn has the following signature: <pre class='prettyprint lang-lua'>function ({{cPlugin|Plugin}})</pre>"
	},

	"ForceExecuteCommand_0": {
		"prefix": "ForceExecuteCommand",
		"body": "ForceExecuteCommand(${1:Player cPlayer}, ${2:CommandStr string})$0",
		"description": "(cPluginManager) (CommandResult cPluginManager#CommandResul) Same as ExecuteCommand, but doesn't check permissions"
	},

	"LoadPlugin_0": {
		"prefix": "LoadPlugin",
		"body": "LoadPlugin(${1:PluginFolder string})$0",
		"description": "(cPluginManager) () (<b>DEPRECATED</b>) Loads a plugin from the specified folder. NOTE: Loading plugins may be an unsafe operation and may result in a deadlock or a crash. This API is deprecated and might be removed."
	},

	"IsPluginLoaded_0": {
		"prefix": "IsPluginLoaded",
		"body": "IsPluginLoaded(${1:PluginName string})$0",
		"description": "(cPluginManager) () Returns true if the specified plugin is loaded."
	},

	"RefreshPluginList_0": {
		"prefix": "RefreshPluginList",
		"body": "RefreshPluginList()$0",
		"description": "(cPluginManager) () Refreshes the list of plugins to include all folders inside the Plugins folder (potentially new disabled plugins)"
	},

	"IsCommandBound_0": {
		"prefix": "IsCommandBound",
		"body": "IsCommandBound(${1:Command string})$0",
		"description": "(cPluginManager) (boolean) Returns true if in-game Command is already bound (by any plugin)"
	},

	"ExecuteConsoleCommand_0": {
		"prefix": "ExecuteConsoleCommand",
		"body": "ExecuteConsoleCommand(${1:CommandStr string})$0",
		"description": "(cPluginManager) (boolean , string) Executes the console command as if given by the admin on the console. If the command is successfully executed, returns true and the text that would be output to the console normally. On error it returns false and an error message."
	},

	"GetPluginsPath_0": {
		"prefix": "GetPluginsPath",
		"body": "GetPluginsPath()$0",
		"description": "(cPluginManager) (string) Returns the path where the individual plugin folders are located. Doesn't include the path separator at the end of the returned string."
	},

	"GetCommandPermission_0": {
		"prefix": "GetCommandPermission",
		"body": "GetCommandPermission(${1:Command string})$0",
		"description": "(cPluginManager) (Permission strin) Returns the permission needed for executing the specified command"
	},

	"GetPluginFolderName_0": {
		"prefix": "GetPluginFolderName",
		"body": "GetPluginFolderName(${1:PluginName string})$0",
		"description": "(cPluginManager) (string) Returns the name of the folder from which the plugin was loaded (without the 'Plugins' part). Used as a plugin's display name."
	},

	"ForEachConsoleCommand_0": {
		"prefix": "ForEachConsoleCommand",
		"body": "ForEachConsoleCommand(${1:CallbackFn function})$0",
		"description": "(cPluginManager) (boolean) Calls the CallbackFn function for each command that has been bound using BindConsoleCommand(). The CallbackFn has the following signature: <pre class='prettyprint lang-lua'>function (Command, HelpString)</pre> If the callback returns true, the enumeration is aborted and this API function returns false; if it returns false or no value, the enumeration continues with the next command, and the API function returns true."
	},

	"BindConsoleCommand_0": {
		"prefix": "BindConsoleCommand",
		"body": "BindConsoleCommand(${1:Command string}, ${2:Callback function}, ${3:HelpString string})$0",
		"description": "(cPluginManager) (boolean) Binds a console command with the specified callback function and help string. By common convention, providing an empty string for HelpString will hide the command from the 'help' console command. Returns true if successful, logs to console and returns no value on error. The callback uses the following signature: <pre class='prettyprint lang-lua'>function(Split)</pre> The Split parameter contains an array-table of the words that the admin has typed. If the callback returns true, the command is assumed to have executed successfully; in all other cases the server issues a warning to the console that the command is unknown (this is so that subcommands can be implemented)."
	},

	"BindConsoleCommand_1": {
		"prefix": "BindConsoleCommand",
		"body": "BindConsoleCommand(${1:Command string}, ${2:Callback function}, ${3:HelpString string})$0",
		"description": "(cPluginManager) (boolean) Binds a console command with the specified callback function and help string. By common convention, providing an empty string for HelpString will hide the command from the 'help' console command. Returns true if successful, logs to console and returns no value on error. The callback uses the following signature: <pre class='prettyprint lang-lua'>function(Split)</pre> The Split parameter contains an array-table of the words that the admin has typed. If the callback returns true, the command is assumed to have executed successfully; in all other cases the server issues a warning to the console that the command is unknown (this is so that subcommands can be implemented)."
	},

	"GetCurrentPlugin_0": {
		"prefix": "GetCurrentPlugin",
		"body": "GetCurrentPlugin()$0",
		"description": "(cPluginManager) (cPlugin) Returns the {{cPlugin}} object for the calling plugin. This is the same object that the Initialize function receives as the argument."
	},

	"GetAllPlugins_0": {
		"prefix": "GetAllPlugins",
		"body": "GetAllPlugins()$0",
		"description": "(cPluginManager) (table) Returns a table (dictionary) of all plugins, [name => value], where value is a valid {{cPlugin}} if the plugin is loaded, or the bool value false if the plugin is not loaded."
	},

	"GetPlugin_0": {
		"prefix": "GetPlugin",
		"body": "GetPlugin(${1:PluginName string})$0",
		"description": "(cPluginManager) (cPlugin) (<b>DEPRECATED, UNSAFE</b>) Returns a plugin handle of the specified plugin, or nil if such plugin is not loaded. Note thatdue to multithreading the handle is not guaranteed to be safe for use when stored - a single-plugin reload may have been triggered in the mean time for the requested plugin."
	},

	"AddHook_0": {
		"prefix": "AddHook",
		"body": "AddHook(${1:HookType cPluginManager#PluginHook}, ${2:Callback function})$0",
		"description": "(cPluginManager) () Informs the plugin manager that it should call the specified function when the specified hook event occurs. If a function is not specified, a default global function name is looked up, based on the hook type"
	},

	"GetNumPlugins_0": {
		"prefix": "GetNumPlugins",
		"body": "GetNumPlugins()$0",
		"description": "(cPluginManager) (number) Returns the number of plugins, including the disabled, errored, unloaded and not-found ones"
	},

	"BindCommand_0": {
		"prefix": "BindCommand",
		"body": "BindCommand(${1:Command string}, ${2:Permission string}, ${3:Callback function}, ${4:HelpString string})$0",
		"description": "(cPluginManager) (boolean) Binds an in-game command with the specified callback function, permission and help string. By common convention, providing an empty string for HelpString will hide the command from the /help display. Returns true if successful, logs to console and returns no value on error. The callback uses the following signature: <pre class='prettyprint lang-lua'>function(Split, {{cPlayer|Player}})</pre> The Split parameter contains an array-table of the words that the player has sent, Player is the {{cPlayer}} object representing the player who sent the command. If the callback returns true, the command is assumed to have executed successfully; in all other cases the server sends a warning to the player that the command is unknown (this is so that subcommands can be implemented)."
	},

	"BindCommand_1": {
		"prefix": "BindCommand",
		"body": "BindCommand(${1:Command string}, ${2:Permission string}, ${3:Callback function}, ${4:HelpString string})$0",
		"description": "(cPluginManager) (boolean) Binds an in-game command with the specified callback function, permission and help string. By common convention, providing an empty string for HelpString will hide the command from the /help display. Returns true if successful, logs to console and returns no value on error. The callback uses the following signature: <pre class='prettyprint lang-lua'>function(Split, {{cPlayer|Player}})</pre> The Split parameter contains an array-table of the words that the player has sent, Player is the {{cPlayer}} object representing the player who sent the command. If the callback returns true, the command is assumed to have executed successfully; in all other cases the server sends a warning to the player that the command is unknown (this is so that subcommands can be implemented)."
	},

	"ExecuteCommand_0": {
		"prefix": "ExecuteCommand",
		"body": "ExecuteCommand(${1:Player cPlayer}, ${2:CommandStr string})$0",
		"description": "(cPluginManager) (CommandResult cPluginManager#CommandResul) Executes the command as if given by the specified Player. Checks permissions."
	},

	"CallPlugin_0": {
		"prefix": "CallPlugin",
		"body": "CallPlugin(${1:PluginName string}, ${2:FunctionName string}, ${3:FunctionArgs... ...})$0",
		"description": "(cPluginManager) (FunctionRets ..) Calls the specified function in the specified plugin, passing all the given arguments to it. If it succeeds, it returns all the values returned by that function. If it fails, returns no value at all. Note that only strings, numbers, bools, nils, API classes and simple tables can be used for parameters and return values; functions cannot be copied across plugins."
	},

	"LogStackTrace_0": {
		"prefix": "LogStackTrace",
		"body": "LogStackTrace()$0",
		"description": "(cPluginManager) () Logs a current stack trace of the Lua engine to the server console log. Same format as is used when the plugin fails."
	},

	"ForEachPlugin_0": {
		"prefix": "ForEachPlugin",
		"body": "ForEachPlugin(${1:CallbackFn function})$0",
		"description": "(cPluginManager) (boolean) Calls the CallbackFn function for each plugin that is currently discovered by Cuberite (including disabled, unloaded and errrored plugins). The CallbackFn has the following signature: <pre class='prettyprint lang-lua'>function ({{cPlugin|Plugin}})</pre> If the callback returns true, the enumeration is aborted and this API function returns false; if it returns false or no value, the enumeration continues with the next command, and the API function returns true."
	},

	"ForEachPlugin_1": {
		"prefix": "ForEachPlugin",
		"body": "ForEachPlugin(${1:CallbackFn function})$0",
		"description": "(cPluginManager) (boolean) Calls the CallbackFn function for each plugin that is currently discovered by Cuberite (including disabled, unloaded and errrored plugins). The CallbackFn has the following signature: <pre class='prettyprint lang-lua'>function ({{cPlugin|Plugin}})</pre> If the callback returns true, the enumeration is aborted and this API function returns false; if it returns false or no value, the enumeration continues with the next command, and the API function returns true."
	},

	"FindPlugins_0": {
		"prefix": "FindPlugins",
		"body": "FindPlugins()$0",
		"description": "(cPluginManager) () <b>OBSOLETE</b>, use RefreshPluginList() instead"
	},

	"ForEachCommand_0": {
		"prefix": "ForEachCommand",
		"body": "ForEachCommand(${1:CallbackFn function})$0",
		"description": "(cPluginManager) (boolean) Calls the CallbackFn function for each command that has been bound using BindCommand(). The CallbackFn has the following signature: <pre class='prettyprint lang-lua'>function(Command, Permission, HelpString)</pre> If the callback returns true, the enumeration is aborted and this API function returns false; if it returns false or no value, the enumeration continues with the next command, and the API function returns true."
	},

	"Get_1": {
		"prefix": "Get",
		"body": "Get()$0",
		"description": "(cPluginManager) (cPluginManager) Returns the single instance of the plugin manager"
	},

	"Vector3f_0": {
		"prefix": "Vector3f",
		"body": "Vector3f$0",
		"description": "(Vector3f) () The Scary Class."
	},

	"y_0": {
		"prefix": "y",
		"body": "y$0",
		"description": "(Vector3f) () The Y coord of the vector."
	},

	"x_0": {
		"prefix": "x",
		"body": "x$0",
		"description": "(Vector3f) () The X coord of the vector."
	},

	"z_0": {
		"prefix": "z",
		"body": "z$0",
		"description": "(Vector3f) () The Z coord of the vector."
	},

	"EPS_0": {
		"prefix": "EPS",
		"body": "EPS$0",
		"description": "(Vector3f) () The max difference between two coords for which the coords are assumed equal (in LineCoeffToXYPlane() et al)."
	},

	"NO_INTERSECTION_0": {
		"prefix": "NO_INTERSECTION",
		"body": "NO_INTERSECTION$0",
		"description": "(Vector3f) () Special return value for the LineCoeffToXYPlane() et al meaning that there's no intersection with the plane."
	},

	"operator_mul_0": {
		"prefix": "operator_mul",
		"body": "operator_mul(${1:PerCoordMultiplier number})$0",
		"description": "(Vector3f) (Vector3f) Returns a new Vector3f object that has each of its coords multiplied by the specified number"
	},

	"operator_mul_1": {
		"prefix": "operator_mul",
		"body": "operator_mul(${1:Multiplier Vector3f})$0",
		"description": "(Vector3f) (Vector3f) Returns a new Vector3f object that has each of its coords multiplied by the respective coord of the specified vector."
	},

	"LineCoeffToXZPlane_0": {
		"prefix": "LineCoeffToXZPlane",
		"body": "LineCoeffToXZPlane(${1:Vector3f Vector3f}, ${2:Y number})$0",
		"description": "(Vector3f) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified Y coord. The result satisfies the following equation: (this + Result * (Param - this)).y = Y. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"HasNonZeroLength_0": {
		"prefix": "HasNonZeroLength",
		"body": "HasNonZeroLength()$0",
		"description": "(Vector3f) (boolean) Returns true if the vector has at least one coord non-zero. Note that this is subject to (possibly imprecise) floating point math."
	},

	"addedZ_0": {
		"prefix": "addedZ",
		"body": "addedZ(${1:ofs number})$0",
		"description": "(Vector3f) (Vector3f) Returns a copy of the vector, moved by the specified offset on the Z axis"
	},

	"LineCoeffToXYPlane_0": {
		"prefix": "LineCoeffToXYPlane",
		"body": "LineCoeffToXYPlane(${1:Vector3f Vector3f}, ${2:Z number})$0",
		"description": "(Vector3f) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified Z coord. The result satisfies the following equation: (this + Result * (Param - this)).z = Z. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"operator_plus_0": {
		"prefix": "operator_plus",
		"body": "operator_plus(${1:Other Vector3f})$0",
		"description": "(Vector3f) (Vector3f) Returns a new Vector3f object that holds the vector sum of this vector and the specified vector."
	},

	"Set_2": {
		"prefix": "Set",
		"body": "Set(${1:x number}, ${2:y number}, ${3:z number})$0",
		"description": "(Vector3f) () Sets all the coords of the vector at once."
	},

	"operator_sub_0": {
		"prefix": "operator_sub",
		"body": "operator_sub(${1:Subtrahend Vector3f})$0",
		"description": "(Vector3f) (Vector3f) Returns a new Vector3f object that holds the vector differrence between this vector and the specified vector."
	},

	"operator_sub_1": {
		"prefix": "operator_sub",
		"body": "operator_sub(${1:Subtrahend Vector3f})$0",
		"description": "(Vector3f) (Vector3f) Returns a new Vector3f that is a negative of this vector (all coords multiplied by -1)."
	},

	"Normalize_0": {
		"prefix": "Normalize",
		"body": "Normalize()$0",
		"description": "(Vector3f) () Normalizes this vector (makes it 1 unit long while keeping the direction). FIXME: Fails for zero vectors."
	},

	"Dot_0": {
		"prefix": "Dot",
		"body": "Dot(${1:Other Vector3f})$0",
		"description": "(Vector3f) (number) Returns the dot product of this vector and the specified vector."
	},

	"TurnCW_0": {
		"prefix": "TurnCW",
		"body": "TurnCW()$0",
		"description": "(Vector3f) () Rotates the vector 90 degrees clockwise around the vertical axis. Note that this is specific to minecraft's axis ordering, which is X+ left, Z+ down."
	},

	"Length_0": {
		"prefix": "Length",
		"body": "Length()$0",
		"description": "(Vector3f) (number) Returns the (euclidean) length of this vector"
	},

	"operator_div_0": {
		"prefix": "operator_div",
		"body": "operator_div(${1:PerCoordDivisor Vector3f})$0",
		"description": "(Vector3f) (Vector3f) Returns a new Vector3f object with each coord divided by the corresponding coord from the given vector."
	},

	"operator_div_1": {
		"prefix": "operator_div",
		"body": "operator_div(${1:Divisor number})$0",
		"description": "(Vector3f) (Vector3f) Returns a new Vector3f object with each coord divided by the specified number."
	},

	"NormalizeCopy_0": {
		"prefix": "NormalizeCopy",
		"body": "NormalizeCopy()$0",
		"description": "(Vector3f) (Vector3f) Returns a copy of this vector that is normalized (1 unit long while keeping the same direction). FIXME: Fails for zero vectors."
	},

	"Clamp_1": {
		"prefix": "Clamp",
		"body": "Clamp(${1:min number}, ${2:max number})$0",
		"description": "(Vector3f) () Clamps each coord into the specified range."
	},

	"Move_1": {
		"prefix": "Move",
		"body": "Move(${1:X number}, ${2:Y number}, ${3:Z number})$0",
		"description": "(Vector3f) () Adds the specified offsets to each coord, effectively moving the vector by the specified coord offsets."
	},

	"Move_2": {
		"prefix": "Move",
		"body": "Move(${1:Diff Vector3f})$0",
		"description": "(Vector3f) () Adds the specified vector to this vector. Is slightly better performant than adding with a '+' because this doesn't create a new object for the result."
	},

	"EqualsEps_0": {
		"prefix": "EqualsEps",
		"body": "EqualsEps(${1:Other Vector3f}, ${2:Eps number})$0",
		"description": "(Vector3f) (boolean) Returns true if the differences between each corresponding coords of this vector and the one specified, are less than the specified Eps."
	},

	"Equals_0": {
		"prefix": "Equals",
		"body": "Equals(${1:Other Vector3f})$0",
		"description": "(Vector3f) (boolean) Returns true if the specified vector is exactly equal to this vector. Note that this is subject to (possibly imprecise) floating point math."
	},

	"Abs_0": {
		"prefix": "Abs",
		"body": "Abs()$0",
		"description": "(Vector3f) () Updates each coord to its absolute value."
	},

	"addedX_0": {
		"prefix": "addedX",
		"body": "addedX(${1:ofs number})$0",
		"description": "(Vector3f) (Vector3f) Returns a copy of the vector, moved by the specified offset on the X axis"
	},

	"addedXZ_0": {
		"prefix": "addedXZ",
		"body": "addedXZ(${1:ofsX number}, ${2:ofsZ number})$0",
		"description": "(Vector3f) (Vector3f) Returns a copy of the vector, moved by the specified offsets on the X and Z axes"
	},

	"Vector3f_0": {
		"prefix": "Vector3f",
		"body": "Vector3f()$0",
		"description": "(Vector3f) (Vector3f) Creates a new Vector3f object with zero coords"
	},

	"Vector3f_1": {
		"prefix": "Vector3f",
		"body": "Vector3f(${1:x number}, ${2:y number}, ${3:z number})$0",
		"description": "(Vector3f) (Vector3f) Creates a new Vector3f object with the specified coords"
	},

	"Vector3f_2": {
		"prefix": "Vector3f",
		"body": "Vector3f(${1:Vector3f Vector3f})$0",
		"description": "(Vector3f) (Vector3f) Creates a new Vector3f object as a copy of the specified vector"
	},

	"Vector3f_3": {
		"prefix": "Vector3f",
		"body": "Vector3f(${1:Vector3d Vector3d})$0",
		"description": "(Vector3f) (Vector3f) Creates a new Vector3f object as a copy of the specified {{Vector3d}}"
	},

	"Vector3f_4": {
		"prefix": "Vector3f",
		"body": "Vector3f(${1:Vector3i Vector3i})$0",
		"description": "(Vector3f) (Vector3f) Creates a new Vector3f object as a copy of the specified {{Vector3i}}"
	},

	"Floor_0": {
		"prefix": "Floor",
		"body": "Floor()$0",
		"description": "(Vector3f) (Vector3i) Returns a new {{Vector3i}} object with coords set to math.floor of this vector's coords."
	},

	"TurnCCW_0": {
		"prefix": "TurnCCW",
		"body": "TurnCCW()$0",
		"description": "(Vector3f) () Rotates the vector 90 degrees counterclockwise around the vertical axis. Note that this is specific to minecraft's axis ordering, which is X+ left, Z+ down."
	},

	"SqrLength_0": {
		"prefix": "SqrLength",
		"body": "SqrLength()$0",
		"description": "(Vector3f) (number) Returns the (euclidean) length of this vector, squared. This operation is slightly less computationally expensive than Length(), while it conserves some properties of Length(), such as comparison."
	},

	"Cross_0": {
		"prefix": "Cross",
		"body": "Cross(${1:Other Vector3f})$0",
		"description": "(Vector3f) (Vector3f) Returns a new Vector3f object that holds the cross product of this vector and the specified vector."
	},

	"LineCoeffToYZPlane_0": {
		"prefix": "LineCoeffToYZPlane",
		"body": "LineCoeffToYZPlane(${1:Vector3f Vector3f}, ${2:X number})$0",
		"description": "(Vector3f) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified X coord. The result satisfies the following equation: (this + Result * (Param - this)).x = X. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"clamp_0": {
		"prefix": "clamp",
		"body": "clamp(${1:min number}, ${2:max number})$0",
		"description": "(Vector3f) () <b>OBSOLETE</b>, use Clamp() instead."
	},

	"addedY_0": {
		"prefix": "addedY",
		"body": "addedY(${1:ofs number})$0",
		"description": "(Vector3f) (Vector3f) Returns a copy of the vector, moved by the specified offset on the Y axis"
	},

	"abs_0": {
		"prefix": "abs",
		"body": "abs()$0",
		"description": "(Vector3f) () <b>OBSOLETE</b>, use Abs() instead."
	},

	"cObjective_0": {
		"prefix": "cObjective",
		"body": "cObjective$0",
		"description": "(cObjective) () The Scary Class."
	},

	"otPlayerKillCount_0": {
		"prefix": "otPlayerKillCount",
		"body": "otPlayerKillCount$0",
		"description": "(cObjective) () "
	},

	"otStatItemUse_0": {
		"prefix": "otStatItemUse",
		"body": "otStatItemUse$0",
		"description": "(cObjective) () "
	},

	"otStatItemBreak_0": {
		"prefix": "otStatItemBreak",
		"body": "otStatItemBreak$0",
		"description": "(cObjective) () "
	},

	"otDeathCount_0": {
		"prefix": "otDeathCount",
		"body": "otDeathCount$0",
		"description": "(cObjective) () "
	},

	"otTotalKillCount_0": {
		"prefix": "otTotalKillCount",
		"body": "otTotalKillCount$0",
		"description": "(cObjective) () "
	},

	"otStatEntityKilledBy_0": {
		"prefix": "otStatEntityKilledBy",
		"body": "otStatEntityKilledBy$0",
		"description": "(cObjective) () "
	},

	"otStatItemCraft_0": {
		"prefix": "otStatItemCraft",
		"body": "otStatItemCraft$0",
		"description": "(cObjective) () "
	},

	"otStatEntityKill_0": {
		"prefix": "otStatEntityKill",
		"body": "otStatEntityKill$0",
		"description": "(cObjective) () "
	},

	"otHealth_0": {
		"prefix": "otHealth",
		"body": "otHealth$0",
		"description": "(cObjective) () "
	},

	"otStatBlockMine_0": {
		"prefix": "otStatBlockMine",
		"body": "otStatBlockMine$0",
		"description": "(cObjective) () "
	},

	"otStat_0": {
		"prefix": "otStat",
		"body": "otStat$0",
		"description": "(cObjective) () "
	},

	"otDummy_0": {
		"prefix": "otDummy",
		"body": "otDummy$0",
		"description": "(cObjective) () "
	},

	"otAchievement_0": {
		"prefix": "otAchievement",
		"body": "otAchievement$0",
		"description": "(cObjective) () "
	},

	"AddScore_0": {
		"prefix": "AddScore",
		"body": "AddScore(${1:string string}, ${2:number number})$0",
		"description": "(cObjective) (Score <unknown) Adds a value to the score of the specified player and returns the new value."
	},

	"GetName_2": {
		"prefix": "GetName",
		"body": "GetName()$0",
		"description": "(cObjective) (string) Returns the internal name of the objective."
	},

	"GetDisplayName_0": {
		"prefix": "GetDisplayName",
		"body": "GetDisplayName()$0",
		"description": "(cObjective) (string) Returns the display name of the objective. This name will be shown to the connected players."
	},

	"SubScore_0": {
		"prefix": "SubScore",
		"body": "SubScore(${1:string string}, ${2:number number})$0",
		"description": "(cObjective) (Score <unknown) Subtracts a value from the score of the specified player and returns the new value."
	},

	"SetScore_0": {
		"prefix": "SetScore",
		"body": "SetScore(${1:string string}, ${2:Score <unknown>})$0",
		"description": "(cObjective) () Sets the score of the specified player."
	},

	"GetType_0": {
		"prefix": "GetType",
		"body": "GetType()$0",
		"description": "(cObjective) (eType <unknown) Returns the type of the objective. (i.e what is being tracked)"
	},

	"SetDisplayName_0": {
		"prefix": "SetDisplayName",
		"body": "SetDisplayName(${1:string string})$0",
		"description": "(cObjective) () Sets the display name of the objective."
	},

	"ResetScore_0": {
		"prefix": "ResetScore",
		"body": "ResetScore(${1:string string})$0",
		"description": "(cObjective) () Reset the score of the specified player."
	},

	"GetScore_0": {
		"prefix": "GetScore",
		"body": "GetScore(${1:string string})$0",
		"description": "(cObjective) (Score <unknown) Returns the score of the specified player."
	},

	"Reset_0": {
		"prefix": "Reset",
		"body": "Reset()$0",
		"description": "(cObjective) () Resets the scores of the tracked players."
	},

	"cJukeboxEntity_0": {
		"prefix": "cJukeboxEntity",
		"body": "cJukeboxEntity$0",
		"description": "(cJukeboxEntity) () The Scary Class."
	},

	"EjectRecord_0": {
		"prefix": "EjectRecord",
		"body": "EjectRecord()$0",
		"description": "(cJukeboxEntity) (boolean) Ejects the current record as a {{cPickup|pickup}}. No action if there's no current record. To remove record without generating the pickup, use SetRecord(0). Returns true if pickup ejected."
	},

	"SetRecord_0": {
		"prefix": "SetRecord",
		"body": "SetRecord(${1:RecordItemType number})$0",
		"description": "(cJukeboxEntity) () Sets the currently present record. Use zero for no record, or E_ITEM_*_DISC for records."
	},

	"PlayRecord_0": {
		"prefix": "PlayRecord",
		"body": "PlayRecord(${1:RecordItemType number})$0",
		"description": "(cJukeboxEntity) (boolean) Plays the specified Record. Return false if the parameter isn't a playable Record (E_ITEM_XXX_DISC). If there is a record already playing, ejects it first."
	},

	"IsRecordItem_0": {
		"prefix": "IsRecordItem",
		"body": "IsRecordItem(${1:ItemType number})$0",
		"description": "(cJukeboxEntity) (boolean) Returns true if the specified item is a record that can be played."
	},

	"IsPlayingRecord_0": {
		"prefix": "IsPlayingRecord",
		"body": "IsPlayingRecord()$0",
		"description": "(cJukeboxEntity) (boolean) Returns true if the jukebox is playing a record."
	},

	"GetRecord_0": {
		"prefix": "GetRecord",
		"body": "GetRecord()$0",
		"description": "(cJukeboxEntity) (number) Returns the record currently present. Zero for no record, E_ITEM_*_DISC for records."
	},

	"cUDPEndpoint_0": {
		"prefix": "cUDPEndpoint",
		"body": "cUDPEndpoint$0",
		"description": "(cUDPEndpoint) () The Scary Class."
	},

	"GetPort_0": {
		"prefix": "GetPort",
		"body": "GetPort()$0",
		"description": "(cUDPEndpoint) (number) Returns the local port number of the UDP endpoint listening for incoming datagrams. Especially useful if the UDP endpoint was created with auto-assign port (0)."
	},

	"Close_0": {
		"prefix": "Close",
		"body": "Close()$0",
		"description": "(cUDPEndpoint) () Closes the UDP endpoint. No more datagrams will be reported through the callbacks, the UDP port will be closed."
	},

	"Send_0": {
		"prefix": "Send",
		"body": "Send(${1:RawData string}, ${2:RemoteHost string}, ${3:RemotePort number})$0",
		"description": "(cUDPEndpoint) (boolean) Sends the specified raw data (string) to the specified remote host. The RemoteHost can be either a hostname or an IP address; if it is a hostname, the endpoint will queue a DNS lookup first, if it is an IP address, the send operation is executed immediately. Returns true if there was no immediate error, false on any failure. Note that the return value needn't represent whether the packet was actually sent, only if it was successfully queued."
	},

	"IsOpen_0": {
		"prefix": "IsOpen",
		"body": "IsOpen()$0",
		"description": "(cUDPEndpoint) (boolean) Returns true if the UDP endpoint is listening for incoming datagrams."
	},

	"EnableBroadcasts_0": {
		"prefix": "EnableBroadcasts",
		"body": "EnableBroadcasts()$0",
		"description": "(cUDPEndpoint) () Some OSes need this call before they allow UDP broadcasts on an endpoint."
	},

	"cChestEntity_0": {
		"prefix": "cChestEntity",
		"body": "cChestEntity$0",
		"description": "(cChestEntity) () The Scary Class."
	},

	"ContentsWidth_2": {
		"prefix": "ContentsWidth",
		"body": "ContentsWidth$0",
		"description": "(cChestEntity) () Width of the contents' {{cItemGrid|ItemGrid}}, as required by the parent class, {{cBlockEntityWithItems}}"
	},

	"ContentsHeight_2": {
		"prefix": "ContentsHeight",
		"body": "ContentsHeight$0",
		"description": "(cChestEntity) () Height of the contents' {{cItemGrid|ItemGrid}}, as required by the parent class, {{cBlockEntityWithItems}}"
	},

	"cDispenserEntity_0": {
		"prefix": "cDispenserEntity",
		"body": "cDispenserEntity$0",
		"description": "(cDispenserEntity) () The Scary Class."
	},

	"SpawnProjectileFromDispenser_0": {
		"prefix": "SpawnProjectileFromDispenser",
		"body": "SpawnProjectileFromDispenser(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:Kind cProjectileEntity#eKind}, ${5:Speed Vector3d}, ${6:Item cItem})$0",
		"description": "(cDispenserEntity) (number) Spawns a projectile of the given kind in front of the dispenser with the specified speed. Returns the UniqueID of the spawned projectile, or {{cEntity#INVALID_ID|cEntity.INVALID_ID}} on failure."
	},

	"GetShootVector_0": {
		"prefix": "GetShootVector",
		"body": "GetShootVector(${1:BlockMeta number})$0",
		"description": "(cDispenserEntity) (Vector3d) Returns a unit vector in the cardinal direction of where the dispenser with the specified meta would be facing."
	},

	"cMobHeadEntity_0": {
		"prefix": "cMobHeadEntity",
		"body": "cMobHeadEntity$0",
		"description": "(cMobHeadEntity) () The Scary Class."
	},

	"SetRotation_0": {
		"prefix": "SetRotation",
		"body": "SetRotation(${1:Rotation eMobHeadRotation})$0",
		"description": "(cMobHeadEntity) () Sets the rotation of the mob head."
	},

	"GetOwnerTexture_0": {
		"prefix": "GetOwnerTexture",
		"body": "GetOwnerTexture()$0",
		"description": "(cMobHeadEntity) (string) Returns the player texture of the mob head"
	},

	"GetRotation_0": {
		"prefix": "GetRotation",
		"body": "GetRotation()$0",
		"description": "(cMobHeadEntity) (eMobHeadRotation) Returns the rotation of the mob head"
	},

	"GetOwnerUUID_0": {
		"prefix": "GetOwnerUUID",
		"body": "GetOwnerUUID()$0",
		"description": "(cMobHeadEntity) (string) Returns the player UUID of the mob head"
	},

	"GetType_1": {
		"prefix": "GetType",
		"body": "GetType()$0",
		"description": "(cMobHeadEntity) (eMobHeadType) Returns the type of the mob head"
	},

	"SetType_0": {
		"prefix": "SetType",
		"body": "SetType(${1:HeadType eMobHeadType})$0",
		"description": "(cMobHeadEntity) () Set the type of the mob head"
	},

	"GetOwnerTextureSignature_0": {
		"prefix": "GetOwnerTextureSignature",
		"body": "GetOwnerTextureSignature()$0",
		"description": "(cMobHeadEntity) (string) Returns the signature of the player texture of the mob head"
	},

	"GetOwnerName_0": {
		"prefix": "GetOwnerName",
		"body": "GetOwnerName()$0",
		"description": "(cMobHeadEntity) (string) Returns the player name of the mob head"
	},

	"SetOwner_0": {
		"prefix": "SetOwner",
		"body": "SetOwner(${1:cPlayer cPlayer})$0",
		"description": "(cMobHeadEntity) () Set the {{cPlayer|player}} for mob heads with player type"
	},

	"SetOwner_1": {
		"prefix": "SetOwner",
		"body": "SetOwner(${1:OwnerUUID string}, ${2:OwnerName string}, ${3:OwnerTexture string}, ${4:OwnerTextureSignature string})$0",
		"description": "(cMobHeadEntity) () Sets the player components for the mob heads with player type"
	},

	"cMap_0": {
		"prefix": "cMap",
		"body": "cMap$0",
		"description": "(cMap) () The Scary Class."
	},

	"E_BASE_COLOR_DARK_GRAY_0": {
		"prefix": "E_BASE_COLOR_DARK_GRAY",
		"body": "E_BASE_COLOR_DARK_GRAY$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_DARK_GREEN_0": {
		"prefix": "E_BASE_COLOR_DARK_GREEN",
		"body": "E_BASE_COLOR_DARK_GREEN$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_TRANSPARENT_0": {
		"prefix": "E_BASE_COLOR_TRANSPARENT",
		"body": "E_BASE_COLOR_TRANSPARENT$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_WHITE_0": {
		"prefix": "E_BASE_COLOR_WHITE",
		"body": "E_BASE_COLOR_WHITE$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_RED_0": {
		"prefix": "E_BASE_COLOR_RED",
		"body": "E_BASE_COLOR_RED$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_LIGHT_BROWN_0": {
		"prefix": "E_BASE_COLOR_LIGHT_BROWN",
		"body": "E_BASE_COLOR_LIGHT_BROWN$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_LIGHT_GRAY_0": {
		"prefix": "E_BASE_COLOR_LIGHT_GRAY",
		"body": "E_BASE_COLOR_LIGHT_GRAY$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_BLUE_0": {
		"prefix": "E_BASE_COLOR_BLUE",
		"body": "E_BASE_COLOR_BLUE$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_GRAY_2_0": {
		"prefix": "E_BASE_COLOR_GRAY_2",
		"body": "E_BASE_COLOR_GRAY_2$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_LIGHT_GREEN_0": {
		"prefix": "E_BASE_COLOR_LIGHT_GREEN",
		"body": "E_BASE_COLOR_LIGHT_GREEN$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_DARK_BROWN_0": {
		"prefix": "E_BASE_COLOR_DARK_BROWN",
		"body": "E_BASE_COLOR_DARK_BROWN$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_PALE_BLUE_0": {
		"prefix": "E_BASE_COLOR_PALE_BLUE",
		"body": "E_BASE_COLOR_PALE_BLUE$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_BROWN_0": {
		"prefix": "E_BASE_COLOR_BROWN",
		"body": "E_BASE_COLOR_BROWN$0",
		"description": "(cMap) () "
	},

	"E_BASE_COLOR_GRAY_1_0": {
		"prefix": "E_BASE_COLOR_GRAY_1",
		"body": "E_BASE_COLOR_GRAY_1$0",
		"description": "(cMap) () "
	},

	"GetID_0": {
		"prefix": "GetID",
		"body": "GetID()$0",
		"description": "(cMap) (number) Returns the numerical ID of the map. (The item damage value)"
	},

	"EraseData_0": {
		"prefix": "EraseData",
		"body": "EraseData()$0",
		"description": "(cMap) () Erases all pixel data."
	},

	"GetScale_0": {
		"prefix": "GetScale",
		"body": "GetScale()$0",
		"description": "(cMap) (number) Returns the scale of the map. Range: [0,4]"
	},

	"SetPosition_0": {
		"prefix": "SetPosition",
		"body": "SetPosition(${1:CenterX number}, ${2:CenterZ number})$0",
		"description": "(cMap) () Relocates the map. The pixel data will not be modified."
	},

	"GetPixelWidth_0": {
		"prefix": "GetPixelWidth",
		"body": "GetPixelWidth()$0",
		"description": "(cMap) (number) Returns the width of a single pixel in blocks."
	},

	"GetWidth_0": {
		"prefix": "GetWidth",
		"body": "GetWidth()$0",
		"description": "(cMap) (number) Returns the width of the map."
	},

	"GetWorld_0": {
		"prefix": "GetWorld",
		"body": "GetWorld()$0",
		"description": "(cMap) (cWorld) Returns the associated world."
	},

	"GetPixel_0": {
		"prefix": "GetPixel",
		"body": "GetPixel(${1:PixelX number}, ${2:PixelZ number})$0",
		"description": "(cMap) (ColorID numbe) Returns the color of the specified pixel."
	},

	"GetCenterX_0": {
		"prefix": "GetCenterX",
		"body": "GetCenterX()$0",
		"description": "(cMap) (number) Returns the X coord of the map's center."
	},

	"SetScale_0": {
		"prefix": "SetScale",
		"body": "SetScale(${1:Scale number})$0",
		"description": "(cMap) () Rescales the map. The pixel data will not be modified."
	},

	"GetHeight_2": {
		"prefix": "GetHeight",
		"body": "GetHeight()$0",
		"description": "(cMap) (number) Returns the height of the map."
	},

	"GetName_3": {
		"prefix": "GetName",
		"body": "GetName()$0",
		"description": "(cMap) (string) Returns the name of the map."
	},

	"Resize_0": {
		"prefix": "Resize",
		"body": "Resize(${1:Width number}, ${2:Height number})$0",
		"description": "(cMap) () Resizes the map. WARNING: This will erase the pixel data."
	},

	"GetDimension_1": {
		"prefix": "GetDimension",
		"body": "GetDimension()$0",
		"description": "(cMap) (eDimension) Returns the dimension of the associated world."
	},

	"GetNumPixels_0": {
		"prefix": "GetNumPixels",
		"body": "GetNumPixels()$0",
		"description": "(cMap) (number) Returns the number of pixels in this map."
	},

	"GetCenterZ_0": {
		"prefix": "GetCenterZ",
		"body": "GetCenterZ()$0",
		"description": "(cMap) (number) Returns the Y coord of the map's center."
	},

	"SetPixel_0": {
		"prefix": "SetPixel",
		"body": "SetPixel(${1:PixelX number}, ${2:PixelZ number}, ${3:ColorID number})$0",
		"description": "(cMap) (IsSuccess boolea) Sets the color of the specified pixel. Returns false on error (Out of range)."
	},

	"cGhastFireballEntity_0": {
		"prefix": "cGhastFireballEntity",
		"body": "cGhastFireballEntity$0",
		"description": "(cGhastFireballEntity) () The Scary Class."
	},

	"cBoat_0": {
		"prefix": "cBoat",
		"body": "cBoat$0",
		"description": "(cBoat) () The Scary Class."
	},

	"GetMaterial_0": {
		"prefix": "GetMaterial",
		"body": "GetMaterial()$0",
		"description": "(cBoat) (Material cBoat#eMateria) Returns the material of the boat."
	},

	"MaterialToString_0": {
		"prefix": "MaterialToString",
		"body": "MaterialToString(${1:Material cBoat#eMaterial})$0",
		"description": "(cBoat) (Material strin) Returns the boat material as a string."
	},

	"ItemToMaterial_0": {
		"prefix": "ItemToMaterial",
		"body": "ItemToMaterial(${1:Item cItem})$0",
		"description": "(cBoat) (Material cBoat#eMateria) Returns the eMaterial that should be used for a boat created from the specified item. Returns bmOak if not a boat item."
	},

	"MaterialToItem_0": {
		"prefix": "MaterialToItem",
		"body": "MaterialToItem(${1:Material cBoat#eMaterial})$0",
		"description": "(cBoat) (Item cIte) Returns the boat item of the boat material"
	},

	"SetMaterial_0": {
		"prefix": "SetMaterial",
		"body": "SetMaterial(${1:Material cBoat#eMaterial})$0",
		"description": "(cBoat) () Set the material of the boat."
	},

	"StringToMaterial_0": {
		"prefix": "StringToMaterial",
		"body": "StringToMaterial(${1:Material string})$0",
		"description": "(cBoat) (Material cBoat#eMateria) Returns the boat material for the passed string. Returns oak if not valid."
	},

	"bmJungle_0": {
		"prefix": "bmJungle",
		"body": "bmJungle$0",
		"description": "(cBoat) () "
	},

	"bmSpruce_0": {
		"prefix": "bmSpruce",
		"body": "bmSpruce$0",
		"description": "(cBoat) () "
	},

	"bmDarkOak_0": {
		"prefix": "bmDarkOak",
		"body": "bmDarkOak$0",
		"description": "(cBoat) () "
	},

	"bmBirch_0": {
		"prefix": "bmBirch",
		"body": "bmBirch$0",
		"description": "(cBoat) () "
	},

	"bmAcacia_0": {
		"prefix": "bmAcacia",
		"body": "bmAcacia$0",
		"description": "(cBoat) () "
	},

	"bmOak_0": {
		"prefix": "bmOak",
		"body": "bmOak$0",
		"description": "(cBoat) () "
	},

	"cEntityEffect_0": {
		"prefix": "cEntityEffect",
		"body": "cEntityEffect$0",
		"description": "(cEntityEffect) () The Scary Class."
	},

	"GetPotionEffectIntensity_0": {
		"prefix": "GetPotionEffectIntensity",
		"body": "GetPotionEffectIntensity(${1:ItemDamage number})$0",
		"description": "(cEntityEffect) (short numbe) Retrieves the intensity level from the potion's damage value. Returns 0 for level I potions, 1 for level II potions."
	},

	"GetPotionColor_0": {
		"prefix": "GetPotionColor",
		"body": "GetPotionColor(${1:ItemDamage number})$0",
		"description": "(cEntityEffect) (number) Returns the potion color (used by the client for visuals), based on the potion's damage value"
	},

	"GetPotionEffectType_0": {
		"prefix": "GetPotionEffectType",
		"body": "GetPotionEffectType(${1:ItemDamage number})$0",
		"description": "(cEntityEffect) (eType cEntityEffect#eTyp) Translates the potion's damage value into the entity effect that the potion gives"
	},

	"GetPotionEffectDuration_0": {
		"prefix": "GetPotionEffectDuration",
		"body": "GetPotionEffectDuration(${1:ItemDamage number})$0",
		"description": "(cEntityEffect) (number) Returns the effect duration, in ticks, based on the potion's damage value"
	},

	"IsPotionDrinkable_0": {
		"prefix": "IsPotionDrinkable",
		"body": "IsPotionDrinkable(${1:ItemDamage number})$0",
		"description": "(cEntityEffect) (boolean) Returns true if the potion with the given damage is drinkable"
	},

	"cLineBlockTracer_0": {
		"prefix": "cLineBlockTracer",
		"body": "cLineBlockTracer$0",
		"description": "(cLineBlockTracer) () The Scary Class."
	},

	"FirstSolidHitTrace_0": {
		"prefix": "FirstSolidHitTrace",
		"body": "FirstSolidHitTrace(${1:World cWorld}, ${2:StartX number}, ${3:StartY number}, ${4:StartZ number}, ${5:EndX number}, ${6:EndY number}, ${7:EndZ number})$0",
		"description": "(cLineBlockTracer) (HasHitSolid boolean, HitCoords Vector3d, HitBlockCoords Vector3i, HitBlockFace eBlockFac) If the specified line hits a solid block, return true and the coordinates / face of the first such solid block hit. Returns false if there's no solid block on that line."
	},

	"FirstSolidHitTrace_1": {
		"prefix": "FirstSolidHitTrace",
		"body": "FirstSolidHitTrace(${1:World cWorld}, ${2:Start Vector3d}, ${3:End Vector3d})$0",
		"description": "(cLineBlockTracer) (HasHitSolid boolean, HitCoords Vector3d, HitBlockCoords Vector3i, HitBlockFace eBlockFac) If the specified line hits a solid block, return true and the coordinates / face of the first such solid block hit. Returns false if there's no solid block on that line."
	},

	"Trace_1": {
		"prefix": "Trace",
		"body": "Trace(${1:World cWorld}, ${2:Callbacks table}, ${3:StartX number}, ${4:StartY number}, ${5:StartZ number}, ${6:EndX number}, ${7:EndY number}, ${8:EndZ number})$0",
		"description": "(cLineBlockTracer) (boolean) Performs the trace on the specified line. Returns true if the entire trace was processed (no callback returned true)"
	},

	"LineOfSightTrace_0": {
		"prefix": "LineOfSightTrace",
		"body": "LineOfSightTrace(${1:World cWorld}, ${2:StartX number}, ${3:StartY number}, ${4:StartZ number}, ${5:EndX number}, ${6:EndY number}, ${7:EndZ number}, ${8:Sight number})$0",
		"description": "(cLineBlockTracer) (CanSee boolea) Returns true if the two points specified are within line of sight of each other. The Sight parameter specifies which blocks are considered transparent for the trace, it is a combination of {{cLineBlockTracer#eLineOfSight|losXXX}} values added together."
	},

	"LineOfSightTrace_1": {
		"prefix": "LineOfSightTrace",
		"body": "LineOfSightTrace(${1:World cWorld}, ${2:Start Vector3d}, ${3:End Vector3d}, ${4:Sight number})$0",
		"description": "(cLineBlockTracer) (CanSee boolea) Returns true if the two points specified are within line of sight of each other. The Sight parameter specifies which blocks are considered transparent for the trace, it is a combination of {{cLineBlockTracer#eLineOfSight|losXXX}} values added together."
	},

	"losAir_0": {
		"prefix": "losAir",
		"body": "losAir$0",
		"description": "(cLineBlockTracer) () LineOfSight tracing can 'see' through air blocks."
	},

	"losLava_0": {
		"prefix": "losLava",
		"body": "losLava$0",
		"description": "(cLineBlockTracer) () LineOfSight tracing can 'see' through lava blocks."
	},

	"losWater_0": {
		"prefix": "losWater",
		"body": "losWater$0",
		"description": "(cLineBlockTracer) () LineOfSight tracing can 'see' through water blocks."
	},

	"cNetwork_0": {
		"prefix": "cNetwork",
		"body": "cNetwork$0",
		"description": "(cNetwork) () The Scary Class."
	},

	"CreateUDPEndpoint_0": {
		"prefix": "CreateUDPEndpoint",
		"body": "CreateUDPEndpoint(${1:Port number}, ${2:UDPCallbacks table})$0",
		"description": "(cNetwork) (cUDPEndpoint) Creates a UDP endpoint that listens for incoming datagrams on the specified port, and can be used to send or broadcast datagrams. Uses the UDPCallbacks to report incoming datagrams or errors. If the endpoint cannot be created, the OnError callback is called with the error details and the returned endpoint will report IsOpen() == false. The plugin needs to store the returned endpoint object for as long as it needs the UDP port open; if the endpoint is garbage-collected by Lua, the socket will be closed and no more incoming data will be reported.<br>If the Port is zero, the OS chooses an available UDP port for the endpoint; use {{cUDPEndpoint}}:GetPort() to query the port number in such case."
	},

	"HostnameToIP_0": {
		"prefix": "HostnameToIP",
		"body": "HostnameToIP(${1:Host string}, ${2:LookupCallbacks table})$0",
		"description": "(cNetwork) (boolean) Begins a DNS lookup to find the IP address(es) for the specified host. Uses the LookupCallbacks table to report progress, success or errors. Returns false if it fails immediately (bad hostname format), true if the lookup started successfully. Host can be either a hostname or an IP address."
	},

	"Listen_0": {
		"prefix": "Listen",
		"body": "Listen(${1:Port number}, ${2:ListenCallbacks table})$0",
		"description": "(cNetwork) (cServerHandle) Starts listening on the specified port. Uses the ListenCallbacks to report incoming connections or errors. Returns a {{cServerHandle}} object representing the server. If the listen operation failed, the OnError callback is called with the error details and the returned server handle will report IsListening() == false. The plugin needs to store the server handle object for as long as it needs the server running, if the server handle is garbage-collected by Lua, the listening socket will be closed and all current connections dropped."
	},

	"EnumLocalIPAddresses_0": {
		"prefix": "EnumLocalIPAddresses",
		"body": "EnumLocalIPAddresses()$0",
		"description": "(cNetwork) (table) Returns all local IP addresses for network interfaces currently available on the machine, as an array-table of strings."
	},

	"IPToHostname_0": {
		"prefix": "IPToHostname",
		"body": "IPToHostname(${1:Address string}, ${2:LookupCallbacks table})$0",
		"description": "(cNetwork) (boolean) Begins a reverse-DNS lookup to find out the hostname for the specified IP address. Uses the LookupCallbacks table to report progress, success or errors. Returns false if it fails immediately (bad address format), true if the lookup started successfully."
	},

	"Connect_0": {
		"prefix": "Connect",
		"body": "Connect(${1:Host string}, ${2:Port number}, ${3:LinkCallbacks table})$0",
		"description": "(cNetwork) (boolean) Begins establishing a (client) TCP connection to the specified host. Uses the LinkCallbacks table to report progress, success, errors and incoming data. Returns false if it fails immediately (bad port value, bad hostname format), true otherwise. Host can be either an IP address or a hostname."
	},

	"HTTPRequest_0": {
		"prefix": "HTTPRequest",
		"body": "HTTPRequest$0",
		"description": "(HTTPRequest) () The Scary Class."
	},

	"Username_0": {
		"prefix": "Username",
		"body": "Username$0",
		"description": "(HTTPRequest) () Name of the logged-in user."
	},

	"Path_0": {
		"prefix": "Path",
		"body": "Path$0",
		"description": "(HTTPRequest) () The Path part of the URL (excluding the parameters)"
	},

	"Method_0": {
		"prefix": "Method",
		"body": "Method$0",
		"description": "(HTTPRequest) () The HTTP method used to make the request. Usually GET or POST."
	},

	"URL_0": {
		"prefix": "URL",
		"body": "URL$0",
		"description": "(HTTPRequest) () The entire URL used for the request."
	},

	"PostParams_0": {
		"prefix": "PostParams",
		"body": "PostParams$0",
		"description": "(HTTPRequest) () Map-table of data posted through a FORM - either a GET or POST method. Logically the same as FormData, but in a map-table format (for each parameter given as 'param=value', there is an entry in the table with 'param' as its key and 'value' as its value)."
	},

	"FormData_0": {
		"prefix": "FormData",
		"body": "FormData$0",
		"description": "(HTTPRequest) () Array-table of {{HTTPFormData}}, contains the values of individual form elements submitted by the client"
	},

	"Params_0": {
		"prefix": "Params",
		"body": "Params$0",
		"description": "(HTTPRequest) () Map-table of parameters given to the request in the URL (?param=value); if a form uses GET method, this is the same as FormData. For each parameter given as 'param=value', there is an entry in the table with 'param' as its key and 'value' as its value."
	},

	"tolua_0": {
		"prefix": "tolua",
		"body": "tolua$0",
		"description": "(tolua) () The Scary Class."
	},

	"cast_0": {
		"prefix": "cast",
		"body": "cast(${1:Object any}, ${2:TypeStr string})$0",
		"description": "(tolua) (Object an) Casts the object to the specified type.<br/><b>Note:</b> This is a potentially unsafe operation and it could crash the server. There is normally no need to use this function at all, so don't use it unless you know exactly what you're doing."
	},

	"getpeer_0": {
		"prefix": "getpeer",
		"body": "getpeer()$0",
		"description": "(tolua) () "
	},

	"inherit_0": {
		"prefix": "inherit",
		"body": "inherit()$0",
		"description": "(tolua) () "
	},

	"type_0": {
		"prefix": "type",
		"body": "type(${1:Object any})$0",
		"description": "(tolua) (TypeStr strin) Returns a string representing the type of the object. This works similar to Lua's built-in type() function, but recognizes the underlying C++ classes, too."
	},

	"setpeer_0": {
		"prefix": "setpeer",
		"body": "setpeer()$0",
		"description": "(tolua) () "
	},

	"takeownership_0": {
		"prefix": "takeownership",
		"body": "takeownership()$0",
		"description": "(tolua) () "
	},

	"releaseownership_0": {
		"prefix": "releaseownership",
		"body": "releaseownership()$0",
		"description": "(tolua) () "
	},

	"cItemFrame_0": {
		"prefix": "cItemFrame",
		"body": "cItemFrame$0",
		"description": "(cItemFrame) () The Scary Class."
	},

	"SetItemRotation_0": {
		"prefix": "SetItemRotation",
		"body": "SetItemRotation(${1:ItemRotation number})$0",
		"description": "(cItemFrame) () Set the rotation from the item in the frame"
	},

	"SetItem_0": {
		"prefix": "SetItem",
		"body": "SetItem(${1:Item cItem})$0",
		"description": "(cItemFrame) () Set the item in the frame"
	},

	"GetItem_0": {
		"prefix": "GetItem",
		"body": "GetItem()$0",
		"description": "(cItemFrame) (cItem) Returns the item in the frame (readonly object, do not modify)"
	},

	"GetItemRotation_0": {
		"prefix": "GetItemRotation",
		"body": "GetItemRotation()$0",
		"description": "(cItemFrame) (number) Returns the rotation from the item in the frame"
	},

	"cFlowerPotEntity_0": {
		"prefix": "cFlowerPotEntity",
		"body": "cFlowerPotEntity$0",
		"description": "(cFlowerPotEntity) () The Scary Class."
	},

	"SetItem_1": {
		"prefix": "SetItem",
		"body": "SetItem(${1:Item cItem})$0",
		"description": "(cFlowerPotEntity) () Set the item in the flower pot"
	},

	"GetItem_1": {
		"prefix": "GetItem",
		"body": "GetItem()$0",
		"description": "(cFlowerPotEntity) (Item cIte) Returns the item in the flower pot."
	},

	"IsItemInPot_0": {
		"prefix": "IsItemInPot",
		"body": "IsItemInPot()$0",
		"description": "(cFlowerPotEntity) (boolean) Is a flower in the pot?"
	},

	"TakeDamageInfo_0": {
		"prefix": "TakeDamageInfo",
		"body": "TakeDamageInfo$0",
		"description": "(TakeDamageInfo) () The Scary Class."
	},

	"DamageType_0": {
		"prefix": "DamageType",
		"body": "DamageType$0",
		"description": "(TakeDamageInfo) () Source of the damage. One of the dtXXX constants."
	},

	"FinalDamage_0": {
		"prefix": "FinalDamage",
		"body": "FinalDamage$0",
		"description": "(TakeDamageInfo) () The final amount of damage that will be applied to the Receiver. It is the RawDamage minus any Receiver's armor-protection."
	},

	"RawDamage_0": {
		"prefix": "RawDamage",
		"body": "RawDamage$0",
		"description": "(TakeDamageInfo) () Amount of damage that the attack produces on the Receiver, including the Attacker's equipped weapon, but excluding the Receiver's armor."
	},

	"Attacker_0": {
		"prefix": "Attacker",
		"body": "Attacker$0",
		"description": "(TakeDamageInfo) () The entity who is attacking. Only valid if dtAttack."
	},

	"Knockback_0": {
		"prefix": "Knockback",
		"body": "Knockback$0",
		"description": "(TakeDamageInfo) () Vector specifying the amount and direction of knockback that will be applied to the Receiver "
	},

	"Vector3d_0": {
		"prefix": "Vector3d",
		"body": "Vector3d$0",
		"description": "(Vector3d) () The Scary Class."
	},

	"y_1": {
		"prefix": "y",
		"body": "y$0",
		"description": "(Vector3d) () The Y coord of the vector."
	},

	"x_1": {
		"prefix": "x",
		"body": "x$0",
		"description": "(Vector3d) () The X coord of the vector."
	},

	"z_1": {
		"prefix": "z",
		"body": "z$0",
		"description": "(Vector3d) () The Z coord of the vector."
	},

	"EPS_1": {
		"prefix": "EPS",
		"body": "EPS$0",
		"description": "(Vector3d) () The max difference between two coords for which the coords are assumed equal (in LineCoeffToXYPlane() et al)."
	},

	"NO_INTERSECTION_1": {
		"prefix": "NO_INTERSECTION",
		"body": "NO_INTERSECTION$0",
		"description": "(Vector3d) () Special return value for the LineCoeffToXYPlane() et al meaning that there's no intersection with the plane."
	},

	"operator_mul_2": {
		"prefix": "operator_mul",
		"body": "operator_mul(${1:PerCoordMultiplier Vector3d})$0",
		"description": "(Vector3d) (Vector3d) Returns a new Vector3d object with each coord multiplied by the corresponding coord from the given vector."
	},

	"operator_mul_3": {
		"prefix": "operator_mul",
		"body": "operator_mul(${1:Multiplier number})$0",
		"description": "(Vector3d) (Vector3d) Returns a new Vector3d object with each coord multiplied."
	},

	"LineCoeffToXZPlane_1": {
		"prefix": "LineCoeffToXZPlane",
		"body": "LineCoeffToXZPlane(${1:Vector3d Vector3d}, ${2:Y number})$0",
		"description": "(Vector3d) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified Y coord. The result satisfies the following equation: (this + Result * (Param - this)).y = Y. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"HasNonZeroLength_1": {
		"prefix": "HasNonZeroLength",
		"body": "HasNonZeroLength()$0",
		"description": "(Vector3d) (boolean) Returns true if the vector has at least one coord non-zero. Note that this is subject to (possibly imprecise) floating point math."
	},

	"addedZ_1": {
		"prefix": "addedZ",
		"body": "addedZ(${1:ofs number})$0",
		"description": "(Vector3d) (Vector3d) Returns a copy of the vector, moved by the specified offset on the Z axis"
	},

	"LineCoeffToXYPlane_1": {
		"prefix": "LineCoeffToXYPlane",
		"body": "LineCoeffToXYPlane(${1:Vector3d Vector3d}, ${2:Z number})$0",
		"description": "(Vector3d) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified Z coord. The result satisfies the following equation: (this + Result * (Param - this)).z = Z. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"operator_plus_1": {
		"prefix": "operator_plus",
		"body": "operator_plus(${1:Addend Vector3d})$0",
		"description": "(Vector3d) (Vector3d) Returns a new Vector3d containing the sum of this vector and the specified vector"
	},

	"Set_3": {
		"prefix": "Set",
		"body": "Set(${1:X number}, ${2:Y number}, ${3:Z number})$0",
		"description": "(Vector3d) () Sets all the coords in this object."
	},

	"operator_sub_2": {
		"prefix": "operator_sub",
		"body": "operator_sub(${1:Subtrahend Vector3d})$0",
		"description": "(Vector3d) (Vector3d) Returns a new Vector3d object containing the difference between this object and the specified vector."
	},

	"operator_sub_3": {
		"prefix": "operator_sub",
		"body": "operator_sub(${1:Subtrahend Vector3d})$0",
		"description": "(Vector3d) (Vector3d) Returns a new Vector3d object that is a negative of this vector (all coords multiplied by -1)."
	},

	"Normalize_1": {
		"prefix": "Normalize",
		"body": "Normalize()$0",
		"description": "(Vector3d) () Changes this vector so that it keeps current direction but is exactly 1 unit long. FIXME: Fails for a zero vector."
	},

	"Dot_1": {
		"prefix": "Dot",
		"body": "Dot(${1:Other Vector3d})$0",
		"description": "(Vector3d) (number) Returns the dot product of this vector and the specified vector."
	},

	"TurnCW_1": {
		"prefix": "TurnCW",
		"body": "TurnCW()$0",
		"description": "(Vector3d) () Rotates the vector 90 degrees clockwise around the vertical axis. Note that this is specific to minecraft's axis ordering, which is X+ left, Z+ down."
	},

	"Length_1": {
		"prefix": "Length",
		"body": "Length()$0",
		"description": "(Vector3d) (number) Returns the (euclidean) length of the vector."
	},

	"operator_div_2": {
		"prefix": "operator_div",
		"body": "operator_div(${1:ParCoordDivisors Vector3d})$0",
		"description": "(Vector3d) (Vector3d) Returns a new Vector3d object with each coord divided by the corresponding coord from the given vector."
	},

	"operator_div_3": {
		"prefix": "operator_div",
		"body": "operator_div(${1:Divisor number})$0",
		"description": "(Vector3d) (Vector3d) Returns a new Vector3d object with each coord divided by the specified number."
	},

	"NormalizeCopy_1": {
		"prefix": "NormalizeCopy",
		"body": "NormalizeCopy()$0",
		"description": "(Vector3d) (Vector3d) Returns a new vector that has the same direction as this but is exactly 1 unit long. FIXME: Fails for a zero vector."
	},

	"Clamp_2": {
		"prefix": "Clamp",
		"body": "Clamp(${1:min number}, ${2:max number})$0",
		"description": "(Vector3d) () Clamps each coord into the specified range."
	},

	"Move_3": {
		"prefix": "Move",
		"body": "Move(${1:X number}, ${2:Y number}, ${3:Z number})$0",
		"description": "(Vector3d) () Adds the specified offsets to each coord, effectively moving the vector by the specified coord offsets."
	},

	"Move_4": {
		"prefix": "Move",
		"body": "Move(${1:Diff Vector3d})$0",
		"description": "(Vector3d) () Adds the specified vector to this vector. Is slightly better performant than adding with a '+' because this doesn't create a new object for the result."
	},

	"EqualsEps_1": {
		"prefix": "EqualsEps",
		"body": "EqualsEps(${1:AnotherVector Vector3d}, ${2:Eps number})$0",
		"description": "(Vector3d) (boolean) Returns true if the differences between each corresponding coords of this vector and the one specified are less than the specified Eps."
	},

	"Equals_1": {
		"prefix": "Equals",
		"body": "Equals(${1:AnotherVector Vector3d})$0",
		"description": "(Vector3d) (boolean) Returns true if this vector is exactly equal to the specified vector. Note that this is subject to (possibly imprecise) floating point math."
	},

	"Abs_1": {
		"prefix": "Abs",
		"body": "Abs()$0",
		"description": "(Vector3d) () Updates each coord to its absolute value."
	},

	"addedX_1": {
		"prefix": "addedX",
		"body": "addedX(${1:ofs number})$0",
		"description": "(Vector3d) (Vector3d) Returns a copy of the vector, moved by the specified offset on the X axis"
	},

	"addedXZ_1": {
		"prefix": "addedXZ",
		"body": "addedXZ(${1:ofsX number}, ${2:ofsZ number})$0",
		"description": "(Vector3d) (Vector3d) Returns a copy of the vector, moved by the specified offsets on the X and Z axes"
	},

	"Vector3d_0": {
		"prefix": "Vector3d",
		"body": "Vector3d(${1:Vector Vector3f})$0",
		"description": "(Vector3d) (Vector3d) Creates a new Vector3d object by copying the coords from the given Vector3f."
	},

	"Vector3d_1": {
		"prefix": "Vector3d",
		"body": "Vector3d(${1:Vector Vector3f})$0",
		"description": "(Vector3d) (Vector3d) Creates a new Vector3d object with all its coords set to 0."
	},

	"Vector3d_2": {
		"prefix": "Vector3d",
		"body": "Vector3d(${1:X number}, ${2:Y number}, ${3:Z number})$0",
		"description": "(Vector3d) (Vector3d) Creates a new Vector3d object with its coords set to the specified values."
	},

	"Floor_1": {
		"prefix": "Floor",
		"body": "Floor()$0",
		"description": "(Vector3d) (Vector3i) Returns a new {{Vector3i}} object with coords set to math.floor of this vector's coords."
	},

	"TurnCCW_1": {
		"prefix": "TurnCCW",
		"body": "TurnCCW()$0",
		"description": "(Vector3d) () Rotates the vector 90 degrees counterclockwise around the vertical axis. Note that this is specific to minecraft's axis ordering, which is X+ left, Z+ down."
	},

	"SqrLength_1": {
		"prefix": "SqrLength",
		"body": "SqrLength()$0",
		"description": "(Vector3d) (number) Returns the (euclidean) length of this vector, squared. This operation is slightly less computationally expensive than Length(), while it conserves some properties of Length(), such as comparison. "
	},

	"Cross_1": {
		"prefix": "Cross",
		"body": "Cross(${1:Other Vector3d})$0",
		"description": "(Vector3d) (Vector3d) Returns a new Vector3d that is a {{https://en.wikipedia.org/wiki/Cross_product|cross product}} of this vector and the specified vector."
	},

	"LineCoeffToYZPlane_1": {
		"prefix": "LineCoeffToYZPlane",
		"body": "LineCoeffToYZPlane(${1:Vector3d Vector3d}, ${2:X number})$0",
		"description": "(Vector3d) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified X coord. The result satisfies the following equation: (this + Result * (Param - this)).x = X. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"clamp_1": {
		"prefix": "clamp",
		"body": "clamp(${1:min number}, ${2:max number})$0",
		"description": "(Vector3d) () <b>OBSOLETE</b>, use Clamp() instead."
	},

	"addedY_1": {
		"prefix": "addedY",
		"body": "addedY(${1:ofs number})$0",
		"description": "(Vector3d) (Vector3d) Returns a copy of the vector, moved by the specified offset on the Y axis"
	},

	"abs_1": {
		"prefix": "abs",
		"body": "abs()$0",
		"description": "(Vector3d) () <b>OBSOLETE</b>, use Abs() instead."
	},

	"cJson_0": {
		"prefix": "cJson",
		"body": "cJson$0",
		"description": "(cJson) () The Scary Class."
	},

	"Serialize_0": {
		"prefix": "Serialize",
		"body": "Serialize(${1:table table}, ${2:options table})$0",
		"description": "(cJson) (string) Serializes the input table into a Json string. The options table, if present, is used to adjust the formatting of the serialized string, see below for details. <br/>Returns nil and error message if the table cannot be serialized (eg. contains both an array part and a dictionary part)."
	},

	"Parse_0": {
		"prefix": "Parse",
		"body": "Parse(${1:InputString string})$0",
		"description": "(cJson) (table) Parses the Json in the input string into a Lua table. Returns nil and detailed error message if parsing fails."
	},

	"cCompositeChat_0": {
		"prefix": "cCompositeChat",
		"body": "cCompositeChat$0",
		"description": "(cCompositeChat) () The Scary Class."
	},

	"AddRunCommandPart_0": {
		"prefix": "AddRunCommandPart",
		"body": "AddRunCommandPart(${1:Text string}, ${2:Command string}, ${3:Style string})$0",
		"description": "(cCompositeChat) (self) Adds a text which, when clicked, runs the specified command. Chaining."
	},

	"AddSuggestCommandPart_0": {
		"prefix": "AddSuggestCommandPart",
		"body": "AddSuggestCommandPart(${1:Text string}, ${2:Command string}, ${3:Style string})$0",
		"description": "(cCompositeChat) (self) Adds a text which, when clicked, puts the specified command into the player's chat input area. Chaining."
	},

	"AddShowAchievementPart_0": {
		"prefix": "AddShowAchievementPart",
		"body": "AddShowAchievementPart(${1:PlayerName string}, ${2:AchievementName string}, ${3:Style string})$0",
		"description": "(cCompositeChat) () Adds a text that represents the 'Achievement get' message."
	},

	"AddTextPart_0": {
		"prefix": "AddTextPart",
		"body": "AddTextPart(${1:Text string}, ${2:Style string})$0",
		"description": "(cCompositeChat) (self) Adds a regular text. Chaining."
	},

	"AddUrlPart_0": {
		"prefix": "AddUrlPart",
		"body": "AddUrlPart(${1:Text string}, ${2:Url string}, ${3:Style string})$0",
		"description": "(cCompositeChat) (self) Adds a text which, when clicked, opens up a browser at the specified URL. Chaining."
	},

	"cCompositeChat_0": {
		"prefix": "cCompositeChat",
		"body": "cCompositeChat()$0",
		"description": "(cCompositeChat) (cCompositeChat) Creates an empty chat message"
	},

	"cCompositeChat_1": {
		"prefix": "cCompositeChat",
		"body": "cCompositeChat(${1:Text string}, ${2:MessageType eMessageType})$0",
		"description": "(cCompositeChat) (cCompositeChat) Creates a chat message containing the specified text, parsed by the ParseText() function. This allows easy migration from old chat messages."
	},

	"SetMessageType_0": {
		"prefix": "SetMessageType",
		"body": "SetMessageType(${1:MessageType eMessageType}, ${2:AdditionalData string})$0",
		"description": "(cCompositeChat) (self) Sets the MessageType (mtXXX constant) that is associated with this message. Also sets the additional data (string) associated with the message, which is specific for the message type - such as the sender's name for mtPrivateMessage. When sent to a player, the message will be formatted according to this message type and the player's settings (adding '[INFO]' prefix etc.). Chaining."
	},

	"UnderlineUrls_0": {
		"prefix": "UnderlineUrls",
		"body": "UnderlineUrls()$0",
		"description": "(cCompositeChat) (self) Makes all URL parts contained in the message underlined. Doesn't affect parts added in the future. Chaining."
	},

	"ParseText_0": {
		"prefix": "ParseText",
		"body": "ParseText(${1:Text string})$0",
		"description": "(cCompositeChat) (self) Adds text, while recognizing http and https URLs and old-style formatting codes ('@2'). Chaining."
	},

	"GetMessageType_0": {
		"prefix": "GetMessageType",
		"body": "GetMessageType()$0",
		"description": "(cCompositeChat) (eMessageType) Returns the MessageType (mtXXX constant) that is associated with this message. When sent to a player, the message will be formatted according to this message type and the player's settings (adding '[INFO]' prefix etc.)"
	},

	"GetAdditionalMessageTypeData_0": {
		"prefix": "GetAdditionalMessageTypeData",
		"body": "GetAdditionalMessageTypeData()$0",
		"description": "(cCompositeChat) (string) Returns the AdditionalData associated with the message, such as the sender's name for mtPrivateMessage"
	},

	"CreateJsonString_0": {
		"prefix": "CreateJsonString",
		"body": "CreateJsonString(${1:AddPrefixes boolean})$0",
		"description": "(cCompositeChat) (string) Returns the entire object serialized into JSON, as it would be sent to a client. AddPrefixes specifies whether the chat prefixes should be prepended to the message, true by default."
	},

	"ExtractText_0": {
		"prefix": "ExtractText",
		"body": "ExtractText()$0",
		"description": "(cCompositeChat) (string) Returns the text from the parts that comprises the human-readable data. Used for older protocols that don't support composite chat, and for console-logging."
	},

	"Clear_2": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cCompositeChat) (self) Removes all parts from this object"
	},

	"cSplashPotionEntity_0": {
		"prefix": "cSplashPotionEntity",
		"body": "cSplashPotionEntity$0",
		"description": "(cSplashPotionEntity) () The Scary Class."
	},

	"SetPotionColor_0": {
		"prefix": "SetPotionColor",
		"body": "SetPotionColor(${1:PotionColor number})$0",
		"description": "(cSplashPotionEntity) () Sets the color index of the particles for this potion"
	},

	"SetEntityEffectType_0": {
		"prefix": "SetEntityEffectType",
		"body": "SetEntityEffectType(${1:EntityEffectType cEntityEffect#eType})$0",
		"description": "(cSplashPotionEntity) () Sets the effect type of this potion"
	},

	"GetPotionColor_1": {
		"prefix": "GetPotionColor",
		"body": "GetPotionColor()$0",
		"description": "(cSplashPotionEntity) (number) Returns the color index of the particles emitted by this potion"
	},

	"GetItem_2": {
		"prefix": "GetItem",
		"body": "GetItem()$0",
		"description": "(cSplashPotionEntity) (cItem) Gets the potion item that was thrown."
	},

	"GetEntityEffectType_0": {
		"prefix": "GetEntityEffectType",
		"body": "GetEntityEffectType()$0",
		"description": "(cSplashPotionEntity) (cEntityEffect#eType) Returns the effect type of this potion"
	},

	"cExpOrb_0": {
		"prefix": "cExpOrb",
		"body": "cExpOrb$0",
		"description": "(cExpOrb) () The Scary Class."
	},

	"SetReward_0": {
		"prefix": "SetReward",
		"body": "SetReward(${1:number })$0",
		"description": "(cExpOrb) () Sets the experience amount."
	},

	"GetReward_0": {
		"prefix": "GetReward",
		"body": "GetReward()$0",
		"description": "(cExpOrb) (number) Returns the experience amount."
	},

	"GetAge_1": {
		"prefix": "GetAge",
		"body": "GetAge()$0",
		"description": "(cExpOrb) (number) Returns the number of ticks that this experience orb has existed."
	},

	"SetAge_1": {
		"prefix": "SetAge",
		"body": "SetAge(${1:number })$0",
		"description": "(cExpOrb) () Sets the experience orb's age, in ticks."
	},

	"ItemCategory_0": {
		"prefix": "ItemCategory",
		"body": "ItemCategory$0",
		"description": "(ItemCategory) () The Scary Class."
	},

	"IsMinecart_0": {
		"prefix": "IsMinecart",
		"body": "IsMinecart(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a minecart."
	},

	"IsChestPlate_0": {
		"prefix": "IsChestPlate",
		"body": "IsChestPlate(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a chestplate."
	},

	"IsSword_0": {
		"prefix": "IsSword",
		"body": "IsSword(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a sword."
	},

	"IsTool_0": {
		"prefix": "IsTool",
		"body": "IsTool(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a tool (axe, hoe, pickaxe, shovel or FIXME: sword)"
	},

	"IsBoots_0": {
		"prefix": "IsBoots",
		"body": "IsBoots(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of boots."
	},

	"IsArmor_0": {
		"prefix": "IsArmor",
		"body": "IsArmor(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of an armor."
	},

	"IsHorseArmor_0": {
		"prefix": "IsHorseArmor",
		"body": "IsHorseArmor(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a horse armor."
	},

	"IsHelmet_0": {
		"prefix": "IsHelmet",
		"body": "IsHelmet(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a helmet."
	},

	"IsLeggings_0": {
		"prefix": "IsLeggings",
		"body": "IsLeggings(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a leggings."
	},

	"IsShovel_0": {
		"prefix": "IsShovel",
		"body": "IsShovel(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a shovel."
	},

	"IsPickaxe_0": {
		"prefix": "IsPickaxe",
		"body": "IsPickaxe(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a pickaxe."
	},

	"IsAxe_0": {
		"prefix": "IsAxe",
		"body": "IsAxe(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of an axe."
	},

	"IsHoe_0": {
		"prefix": "IsHoe",
		"body": "IsHoe(${1:ItemType number})$0",
		"description": "(ItemCategory) (boolean) Returns true if the specified item type is any kind of a hoe."
	},

	"Globals_0": {
		"prefix": "Globals",
		"body": "Globals$0",
		"description": "(Globals) () The Scary Class."
	},

	"E_BLOCK_OBSERVER_0": {
		"prefix": "E_BLOCK_OBSERVER",
		"body": "E_BLOCK_OBSERVER$0",
		"description": "(Globals) () The blocktype for observer"
	},

	"E_BLOCK_BROWN_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_BROWN_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_BROWN_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for brown glazed terracotta"
	},

	"E_BLOCK_WOODEN_DOOR_0": {
		"prefix": "E_BLOCK_WOODEN_DOOR",
		"body": "E_BLOCK_WOODEN_DOOR$0",
		"description": "(Globals) () The blocktype for wooden door"
	},

	"spRightSleeve_0": {
		"prefix": "spRightSleeve",
		"body": "spRightSleeve$0",
		"description": "(Globals) () The right sleeve skin part"
	},

	"E_ITEM_SUGARCANE_0": {
		"prefix": "E_ITEM_SUGARCANE",
		"body": "E_ITEM_SUGARCANE$0",
		"description": "(Globals) () The itemtype for sugarcane"
	},

	"E_ITEM_DIAMOND_HORSE_ARMOR_0": {
		"prefix": "E_ITEM_DIAMOND_HORSE_ARMOR",
		"body": "E_ITEM_DIAMOND_HORSE_ARMOR$0",
		"description": "(Globals) () The itemtype for diamond horse armor"
	},

	"esWitherBirth_0": {
		"prefix": "esWitherBirth",
		"body": "esWitherBirth$0",
		"description": "(Globals) () An explosion at a wither's birth. The SourceData param is the {{cMonster|wither entity}} object."
	},

	"E_BLOCK_GOLD_BLOCK_0": {
		"prefix": "E_BLOCK_GOLD_BLOCK",
		"body": "E_BLOCK_GOLD_BLOCK$0",
		"description": "(Globals) () The blocktype for gold block"
	},

	"E_BLOCK_ANVIL_HIGH_DAMAGE_0": {
		"prefix": "E_BLOCK_ANVIL_HIGH_DAMAGE",
		"body": "E_BLOCK_ANVIL_HIGH_DAMAGE$0",
		"description": "(Globals) () The blocktype for anvil high damage"
	},

	"E_ITEM_GOLD_LEGGINGS_0": {
		"prefix": "E_ITEM_GOLD_LEGGINGS",
		"body": "E_ITEM_GOLD_LEGGINGS$0",
		"description": "(Globals) () The itemtype for gold leggings"
	},

	"E_BLOCK_COBBLESTONE_WALL_0": {
		"prefix": "E_BLOCK_COBBLESTONE_WALL",
		"body": "E_BLOCK_COBBLESTONE_WALL$0",
		"description": "(Globals) () The blocktype for cobblestone wall"
	},

	"E_BLOCK_RED_SANDSTONE_0": {
		"prefix": "E_BLOCK_RED_SANDSTONE",
		"body": "E_BLOCK_RED_SANDSTONE$0",
		"description": "(Globals) () The blocktype for red sandstone"
	},

	"caDblClick_0": {
		"prefix": "caDblClick",
		"body": "caDblClick$0",
		"description": "(Globals) () Double click action"
	},

	"E_BLOCK_JUNGLE_DOOR_0": {
		"prefix": "E_BLOCK_JUNGLE_DOOR",
		"body": "E_BLOCK_JUNGLE_DOOR$0",
		"description": "(Globals) () The blocktype for jungle door"
	},

	"E_ITEM_BANNER_0": {
		"prefix": "E_ITEM_BANNER",
		"body": "E_ITEM_BANNER$0",
		"description": "(Globals) () The itemtype for banner"
	},

	"E_BLOCK_COBBLESTONE_0": {
		"prefix": "E_BLOCK_COBBLESTONE",
		"body": "E_BLOCK_COBBLESTONE$0",
		"description": "(Globals) () The blocktype for cobblestone"
	},

	"E_BLOCK_BROWN_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_BROWN_SHULKER_BOX",
		"body": "E_BLOCK_BROWN_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for brown shulker box"
	},

	"E_ITEM_RABBIT_HIDE_0": {
		"prefix": "E_ITEM_RABBIT_HIDE",
		"body": "E_ITEM_RABBIT_HIDE$0",
		"description": "(Globals) () The itemtype for rabbit hide"
	},

	"E_BLOCK_YELLOW_FLOWER_0": {
		"prefix": "E_BLOCK_YELLOW_FLOWER",
		"body": "E_BLOCK_YELLOW_FLOWER$0",
		"description": "(Globals) () The blocktype for yellow flower"
	},

	"E_BLOCK_WATER_0": {
		"prefix": "E_BLOCK_WATER",
		"body": "E_BLOCK_WATER$0",
		"description": "(Globals) () The blocktype for water"
	},

	"E_BLOCK_PISTON_MOVED_BLOCK_0": {
		"prefix": "E_BLOCK_PISTON_MOVED_BLOCK",
		"body": "E_BLOCK_PISTON_MOVED_BLOCK$0",
		"description": "(Globals) () The blocktype for piston moved block"
	},

	"mtMaxPlusOne_0": {
		"prefix": "mtMaxPlusOne",
		"body": "mtMaxPlusOne$0",
		"description": "(Globals) () The first invalid type, used for checking on LuaAPI boundaries"
	},

	"E_ITEM_RAW_RABBIT_0": {
		"prefix": "E_ITEM_RAW_RABBIT",
		"body": "E_ITEM_RAW_RABBIT$0",
		"description": "(Globals) () The itemtype for raw rabbit"
	},

	"caUnknown_0": {
		"prefix": "caUnknown",
		"body": "caUnknown$0",
		"description": "(Globals) () Unknown click action"
	},

	"E_BLOCK_PRISMARINE_BLOCK_0": {
		"prefix": "E_BLOCK_PRISMARINE_BLOCK",
		"body": "E_BLOCK_PRISMARINE_BLOCK$0",
		"description": "(Globals) () The blocktype for prismarine block"
	},

	"E_BLOCK_UNFINISHED_0": {
		"prefix": "E_BLOCK_UNFINISHED",
		"body": "E_BLOCK_UNFINISHED$0",
		"description": "(Globals) () Internal blocktype for unfinished block handlers"
	},

	"E_BLOCK_NEW_LEAVES_0": {
		"prefix": "E_BLOCK_NEW_LEAVES",
		"body": "E_BLOCK_NEW_LEAVES$0",
		"description": "(Globals) () The blocktype for new leaves"
	},

	"E_BLOCK_BIRCH_DOOR_0": {
		"prefix": "E_BLOCK_BIRCH_DOOR",
		"body": "E_BLOCK_BIRCH_DOOR$0",
		"description": "(Globals) () The blocktype for birch door"
	},

	"E_BLOCK_PURPUR_STAIRS_0": {
		"prefix": "E_BLOCK_PURPUR_STAIRS",
		"body": "E_BLOCK_PURPUR_STAIRS$0",
		"description": "(Globals) () The blocktype for purpur stairs"
	},

	"E_ITEM_MINECART_WITH_COMMAND_BLOCK_0": {
		"prefix": "E_ITEM_MINECART_WITH_COMMAND_BLOCK",
		"body": "E_ITEM_MINECART_WITH_COMMAND_BLOCK$0",
		"description": "(Globals) () The itemtype for minecart with command block"
	},

	"E_BLOCK_BREWING_STAND_0": {
		"prefix": "E_BLOCK_BREWING_STAND",
		"body": "E_BLOCK_BREWING_STAND$0",
		"description": "(Globals) () The blocktype for brewing stand"
	},

	"E_BLOCK_EMERALD_ORE_0": {
		"prefix": "E_BLOCK_EMERALD_ORE",
		"body": "E_BLOCK_EMERALD_ORE$0",
		"description": "(Globals) () The blocktype for emerald ore"
	},

	"E_BLOCK_CYAN_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_CYAN_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_CYAN_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for cyan glazed terracotta"
	},

	"E_ITEM_JUNGLE_BOAT_0": {
		"prefix": "E_ITEM_JUNGLE_BOAT",
		"body": "E_ITEM_JUNGLE_BOAT$0",
		"description": "(Globals) () The itemtype for jungle boat"
	},

	"spMask_0": {
		"prefix": "spMask",
		"body": "spMask$0",
		"description": "(Globals) () A mask of all valid skin parts combined"
	},

	"E_ITEM_LEATHER_PANTS_0": {
		"prefix": "E_ITEM_LEATHER_PANTS",
		"body": "E_ITEM_LEATHER_PANTS$0",
		"description": "(Globals) () The itemtype for leather pants"
	},

	"E_BLOCK_CLAY_0": {
		"prefix": "E_BLOCK_CLAY",
		"body": "E_BLOCK_CLAY$0",
		"description": "(Globals) () The blocktype for clay"
	},

	"E_ITEM_SPIDER_EYE_0": {
		"prefix": "E_ITEM_SPIDER_EYE",
		"body": "E_ITEM_SPIDER_EYE$0",
		"description": "(Globals) () The itemtype for spider eye"
	},

	"E_ITEM_GUNPOWDER_0": {
		"prefix": "E_ITEM_GUNPOWDER",
		"body": "E_ITEM_GUNPOWDER$0",
		"description": "(Globals) () The itemtype for gunpowder"
	},

	"E_ITEM_CARROT_0": {
		"prefix": "E_ITEM_CARROT",
		"body": "E_ITEM_CARROT$0",
		"description": "(Globals) () The itemtype for carrot"
	},

	"E_ITEM_FIREWORK_STAR_0": {
		"prefix": "E_ITEM_FIREWORK_STAR",
		"body": "E_ITEM_FIREWORK_STAR$0",
		"description": "(Globals) () The itemtype for firework star"
	},

	"E_ITEM_BREAD_0": {
		"prefix": "E_ITEM_BREAD",
		"body": "E_ITEM_BREAD$0",
		"description": "(Globals) () The itemtype for bread"
	},

	"E_BLOCK_ACACIA_WOOD_STAIRS_0": {
		"prefix": "E_BLOCK_ACACIA_WOOD_STAIRS",
		"body": "E_BLOCK_ACACIA_WOOD_STAIRS$0",
		"description": "(Globals) () The blocktype for acacia wood stairs"
	},

	"E_ITEM_COOKIE_0": {
		"prefix": "E_ITEM_COOKIE",
		"body": "E_ITEM_COOKIE$0",
		"description": "(Globals) () The itemtype for cookie"
	},

	"E_BLOCK_VINES_0": {
		"prefix": "E_BLOCK_VINES",
		"body": "E_BLOCK_VINES$0",
		"description": "(Globals) () The blocktype for vines"
	},

	"spLeftPants_0": {
		"prefix": "spLeftPants",
		"body": "spLeftPants$0",
		"description": "(Globals) () The left pants leg skin part"
	},

	"E_ITEM_STRING_0": {
		"prefix": "E_ITEM_STRING",
		"body": "E_ITEM_STRING$0",
		"description": "(Globals) () The itemtype for string"
	},

	"E_BLOCK_DARK_OAK_WOOD_STAIRS_0": {
		"prefix": "E_BLOCK_DARK_OAK_WOOD_STAIRS",
		"body": "E_BLOCK_DARK_OAK_WOOD_STAIRS$0",
		"description": "(Globals) () The blocktype for dark oak wood stairs"
	},

	"E_ITEM_COOKED_PORKCHOP_0": {
		"prefix": "E_ITEM_COOKED_PORKCHOP",
		"body": "E_ITEM_COOKED_PORKCHOP$0",
		"description": "(Globals) () The itemtype for cooked porkchop"
	},

	"E_BLOCK_LIME_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_LIME_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_LIME_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for lime glazed terracotta"
	},

	"E_BLOCK_FROSTED_ICE_0": {
		"prefix": "E_BLOCK_FROSTED_ICE",
		"body": "E_BLOCK_FROSTED_ICE$0",
		"description": "(Globals) () The blocktype for frosted ice"
	},

	"E_ITEM_FLINT_AND_STEEL_0": {
		"prefix": "E_ITEM_FLINT_AND_STEEL",
		"body": "E_ITEM_FLINT_AND_STEEL$0",
		"description": "(Globals) () The itemtype for flint and steel"
	},

	"E_ITEM_BOWL_0": {
		"prefix": "E_ITEM_BOWL",
		"body": "E_ITEM_BOWL$0",
		"description": "(Globals) () The itemtype for bowl"
	},

	"E_BLOCK_GLOWSTONE_0": {
		"prefix": "E_BLOCK_GLOWSTONE",
		"body": "E_BLOCK_GLOWSTONE$0",
		"description": "(Globals) () The blocktype for glowstone"
	},

	"E_BLOCK_SANDSTONE_0": {
		"prefix": "E_BLOCK_SANDSTONE",
		"body": "E_BLOCK_SANDSTONE$0",
		"description": "(Globals) () The blocktype for sandstone"
	},

	"caLeftClick_0": {
		"prefix": "caLeftClick",
		"body": "caLeftClick$0",
		"description": "(Globals) () Left click on a slot"
	},

	"E_BLOCK_CHAIN_COMMAND_BLOCK_0": {
		"prefix": "E_BLOCK_CHAIN_COMMAND_BLOCK",
		"body": "E_BLOCK_CHAIN_COMMAND_BLOCK$0",
		"description": "(Globals) () The blocktype for chain command block"
	},

	"E_ITEM_NETHER_STAR_0": {
		"prefix": "E_ITEM_NETHER_STAR",
		"body": "E_ITEM_NETHER_STAR$0",
		"description": "(Globals) () The itemtype for nether star"
	},

	"E_BLOCK_BIRCH_FENCE_GATE_0": {
		"prefix": "E_BLOCK_BIRCH_FENCE_GATE",
		"body": "E_BLOCK_BIRCH_FENCE_GATE$0",
		"description": "(Globals) () The blocktype for birch fence gate"
	},

	"E_ITEM_STAL_DISC_0": {
		"prefix": "E_ITEM_STAL_DISC",
		"body": "E_ITEM_STAL_DISC$0",
		"description": "(Globals) () The itemtype for stal disc"
	},

	"E_ITEM_SLIMEBALL_0": {
		"prefix": "E_ITEM_SLIMEBALL",
		"body": "E_ITEM_SLIMEBALL$0",
		"description": "(Globals) () The itemtype for slimeball"
	},

	"E_ITEM_MALL_DISC_0": {
		"prefix": "E_ITEM_MALL_DISC",
		"body": "E_ITEM_MALL_DISC$0",
		"description": "(Globals) () The itemtype for mall disc"
	},

	"E_ITEM_POPPED_CHORUS_FRUIT_0": {
		"prefix": "E_ITEM_POPPED_CHORUS_FRUIT",
		"body": "E_ITEM_POPPED_CHORUS_FRUIT$0",
		"description": "(Globals) () The itemtype for popped chorus fruit"
	},

	"E_ITEM_PUMPKIN_PIE_0": {
		"prefix": "E_ITEM_PUMPKIN_PIE",
		"body": "E_ITEM_PUMPKIN_PIE$0",
		"description": "(Globals) () The itemtype for pumpkin pie"
	},

	"E_ITEM_11_DISC_0": {
		"prefix": "E_ITEM_11_DISC",
		"body": "E_ITEM_11_DISC$0",
		"description": "(Globals) () The itemtype for 11 disc"
	},

	"E_BLOCK_DOUBLE_RED_SANDSTONE_SLAB_0": {
		"prefix": "E_BLOCK_DOUBLE_RED_SANDSTONE_SLAB",
		"body": "E_BLOCK_DOUBLE_RED_SANDSTONE_SLAB$0",
		"description": "(Globals) () The blocktype for double red sandstone slab"
	},

	"E_META_CONCRETE_GRAY_0": {
		"prefix": "E_META_CONCRETE_GRAY",
		"body": "E_META_CONCRETE_GRAY$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is gray."
	},

	"E_BLOCK_GRAVEL_0": {
		"prefix": "E_BLOCK_GRAVEL",
		"body": "E_BLOCK_GRAVEL$0",
		"description": "(Globals) () The blocktype for gravel"
	},

	"E_META_CONCRETE_ORANGE_0": {
		"prefix": "E_META_CONCRETE_ORANGE",
		"body": "E_META_CONCRETE_ORANGE$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is orange."
	},

	"E_BLOCK_REDSTONE_REPEATER_OFF_0": {
		"prefix": "E_BLOCK_REDSTONE_REPEATER_OFF",
		"body": "E_BLOCK_REDSTONE_REPEATER_OFF$0",
		"description": "(Globals) () The blocktype for redstone repeater off"
	},

	"E_BLOCK_OAK_WOOD_STAIRS_0": {
		"prefix": "E_BLOCK_OAK_WOOD_STAIRS",
		"body": "E_BLOCK_OAK_WOOD_STAIRS$0",
		"description": "(Globals) () The blocktype for oak wood stairs"
	},

	"E_BLOCK_REPEATING_COMMAND_BLOCK_0": {
		"prefix": "E_BLOCK_REPEATING_COMMAND_BLOCK",
		"body": "E_BLOCK_REPEATING_COMMAND_BLOCK$0",
		"description": "(Globals) () The blocktype for repeating command block"
	},

	"E_ITEM_BOW_0": {
		"prefix": "E_ITEM_BOW",
		"body": "E_ITEM_BOW$0",
		"description": "(Globals) () The itemtype for bow"
	},

	"E_META_CONCRETE_POWDER_CYAN_0": {
		"prefix": "E_META_CONCRETE_POWDER_CYAN",
		"body": "E_META_CONCRETE_POWDER_CYAN$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is cyan."
	},

	"E_BLOCK_NUMBER_OF_TYPES_0": {
		"prefix": "E_BLOCK_NUMBER_OF_TYPES",
		"body": "E_BLOCK_NUMBER_OF_TYPES$0",
		"description": "(Globals) () The blocktype for number of types"
	},

	"E_META_CONCRETE_WHITE_0": {
		"prefix": "E_META_CONCRETE_WHITE",
		"body": "E_META_CONCRETE_WHITE$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is white."
	},

	"E_BLOCK_TRAPPED_CHEST_0": {
		"prefix": "E_BLOCK_TRAPPED_CHEST",
		"body": "E_BLOCK_TRAPPED_CHEST$0",
		"description": "(Globals) () The blocktype for trapped chest"
	},

	"caNumber6_0": {
		"prefix": "caNumber6",
		"body": "caNumber6$0",
		"description": "(Globals) () Number key 6"
	},

	"caDropKey_0": {
		"prefix": "caDropKey",
		"body": "caDropKey$0",
		"description": "(Globals) () Drop a single item"
	},

	"E_BLOCK_COMMAND_BLOCK_0": {
		"prefix": "E_BLOCK_COMMAND_BLOCK",
		"body": "E_BLOCK_COMMAND_BLOCK$0",
		"description": "(Globals) () The blocktype for command block"
	},

	"caMiddleClick_0": {
		"prefix": "caMiddleClick",
		"body": "caMiddleClick$0",
		"description": "(Globals) () Middle click, only valid for creative players"
	},

	"E_BLOCK_CHORUS_FLOWER_0": {
		"prefix": "E_BLOCK_CHORUS_FLOWER",
		"body": "E_BLOCK_CHORUS_FLOWER$0",
		"description": "(Globals) () The blocktype for chorus flower"
	},

	"E_BLOCK_LAPIS_ORE_0": {
		"prefix": "E_BLOCK_LAPIS_ORE",
		"body": "E_BLOCK_LAPIS_ORE$0",
		"description": "(Globals) () The blocktype for lapis ore"
	},

	"E_BLOCK_SANDSTONE_STAIRS_0": {
		"prefix": "E_BLOCK_SANDSTONE_STAIRS",
		"body": "E_BLOCK_SANDSTONE_STAIRS$0",
		"description": "(Globals) () The blocktype for sandstone stairs"
	},

	"E_ITEM_MAGMA_CREAM_0": {
		"prefix": "E_ITEM_MAGMA_CREAM",
		"body": "E_ITEM_MAGMA_CREAM$0",
		"description": "(Globals) () The itemtype for magma cream"
	},

	"E_ITEM_REDSTONE_REPEATER_0": {
		"prefix": "E_ITEM_REDSTONE_REPEATER",
		"body": "E_ITEM_REDSTONE_REPEATER$0",
		"description": "(Globals) () The itemtype for redstone repeater"
	},

	"E_ITEM_LINGERING_POTION_0": {
		"prefix": "E_ITEM_LINGERING_POTION",
		"body": "E_ITEM_LINGERING_POTION$0",
		"description": "(Globals) () The itemtype for lingering potion"
	},

	"E_BLOCK_STAINED_CLAY_0": {
		"prefix": "E_BLOCK_STAINED_CLAY",
		"body": "E_BLOCK_STAINED_CLAY$0",
		"description": "(Globals) () The blocktype for stained clay"
	},

	"E_BLOCK_NETHER_PORTAL_0": {
		"prefix": "E_BLOCK_NETHER_PORTAL",
		"body": "E_BLOCK_NETHER_PORTAL$0",
		"description": "(Globals) () The blocktype for nether portal"
	},

	"E_META_CONCRETE_POWDER_GREEN_0": {
		"prefix": "E_META_CONCRETE_POWDER_GREEN",
		"body": "E_META_CONCRETE_POWDER_GREEN$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is green."
	},

	"E_ITEM_WOODEN_SHOVEL_0": {
		"prefix": "E_ITEM_WOODEN_SHOVEL",
		"body": "E_ITEM_WOODEN_SHOVEL$0",
		"description": "(Globals) () The itemtype for wooden shovel"
	},

	"E_ITEM_SUGAR_0": {
		"prefix": "E_ITEM_SUGAR",
		"body": "E_ITEM_SUGAR$0",
		"description": "(Globals) () The itemtype for sugar"
	},

	"E_ITEM_GLISTERING_MELON_0": {
		"prefix": "E_ITEM_GLISTERING_MELON",
		"body": "E_ITEM_GLISTERING_MELON$0",
		"description": "(Globals) () The itemtype for glistering melon"
	},

	"E_ITEM_RAW_MUTTON_0": {
		"prefix": "E_ITEM_RAW_MUTTON",
		"body": "E_ITEM_RAW_MUTTON$0",
		"description": "(Globals) () The itemtype for raw mutton"
	},

	"E_META_HEAD_PLAYER_0": {
		"prefix": "E_META_HEAD_PLAYER",
		"body": "E_META_HEAD_PLAYER$0",
		"description": "(Globals) () A flag in the metadata of heads that indicates that the head is a player head."
	},

	"E_BLOCK_CONCRETE_0": {
		"prefix": "E_BLOCK_CONCRETE",
		"body": "E_BLOCK_CONCRETE$0",
		"description": "(Globals) () The blocktype for concrete"
	},

	"E_BLOCK_END_PORTAL_FRAME_0": {
		"prefix": "E_BLOCK_END_PORTAL_FRAME",
		"body": "E_BLOCK_END_PORTAL_FRAME$0",
		"description": "(Globals) () The blocktype for end portal frame"
	},

	"E_BLOCK_FURNACE_0": {
		"prefix": "E_BLOCK_FURNACE",
		"body": "E_BLOCK_FURNACE$0",
		"description": "(Globals) () The blocktype for furnace"
	},

	"E_BLOCK_BED_0": {
		"prefix": "E_BLOCK_BED",
		"body": "E_BLOCK_BED$0",
		"description": "(Globals) () The blocktype for bed"
	},

	"E_BLOCK_ENDER_CHEST_0": {
		"prefix": "E_BLOCK_ENDER_CHEST",
		"body": "E_BLOCK_ENDER_CHEST$0",
		"description": "(Globals) () The blocktype for ender chest"
	},

	"E_ITEM_CLOCK_0": {
		"prefix": "E_ITEM_CLOCK",
		"body": "E_ITEM_CLOCK$0",
		"description": "(Globals) () The itemtype for clock"
	},

	"E_ITEM_DIAMOND_HOE_0": {
		"prefix": "E_ITEM_DIAMOND_HOE",
		"body": "E_ITEM_DIAMOND_HOE$0",
		"description": "(Globals) () The itemtype for diamond hoe"
	},

	"E_BLOCK_STONE_0": {
		"prefix": "E_BLOCK_STONE",
		"body": "E_BLOCK_STONE$0",
		"description": "(Globals) () The blocktype for stone"
	},

	"E_BLOCK_GOLD_ORE_0": {
		"prefix": "E_BLOCK_GOLD_ORE",
		"body": "E_BLOCK_GOLD_ORE$0",
		"description": "(Globals) () The blocktype for gold ore"
	},

	"E_META_CONCRETE_LIGHTGRAY_0": {
		"prefix": "E_META_CONCRETE_LIGHTGRAY",
		"body": "E_META_CONCRETE_LIGHTGRAY$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is light gray."
	},

	"caLeftPaintBegin_0": {
		"prefix": "caLeftPaintBegin",
		"body": "caLeftPaintBegin$0",
		"description": "(Globals) () Begining of left click paint drag action"
	},

	"E_BLOCK_PINK_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_PINK_SHULKER_BOX",
		"body": "E_BLOCK_PINK_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for pink shulker box"
	},

	"E_BLOCK_CARROTS_0": {
		"prefix": "E_BLOCK_CARROTS",
		"body": "E_BLOCK_CARROTS$0",
		"description": "(Globals) () The blocktype for carrots"
	},

	"E_BLOCK_DEAD_BUSH_0": {
		"prefix": "E_BLOCK_DEAD_BUSH",
		"body": "E_BLOCK_DEAD_BUSH$0",
		"description": "(Globals) () The blocktype for dead bush"
	},

	"E_BLOCK_CAKE_0": {
		"prefix": "E_BLOCK_CAKE",
		"body": "E_BLOCK_CAKE$0",
		"description": "(Globals) () The blocktype for cake"
	},

	"BLOCK_FACE_EAST_0": {
		"prefix": "BLOCK_FACE_EAST",
		"body": "BLOCK_FACE_EAST$0",
		"description": "(Globals) () Please use BLOCK_FACE_XM instead. Interacting with the eastern face of the block."
	},

	"BLOCK_FACE_XM_0": {
		"prefix": "BLOCK_FACE_XM",
		"body": "BLOCK_FACE_XM$0",
		"description": "(Globals) () Interacting with the X- face of the block"
	},

	"E_BLOCK_REDSTONE_ORE_GLOWING_0": {
		"prefix": "E_BLOCK_REDSTONE_ORE_GLOWING",
		"body": "E_BLOCK_REDSTONE_ORE_GLOWING$0",
		"description": "(Globals) () The blocktype for redstone ore glowing"
	},

	"E_BLOCK_BED_BED_HEAD_0": {
		"prefix": "E_BLOCK_BED_BED_HEAD",
		"body": "E_BLOCK_BED_BED_HEAD$0",
		"description": "(Globals) () The blocktype for bed bed head"
	},

	"E_BLOCK_PURPLE_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_PURPLE_SHULKER_BOX",
		"body": "E_BLOCK_PURPLE_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for purple shulker box"
	},

	"BLOCK_FACE_TOP_0": {
		"prefix": "BLOCK_FACE_TOP",
		"body": "BLOCK_FACE_TOP$0",
		"description": "(Globals) () Please use BLOCK_FACE_YP instead. Interacting with the top face of the block."
	},

	"E_BLOCK_HUGE_RED_MUSHROOM_0": {
		"prefix": "E_BLOCK_HUGE_RED_MUSHROOM",
		"body": "E_BLOCK_HUGE_RED_MUSHROOM$0",
		"description": "(Globals) () The blocktype for huge red mushroom"
	},

	"E_ITEM_PRISMARINE_SHARD_0": {
		"prefix": "E_ITEM_PRISMARINE_SHARD",
		"body": "E_ITEM_PRISMARINE_SHARD$0",
		"description": "(Globals) () The itemtype for prismarine shard"
	},

	"E_BLOCK_QUARTZ_STAIRS_0": {
		"prefix": "E_BLOCK_QUARTZ_STAIRS",
		"body": "E_BLOCK_QUARTZ_STAIRS$0",
		"description": "(Globals) () The blocktype for quartz stairs"
	},

	"E_ITEM_NETHER_BRICK_0": {
		"prefix": "E_ITEM_NETHER_BRICK",
		"body": "E_ITEM_NETHER_BRICK$0",
		"description": "(Globals) () The itemtype for nether brick"
	},

	"E_META_END_PORTAL_FRAME_EYE_0": {
		"prefix": "E_META_END_PORTAL_FRAME_EYE",
		"body": "E_META_END_PORTAL_FRAME_EYE$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame has an eye in it."
	},

	"E_BLOCK_PURPUR_BLOCK_0": {
		"prefix": "E_BLOCK_PURPUR_BLOCK",
		"body": "E_BLOCK_PURPUR_BLOCK$0",
		"description": "(Globals) () The blocktype for purpur block"
	},

	"E_BLOCK_BUTTON_ZP_0": {
		"prefix": "E_BLOCK_BUTTON_ZP",
		"body": "E_BLOCK_BUTTON_ZP$0",
		"description": "(Globals) () The blocktype for button zp"
	},

	"E_ITEM_WRITTEN_BOOK_0": {
		"prefix": "E_ITEM_WRITTEN_BOOK",
		"body": "E_ITEM_WRITTEN_BOOK$0",
		"description": "(Globals) () The itemtype for written book"
	},

	"E_ITEM_POTION_0": {
		"prefix": "E_ITEM_POTION",
		"body": "E_ITEM_POTION$0",
		"description": "(Globals) () The itemtype for potion"
	},

	"E_BLOCK_ANVIL_X_0": {
		"prefix": "E_BLOCK_ANVIL_X",
		"body": "E_BLOCK_ANVIL_X$0",
		"description": "(Globals) () The blocktype for anvil x"
	},

	"E_ITEM_13_DISC_0": {
		"prefix": "E_ITEM_13_DISC",
		"body": "E_ITEM_13_DISC$0",
		"description": "(Globals) () The itemtype for 13 disc"
	},

	"E_BLOCK_BRICK_STAIRS_0": {
		"prefix": "E_BLOCK_BRICK_STAIRS",
		"body": "E_BLOCK_BRICK_STAIRS$0",
		"description": "(Globals) () The blocktype for brick stairs"
	},

	"E_BLOCK_STONE_PRESSURE_PLATE_0": {
		"prefix": "E_BLOCK_STONE_PRESSURE_PLATE",
		"body": "E_BLOCK_STONE_PRESSURE_PLATE$0",
		"description": "(Globals) () The blocktype for stone pressure plate"
	},

	"E_BLOCK_BONE_BLOCK_0": {
		"prefix": "E_BLOCK_BONE_BLOCK",
		"body": "E_BLOCK_BONE_BLOCK$0",
		"description": "(Globals) () The blocktype for bone block"
	},

	"E_BLOCK_TRIPWIRE_0": {
		"prefix": "E_BLOCK_TRIPWIRE",
		"body": "E_BLOCK_TRIPWIRE$0",
		"description": "(Globals) () The blocktype for tripwire"
	},

	"E_BLOCK_STAIRS_XM_0": {
		"prefix": "E_BLOCK_STAIRS_XM",
		"body": "E_BLOCK_STAIRS_XM$0",
		"description": "(Globals) () The blocktype for stairs xm"
	},

	"E_BLOCK_BUTTON_XP_0": {
		"prefix": "E_BLOCK_BUTTON_XP",
		"body": "E_BLOCK_BUTTON_XP$0",
		"description": "(Globals) () The blocktype for button xp"
	},

	"E_BLOCK_STAINED_GLASS_PANE_0": {
		"prefix": "E_BLOCK_STAINED_GLASS_PANE",
		"body": "E_BLOCK_STAINED_GLASS_PANE$0",
		"description": "(Globals) () The blocktype for stained glass pane"
	},

	"E_BLOCK_WOOL_0": {
		"prefix": "E_BLOCK_WOOL",
		"body": "E_BLOCK_WOOL$0",
		"description": "(Globals) () The blocktype for wool"
	},

	"E_ITEM_GOLD_CHESTPLATE_0": {
		"prefix": "E_ITEM_GOLD_CHESTPLATE",
		"body": "E_ITEM_GOLD_CHESTPLATE$0",
		"description": "(Globals) () The itemtype for gold chestplate"
	},

	"E_META_END_PORTAL_FRAME_ZM_0": {
		"prefix": "E_META_END_PORTAL_FRAME_ZM",
		"body": "E_META_END_PORTAL_FRAME_ZM$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame is facing the negative Z direction."
	},

	"E_BLOCK_GREEN_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_GREEN_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_GREEN_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for green glazed terracotta"
	},

	"E_META_DROPSPENSER_FACING_YM_0": {
		"prefix": "E_META_DROPSPENSER_FACING_YM",
		"body": "E_META_DROPSPENSER_FACING_YM$0",
		"description": "(Globals) () A flag in the metadata of droppers and dispensers that indicates that the dropper or dispenser is looking in the negative Y direction."
	},

	"E_BLOCK_FLOWER_0": {
		"prefix": "E_BLOCK_FLOWER",
		"body": "E_BLOCK_FLOWER$0",
		"description": "(Globals) () The blocktype for flower"
	},

	"E_BLOCK_ORANGE_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_ORANGE_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_ORANGE_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for orange glazed terracota"
	},

	"E_META_HEAD_CREEPER_0": {
		"prefix": "E_META_HEAD_CREEPER",
		"body": "E_META_HEAD_CREEPER$0",
		"description": "(Globals) () A flag in the metadata of heads that indicates that the head is a creeper head."
	},

	"E_ITEM_GOLD_HELMET_0": {
		"prefix": "E_ITEM_GOLD_HELMET",
		"body": "E_ITEM_GOLD_HELMET$0",
		"description": "(Globals) () The itemtype for gold helmet"
	},

	"E_ITEM_LEATHER_BOOTS_0": {
		"prefix": "E_ITEM_LEATHER_BOOTS",
		"body": "E_ITEM_LEATHER_BOOTS$0",
		"description": "(Globals) () The itemtype for leather boots"
	},

	"E_ITEM_RAW_CHICKEN_0": {
		"prefix": "E_ITEM_RAW_CHICKEN",
		"body": "E_ITEM_RAW_CHICKEN$0",
		"description": "(Globals) () The itemtype for raw chicken"
	},

	"E_BLOCK_FIRE_0": {
		"prefix": "E_BLOCK_FIRE",
		"body": "E_BLOCK_FIRE$0",
		"description": "(Globals) () The blocktype for fire"
	},

	"BLOCK_FACE_XP_0": {
		"prefix": "BLOCK_FACE_XP",
		"body": "BLOCK_FACE_XP$0",
		"description": "(Globals) () Interacting with the X+ face of the block"
	},

	"E_ITEM_MAX_CONSECUTIVE_TYPE_ID_0": {
		"prefix": "E_ITEM_MAX_CONSECUTIVE_TYPE_ID",
		"body": "E_ITEM_MAX_CONSECUTIVE_TYPE_ID$0",
		"description": "(Globals) () The itemtype for max consecutive type id"
	},

	"E_BLOCK_MELON_STEM_0": {
		"prefix": "E_BLOCK_MELON_STEM",
		"body": "E_BLOCK_MELON_STEM$0",
		"description": "(Globals) () The blocktype for melon stem"
	},

	"E_BLOCK_CARPET_0": {
		"prefix": "E_BLOCK_CARPET",
		"body": "E_BLOCK_CARPET$0",
		"description": "(Globals) () The blocktype for carpet"
	},

	"E_ITEM_STEAK_0": {
		"prefix": "E_ITEM_STEAK",
		"body": "E_ITEM_STEAK$0",
		"description": "(Globals) () The itemtype for steak"
	},

	"E_BLOCK_ANVIL_NO_DAMAGE_0": {
		"prefix": "E_BLOCK_ANVIL_NO_DAMAGE",
		"body": "E_BLOCK_ANVIL_NO_DAMAGE$0",
		"description": "(Globals) () The blocktype for anvil no damage"
	},

	"E_BLOCK_PACKED_ICE_0": {
		"prefix": "E_BLOCK_PACKED_ICE",
		"body": "E_BLOCK_PACKED_ICE$0",
		"description": "(Globals) () The blocktype for packed ice"
	},

	"E_BLOCK_STAIRS_ZM_0": {
		"prefix": "E_BLOCK_STAIRS_ZM",
		"body": "E_BLOCK_STAIRS_ZM$0",
		"description": "(Globals) () The blocktype for stairs zm"
	},

	"E_ITEM_BEETROOT_0": {
		"prefix": "E_ITEM_BEETROOT",
		"body": "E_ITEM_BEETROOT$0",
		"description": "(Globals) () The itemtype for beetroot"
	},

	"E_BLOCK_POWERED_RAIL_0": {
		"prefix": "E_BLOCK_POWERED_RAIL",
		"body": "E_BLOCK_POWERED_RAIL$0",
		"description": "(Globals) () The blocktype for powered rail"
	},

	"E_BLOCK_DROPPER_0": {
		"prefix": "E_BLOCK_DROPPER",
		"body": "E_BLOCK_DROPPER$0",
		"description": "(Globals) () The blocktype for dropper"
	},

	"E_BLOCK_GRASS_PATH_0": {
		"prefix": "E_BLOCK_GRASS_PATH",
		"body": "E_BLOCK_GRASS_PATH$0",
		"description": "(Globals) () The blocktype for grass path"
	},

	"DIG_STATUS_SHOOT_EAT_0": {
		"prefix": "DIG_STATUS_SHOOT_EAT",
		"body": "DIG_STATUS_SHOOT_EAT$0",
		"description": "(Globals) () The player has finished shooting a bow or finished eating"
	},

	"caShiftRightClick_0": {
		"prefix": "caShiftRightClick",
		"body": "caShiftRightClick$0",
		"description": "(Globals) () Shift + right click on a slot"
	},

	"caRightClickOutsideHoldNothing_0": {
		"prefix": "caRightClickOutsideHoldNothing",
		"body": "caRightClickOutsideHoldNothing$0",
		"description": "(Globals) () Right click outside inventory holding nothing"
	},

	"E_ITEM_IRON_AXE_0": {
		"prefix": "E_ITEM_IRON_AXE",
		"body": "E_ITEM_IRON_AXE$0",
		"description": "(Globals) () The itemtype for iron axe"
	},

	"E_META_DROPSPENSER_FACING_ZP_0": {
		"prefix": "E_META_DROPSPENSER_FACING_ZP",
		"body": "E_META_DROPSPENSER_FACING_ZP$0",
		"description": "(Globals) () A flag in the metadata of droppers and dispensers that indicates that the dropper or dispenser is looking in the positive Z direction."
	},

	"E_META_CONCRETE_POWDER_BLACK_0": {
		"prefix": "E_META_CONCRETE_POWDER_BLACK",
		"body": "E_META_CONCRETE_POWDER_BLACK$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is black."
	},

	"mhRight_0": {
		"prefix": "mhRight",
		"body": "mhRight$0",
		"description": "(Globals) () The right hand is the main hand"
	},

	"E_ITEM_SUGAR_CANE_0": {
		"prefix": "E_ITEM_SUGAR_CANE",
		"body": "E_ITEM_SUGAR_CANE$0",
		"description": "(Globals) () The itemtype for sugar cane"
	},

	"E_BLOCK_LIT_FURNACE_0": {
		"prefix": "E_BLOCK_LIT_FURNACE",
		"body": "E_BLOCK_LIT_FURNACE$0",
		"description": "(Globals) () The blocktype for lit furnace"
	},

	"E_BLOCK_MAGMA_0": {
		"prefix": "E_BLOCK_MAGMA",
		"body": "E_BLOCK_MAGMA$0",
		"description": "(Globals) () The blocktype for magma"
	},

	"E_BLOCK_REDSTONE_WIRE_0": {
		"prefix": "E_BLOCK_REDSTONE_WIRE",
		"body": "E_BLOCK_REDSTONE_WIRE$0",
		"description": "(Globals) () The blocktype for redstone wire"
	},

	"E_ITEM_NUMBER_OF_CONSECUTIVE_TYPES_0": {
		"prefix": "E_ITEM_NUMBER_OF_CONSECUTIVE_TYPES",
		"body": "E_ITEM_NUMBER_OF_CONSECUTIVE_TYPES$0",
		"description": "(Globals) () The itemtype for number of consecutive types"
	},

	"E_BLOCK_END_GATEWAY_0": {
		"prefix": "E_BLOCK_END_GATEWAY",
		"body": "E_BLOCK_END_GATEWAY$0",
		"description": "(Globals) () The blocktype for end gateway"
	},

	"E_BLOCK_WOODEN_STAIRS_0": {
		"prefix": "E_BLOCK_WOODEN_STAIRS",
		"body": "E_BLOCK_WOODEN_STAIRS$0",
		"description": "(Globals) () The blocktype for wooden stairs"
	},

	"E_BLOCK_DAYLIGHT_SENSOR_0": {
		"prefix": "E_BLOCK_DAYLIGHT_SENSOR",
		"body": "E_BLOCK_DAYLIGHT_SENSOR$0",
		"description": "(Globals) () The blocktype for daylight sensor"
	},

	"E_BLOCK_LOG_0": {
		"prefix": "E_BLOCK_LOG",
		"body": "E_BLOCK_LOG$0",
		"description": "(Globals) () The blocktype for log"
	},

	"E_BLOCK_SPRUCE_FENCE_0": {
		"prefix": "E_BLOCK_SPRUCE_FENCE",
		"body": "E_BLOCK_SPRUCE_FENCE$0",
		"description": "(Globals) () The blocktype for spruce fence"
	},

	"hOff_0": {
		"prefix": "hOff",
		"body": "hOff$0",
		"description": "(Globals) () The off hand"
	},

	"E_ITEM_MINECART_WITH_TNT_0": {
		"prefix": "E_ITEM_MINECART_WITH_TNT",
		"body": "E_ITEM_MINECART_WITH_TNT$0",
		"description": "(Globals) () The itemtype for minecart with tnt"
	},

	"E_BLOCK_BROWN_MUSHROOM_0": {
		"prefix": "E_BLOCK_BROWN_MUSHROOM",
		"body": "E_BLOCK_BROWN_MUSHROOM$0",
		"description": "(Globals) () The blocktype for brown mushroom"
	},

	"E_BLOCK_LIGHT_GRAY_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_LIGHT_GRAY_SHULKER_BOX",
		"body": "E_BLOCK_LIGHT_GRAY_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for light gray shulker box"
	},

	"E_BLOCK_STONE_BRICKS_0": {
		"prefix": "E_BLOCK_STONE_BRICKS",
		"body": "E_BLOCK_STONE_BRICKS$0",
		"description": "(Globals) () The blocktype for stone bricks"
	},

	"E_BLOCK_DOUBLE_STONE_SLAB_0": {
		"prefix": "E_BLOCK_DOUBLE_STONE_SLAB",
		"body": "E_BLOCK_DOUBLE_STONE_SLAB$0",
		"description": "(Globals) () The blocktype for double stone slab"
	},

	"E_ITEM_SNOWBALL_0": {
		"prefix": "E_ITEM_SNOWBALL",
		"body": "E_ITEM_SNOWBALL$0",
		"description": "(Globals) () The itemtype for snowball"
	},

	"E_BLOCK_ANVIL_LOW_DAMAGE_0": {
		"prefix": "E_BLOCK_ANVIL_LOW_DAMAGE",
		"body": "E_BLOCK_ANVIL_LOW_DAMAGE$0",
		"description": "(Globals) () The blocktype for anvil low damage"
	},

	"E_ITEM_GLASS_BOTTLE_0": {
		"prefix": "E_ITEM_GLASS_BOTTLE",
		"body": "E_ITEM_GLASS_BOTTLE$0",
		"description": "(Globals) () The itemtype for glass bottle"
	},

	"E_BLOCK_MINECART_TRACKS_0": {
		"prefix": "E_BLOCK_MINECART_TRACKS",
		"body": "E_BLOCK_MINECART_TRACKS$0",
		"description": "(Globals) () The blocktype for minecart tracks"
	},

	"caNumber1_0": {
		"prefix": "caNumber1",
		"body": "caNumber1$0",
		"description": "(Globals) () Number key 1"
	},

	"E_ITEM_CHIRP_DISC_0": {
		"prefix": "E_ITEM_CHIRP_DISC",
		"body": "E_ITEM_CHIRP_DISC$0",
		"description": "(Globals) () The itemtype for chirp disc"
	},

	"E_BLOCK_BUTTON_ZM_0": {
		"prefix": "E_BLOCK_BUTTON_ZM",
		"body": "E_BLOCK_BUTTON_ZM$0",
		"description": "(Globals) () The blocktype for button zm"
	},

	"mtJoin_0": {
		"prefix": "mtJoin",
		"body": "mtJoin$0",
		"description": "(Globals) () A player has joined the server"
	},

	"E_BLOCK_DRAGON_EGG_0": {
		"prefix": "E_BLOCK_DRAGON_EGG",
		"body": "E_BLOCK_DRAGON_EGG$0",
		"description": "(Globals) () The blocktype for dragon egg"
	},

	"E_BLOCK_BLUE_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_BLUE_SHULKER_BOX",
		"body": "E_BLOCK_BLUE_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for blue shulker box"
	},

	"E_ITEM_STONE_SWORD_0": {
		"prefix": "E_ITEM_STONE_SWORD",
		"body": "E_ITEM_STONE_SWORD$0",
		"description": "(Globals) () The itemtype for stone sword"
	},

	"E_BLOCK_NETHER_QUARTZ_ORE_0": {
		"prefix": "E_BLOCK_NETHER_QUARTZ_ORE",
		"body": "E_BLOCK_NETHER_QUARTZ_ORE$0",
		"description": "(Globals) () The blocktype for nether quartz ore"
	},

	"E_BLOCK_BLACK_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_BLACK_SHULKER_BOX",
		"body": "E_BLOCK_BLACK_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for black shulker box"
	},

	"E_ITEM_GOLD_HOE_0": {
		"prefix": "E_ITEM_GOLD_HOE",
		"body": "E_ITEM_GOLD_HOE$0",
		"description": "(Globals) () The itemtype for gold hoe"
	},

	"E_ITEM_FIREWORK_ROCKET_0": {
		"prefix": "E_ITEM_FIREWORK_ROCKET",
		"body": "E_ITEM_FIREWORK_ROCKET$0",
		"description": "(Globals) () The itemtype for firework rocket"
	},

	"E_ITEM_COOKED_RABBIT_0": {
		"prefix": "E_ITEM_COOKED_RABBIT",
		"body": "E_ITEM_COOKED_RABBIT$0",
		"description": "(Globals) () The itemtype for cooked rabbit"
	},

	"E_BLOCK_GRAY_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_GRAY_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_GRAY_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for gray glazed terracotta"
	},

	"E_BLOCK_DISPENSER_0": {
		"prefix": "E_BLOCK_DISPENSER",
		"body": "E_BLOCK_DISPENSER$0",
		"description": "(Globals) () The blocktype for dispenser"
	},

	"E_BLOCK_WOODEN_BUTTON_0": {
		"prefix": "E_BLOCK_WOODEN_BUTTON",
		"body": "E_BLOCK_WOODEN_BUTTON$0",
		"description": "(Globals) () The blocktype for wooden button"
	},

	"caRightClick_0": {
		"prefix": "caRightClick",
		"body": "caRightClick$0",
		"description": "(Globals) () Right click on a slot"
	},

	"E_BLOCK_CROPS_0": {
		"prefix": "E_BLOCK_CROPS",
		"body": "E_BLOCK_CROPS$0",
		"description": "(Globals) () The blocktype for crops"
	},

	"E_BLOCK_PISTON_0": {
		"prefix": "E_BLOCK_PISTON",
		"body": "E_BLOCK_PISTON$0",
		"description": "(Globals) () The blocktype for piston"
	},

	"E_BLOCK_NETHER_WART_0": {
		"prefix": "E_BLOCK_NETHER_WART",
		"body": "E_BLOCK_NETHER_WART$0",
		"description": "(Globals) () The blocktype for nether wart"
	},

	"E_ITEM_WHEAT_0": {
		"prefix": "E_ITEM_WHEAT",
		"body": "E_ITEM_WHEAT$0",
		"description": "(Globals) () The itemtype for wheat"
	},

	"esEnderCrystal_0": {
		"prefix": "esEnderCrystal",
		"body": "esEnderCrystal$0",
		"description": "(Globals) () An ender crystal entity explosion. The SourceData param is the {{cEntity|ender crystal entity}} object."
	},

	"E_BLOCK_DARK_OAK_FENCE_GATE_0": {
		"prefix": "E_BLOCK_DARK_OAK_FENCE_GATE",
		"body": "E_BLOCK_DARK_OAK_FENCE_GATE$0",
		"description": "(Globals) () The blocktype for dark oak fence gate"
	},

	"mtLeave_0": {
		"prefix": "mtLeave",
		"body": "mtLeave$0",
		"description": "(Globals) () A player has left the server"
	},

	"E_ITEM_ACACIA_BOAT_0": {
		"prefix": "E_ITEM_ACACIA_BOAT",
		"body": "E_ITEM_ACACIA_BOAT$0",
		"description": "(Globals) () The itemtype for acacia boat"
	},

	"spJacket_0": {
		"prefix": "spJacket",
		"body": "spJacket$0",
		"description": "(Globals) () The jacket skin part"
	},

	"E_BLOCK_CONCRETE_POWDER_0": {
		"prefix": "E_BLOCK_CONCRETE_POWDER",
		"body": "E_BLOCK_CONCRETE_POWDER$0",
		"description": "(Globals) () The blocktype for concrete powder"
	},

	"E_BLOCK_STRUCTURE_BLOCK_0": {
		"prefix": "E_BLOCK_STRUCTURE_BLOCK",
		"body": "E_BLOCK_STRUCTURE_BLOCK$0",
		"description": "(Globals) () The blocktype for structure block"
	},

	"E_ITEM_END_CRYSTAL_0": {
		"prefix": "E_ITEM_END_CRYSTAL",
		"body": "E_ITEM_END_CRYSTAL$0",
		"description": "(Globals) () The itemtype for end crystal"
	},

	"E_BLOCK_BLACK_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_BLACK_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_BLACK_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for black terracotta"
	},

	"E_ITEM_SHEARS_0": {
		"prefix": "E_ITEM_SHEARS",
		"body": "E_ITEM_SHEARS$0",
		"description": "(Globals) () The itemtype for shears"
	},

	"E_ITEM_STONE_SHOVEL_0": {
		"prefix": "E_ITEM_STONE_SHOVEL",
		"body": "E_ITEM_STONE_SHOVEL$0",
		"description": "(Globals) () The itemtype for stone shovel"
	},

	"E_BLOCK_GRAY_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_GRAY_SHULKER_BOX",
		"body": "E_BLOCK_GRAY_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for gray shulker box"
	},

	"E_ITEM_RAW_PORKCHOP_0": {
		"prefix": "E_ITEM_RAW_PORKCHOP",
		"body": "E_ITEM_RAW_PORKCHOP$0",
		"description": "(Globals) () The itemtype for raw porkchop"
	},

	"E_BLOCK_SLIME_BLOCK_0": {
		"prefix": "E_BLOCK_SLIME_BLOCK",
		"body": "E_BLOCK_SLIME_BLOCK$0",
		"description": "(Globals) () The blocktype for slime block"
	},

	"E_BLOCK_PINK_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_PINK_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_PINK_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for pink glazed terracotta"
	},

	"E_BLOCK_BEETROOTS_0": {
		"prefix": "E_BLOCK_BEETROOTS",
		"body": "E_BLOCK_BEETROOTS$0",
		"description": "(Globals) () The blocktype for beetroots"
	},

	"E_ITEM_ARMOR_STAND_0": {
		"prefix": "E_ITEM_ARMOR_STAND",
		"body": "E_ITEM_ARMOR_STAND$0",
		"description": "(Globals) () The itemtype for armor stand"
	},

	"E_ITEM_EYE_OF_ENDER_0": {
		"prefix": "E_ITEM_EYE_OF_ENDER",
		"body": "E_ITEM_EYE_OF_ENDER$0",
		"description": "(Globals) () The itemtype for eye of ender"
	},

	"E_ITEM_IRON_PICKAXE_0": {
		"prefix": "E_ITEM_IRON_PICKAXE",
		"body": "E_ITEM_IRON_PICKAXE$0",
		"description": "(Globals) () The itemtype for iron pickaxe"
	},

	"caLeftPaintProgress_0": {
		"prefix": "caLeftPaintProgress",
		"body": "caLeftPaintProgress$0",
		"description": "(Globals) () Add slot for left click paint drag action"
	},

	"E_BLOCK_STATIONARY_WATER_0": {
		"prefix": "E_BLOCK_STATIONARY_WATER",
		"body": "E_BLOCK_STATIONARY_WATER$0",
		"description": "(Globals) () The blocktype for stationary water"
	},

	"E_ITEM_SIGN_0": {
		"prefix": "E_ITEM_SIGN",
		"body": "E_ITEM_SIGN$0",
		"description": "(Globals) () The itemtype for sign"
	},

	"E_BLOCK_JUNGLE_FENCE_0": {
		"prefix": "E_BLOCK_JUNGLE_FENCE",
		"body": "E_BLOCK_JUNGLE_FENCE$0",
		"description": "(Globals) () The blocktype for jungle fence"
	},

	"E_BLOCK_SPRUCE_DOOR_0": {
		"prefix": "E_BLOCK_SPRUCE_DOOR",
		"body": "E_BLOCK_SPRUCE_DOOR$0",
		"description": "(Globals) () The blocktype for spruce door"
	},

	"caNumber5_0": {
		"prefix": "caNumber5",
		"body": "caNumber5$0",
		"description": "(Globals) () Number key 5"
	},

	"E_ITEM_GOLD_HORSE_ARMOR_0": {
		"prefix": "E_ITEM_GOLD_HORSE_ARMOR",
		"body": "E_ITEM_GOLD_HORSE_ARMOR$0",
		"description": "(Globals) () The itemtype for gold horse armor"
	},

	"E_BLOCK_INVERTED_DAYLIGHT_SENSOR_0": {
		"prefix": "E_BLOCK_INVERTED_DAYLIGHT_SENSOR",
		"body": "E_BLOCK_INVERTED_DAYLIGHT_SENSOR$0",
		"description": "(Globals) () The blocktype for inverted daylight sensor"
	},

	"E_BLOCK_BED_ZP_0": {
		"prefix": "E_BLOCK_BED_ZP",
		"body": "E_BLOCK_BED_ZP$0",
		"description": "(Globals) () The blocktype for bed zp"
	},

	"E_BLOCK_TORCH_0": {
		"prefix": "E_BLOCK_TORCH",
		"body": "E_BLOCK_TORCH$0",
		"description": "(Globals) () The blocktype for torch"
	},

	"E_ITEM_DRAGON_BREATH_0": {
		"prefix": "E_ITEM_DRAGON_BREATH",
		"body": "E_ITEM_DRAGON_BREATH$0",
		"description": "(Globals) () The itemtype for dragon breath"
	},

	"E_ITEM_PUMPKIN_SEEDS_0": {
		"prefix": "E_ITEM_PUMPKIN_SEEDS",
		"body": "E_ITEM_PUMPKIN_SEEDS$0",
		"description": "(Globals) () The itemtype for pumpkin seeds"
	},

	"E_BLOCK_CYAN_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_CYAN_SHULKER_BOX",
		"body": "E_BLOCK_CYAN_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for cyan shulker box"
	},

	"E_BLOCK_FENCE_GATE_0": {
		"prefix": "E_BLOCK_FENCE_GATE",
		"body": "E_BLOCK_FENCE_GATE$0",
		"description": "(Globals) () The blocktype for fence gate"
	},

	"E_BLOCK_BEDROCK_0": {
		"prefix": "E_BLOCK_BEDROCK",
		"body": "E_BLOCK_BEDROCK$0",
		"description": "(Globals) () The blocktype for bedrock"
	},

	"DIG_STATUS_FINISHED_0": {
		"prefix": "DIG_STATUS_FINISHED",
		"body": "DIG_STATUS_FINISHED$0",
		"description": "(Globals) () The player thinks that it has finished mining a block"
	},

	"E_BLOCK_GLASS_PANE_0": {
		"prefix": "E_BLOCK_GLASS_PANE",
		"body": "E_BLOCK_GLASS_PANE$0",
		"description": "(Globals) () The blocktype for glass pane"
	},

	"E_BLOCK_HEAVY_WEIGHTED_PRESSURE_PLATE_0": {
		"prefix": "E_BLOCK_HEAVY_WEIGHTED_PRESSURE_PLATE",
		"body": "E_BLOCK_HEAVY_WEIGHTED_PRESSURE_PLATE$0",
		"description": "(Globals) () The blocktype for heavy weighted pressure plate"
	},

	"E_BLOCK_MOB_SPAWNER_0": {
		"prefix": "E_BLOCK_MOB_SPAWNER",
		"body": "E_BLOCK_MOB_SPAWNER$0",
		"description": "(Globals) () The blocktype for mob spawner"
	},

	"SKULL_TYPE_CREEPER_0": {
		"prefix": "SKULL_TYPE_CREEPER",
		"body": "SKULL_TYPE_CREEPER$0",
		"description": "(Globals) () A creeper skull"
	},

	"E_BLOCK_TRAPDOOR_0": {
		"prefix": "E_BLOCK_TRAPDOOR",
		"body": "E_BLOCK_TRAPDOOR$0",
		"description": "(Globals) () The blocktype for trapdoor"
	},

	"hMain_0": {
		"prefix": "hMain",
		"body": "hMain$0",
		"description": "(Globals) () The main hand"
	},

	"E_BLOCK_ANVIL_Z_0": {
		"prefix": "E_BLOCK_ANVIL_Z",
		"body": "E_BLOCK_ANVIL_Z$0",
		"description": "(Globals) () The blocktype for anvil z"
	},

	"E_BLOCK_HOPPER_0": {
		"prefix": "E_BLOCK_HOPPER",
		"body": "E_BLOCK_HOPPER$0",
		"description": "(Globals) () The blocktype for hopper"
	},

	"E_ITEM_POTIONS_0": {
		"prefix": "E_ITEM_POTIONS",
		"body": "E_ITEM_POTIONS$0",
		"description": "(Globals) () The itemtype for potion (obsolete, use E_ITEM_POTION instead)"
	},

	"caNumber7_0": {
		"prefix": "caNumber7",
		"body": "caNumber7$0",
		"description": "(Globals) () Number key 7"
	},

	"E_BLOCK_RED_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_RED_SHULKER_BOX",
		"body": "E_BLOCK_RED_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for red shulker box"
	},

	"E_BLOCK_CAULDRON_0": {
		"prefix": "E_BLOCK_CAULDRON",
		"body": "E_BLOCK_CAULDRON$0",
		"description": "(Globals) () The blocktype for cauldron"
	},

	"E_BLOCK_ACACIA_DOOR_0": {
		"prefix": "E_BLOCK_ACACIA_DOOR",
		"body": "E_BLOCK_ACACIA_DOOR$0",
		"description": "(Globals) () The blocktype for acacia door"
	},

	"SKULL_TYPE_PLAYER_0": {
		"prefix": "SKULL_TYPE_PLAYER",
		"body": "SKULL_TYPE_PLAYER$0",
		"description": "(Globals) () A player skull"
	},

	"E_ITEM_GHAST_TEAR_0": {
		"prefix": "E_ITEM_GHAST_TEAR",
		"body": "E_ITEM_GHAST_TEAR$0",
		"description": "(Globals) () The itemtype for ghast tear"
	},

	"E_BLOCK_SIGN_POST_0": {
		"prefix": "E_BLOCK_SIGN_POST",
		"body": "E_BLOCK_SIGN_POST$0",
		"description": "(Globals) () The blocktype for sign post"
	},

	"caRightPaintProgress_0": {
		"prefix": "caRightPaintProgress",
		"body": "caRightPaintProgress$0",
		"description": "(Globals) () Add slot for right click paint drag action"
	},

	"E_BLOCK_PURPUR_SLAB_0": {
		"prefix": "E_BLOCK_PURPUR_SLAB",
		"body": "E_BLOCK_PURPUR_SLAB$0",
		"description": "(Globals) () The blocktype for purpur slab"
	},

	"E_BLOCK_ACACIA_FENCE_GATE_0": {
		"prefix": "E_BLOCK_ACACIA_FENCE_GATE",
		"body": "E_BLOCK_ACACIA_FENCE_GATE$0",
		"description": "(Globals) () The blocktype for acacia fence gate"
	},

	"E_META_CONCRETE_POWDER_GRAY_0": {
		"prefix": "E_META_CONCRETE_POWDER_GRAY",
		"body": "E_META_CONCRETE_POWDER_GRAY$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is gray."
	},

	"E_BLOCK_BLOCK_OF_COAL_0": {
		"prefix": "E_BLOCK_BLOCK_OF_COAL",
		"body": "E_BLOCK_BLOCK_OF_COAL$0",
		"description": "(Globals) () The blocktype for block of coal"
	},

	"E_ITEM_BONE_0": {
		"prefix": "E_ITEM_BONE",
		"body": "E_ITEM_BONE$0",
		"description": "(Globals) () The itemtype for bone"
	},

	"E_META_SPONGE_WET_0": {
		"prefix": "E_META_SPONGE_WET",
		"body": "E_META_SPONGE_WET$0",
		"description": "(Globals) () A flag in the metadata of sponges that indicates that the sponge is wet."
	},

	"E_META_HEAD_ZOMBIE_0": {
		"prefix": "E_META_HEAD_ZOMBIE",
		"body": "E_META_HEAD_ZOMBIE$0",
		"description": "(Globals) () A flag in the metadata of heads that indicates that the head is a zombie head."
	},

	"E_ITEM_FIRE_CHARGE_0": {
		"prefix": "E_ITEM_FIRE_CHARGE",
		"body": "E_ITEM_FIRE_CHARGE$0",
		"description": "(Globals) () The itemtype for fire charge"
	},

	"E_BLOCK_PISTON_EXTENSION_0": {
		"prefix": "E_BLOCK_PISTON_EXTENSION",
		"body": "E_BLOCK_PISTON_EXTENSION$0",
		"description": "(Globals) () The blocktype for piston extension"
	},

	"E_ITEM_PAPER_0": {
		"prefix": "E_ITEM_PAPER",
		"body": "E_ITEM_PAPER$0",
		"description": "(Globals) () The itemtype for paper"
	},

	"E_BLOCK_DETECTOR_RAIL_0": {
		"prefix": "E_BLOCK_DETECTOR_RAIL",
		"body": "E_BLOCK_DETECTOR_RAIL$0",
		"description": "(Globals) () The blocktype for detector rail"
	},

	"E_ITEM_GOLD_SHOVEL_0": {
		"prefix": "E_ITEM_GOLD_SHOVEL",
		"body": "E_ITEM_GOLD_SHOVEL$0",
		"description": "(Globals) () The itemtype for gold shovel"
	},

	"E_BLOCK_LADDER_0": {
		"prefix": "E_BLOCK_LADDER",
		"body": "E_BLOCK_LADDER$0",
		"description": "(Globals) () The blocktype for ladder"
	},

	"E_ITEM_RAW_FISH_0": {
		"prefix": "E_ITEM_RAW_FISH",
		"body": "E_ITEM_RAW_FISH$0",
		"description": "(Globals) () The itemtype for raw fish"
	},

	"E_META_END_PORTAL_FRAME_XP_EYE_0": {
		"prefix": "E_META_END_PORTAL_FRAME_XP_EYE",
		"body": "E_META_END_PORTAL_FRAME_XP_EYE$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame is facing the positive X direction and has an ender eye in it."
	},

	"E_BLOCK_BED_XM_0": {
		"prefix": "E_BLOCK_BED_XM",
		"body": "E_BLOCK_BED_XM$0",
		"description": "(Globals) () The blocktype for bed xm"
	},

	"E_BLOCK_LIGHT_WEIGHTED_PRESSURE_PLATE_0": {
		"prefix": "E_BLOCK_LIGHT_WEIGHTED_PRESSURE_PLATE",
		"body": "E_BLOCK_LIGHT_WEIGHTED_PRESSURE_PLATE$0",
		"description": "(Globals) () The blocktype for light weighted pressure plate"
	},

	"E_BLOCK_INACTIVE_COMPARATOR_0": {
		"prefix": "E_BLOCK_INACTIVE_COMPARATOR",
		"body": "E_BLOCK_INACTIVE_COMPARATOR$0",
		"description": "(Globals) () The blocktype for inactive comparator"
	},

	"E_BLOCK_DOUBLE_WOODEN_SLAB_0": {
		"prefix": "E_BLOCK_DOUBLE_WOODEN_SLAB",
		"body": "E_BLOCK_DOUBLE_WOODEN_SLAB$0",
		"description": "(Globals) () The blocktype for double wooden slab"
	},

	"caNumber8_0": {
		"prefix": "caNumber8",
		"body": "caNumber8$0",
		"description": "(Globals) () Number key 8"
	},

	"E_ITEM_MELON_SLICE_0": {
		"prefix": "E_ITEM_MELON_SLICE",
		"body": "E_ITEM_MELON_SLICE$0",
		"description": "(Globals) () The itemtype for melon slice"
	},

	"E_ITEM_BOTTLE_O_ENCHANTING_0": {
		"prefix": "E_ITEM_BOTTLE_O_ENCHANTING",
		"body": "E_ITEM_BOTTLE_O_ENCHANTING$0",
		"description": "(Globals) () The itemtype for bottle o enchanting"
	},

	"E_META_CONCRETE_LIGHTBLUE_0": {
		"prefix": "E_META_CONCRETE_LIGHTBLUE",
		"body": "E_META_CONCRETE_LIGHTBLUE$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is light blue."
	},

	"E_META_CONCRETE_BROWN_0": {
		"prefix": "E_META_CONCRETE_BROWN",
		"body": "E_META_CONCRETE_BROWN$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is brown."
	},

	"E_BLOCK_HAY_BALE_0": {
		"prefix": "E_BLOCK_HAY_BALE",
		"body": "E_BLOCK_HAY_BALE$0",
		"description": "(Globals) () The blocktype for hay bale"
	},

	"E_ITEM_CHORUS_FRUIT_0": {
		"prefix": "E_ITEM_CHORUS_FRUIT",
		"body": "E_ITEM_CHORUS_FRUIT$0",
		"description": "(Globals) () The itemtype for chorus fruit"
	},

	"E_BLOCK_HUGE_BROWN_MUSHROOM_0": {
		"prefix": "E_BLOCK_HUGE_BROWN_MUSHROOM",
		"body": "E_BLOCK_HUGE_BROWN_MUSHROOM$0",
		"description": "(Globals) () The blocktype for huge brown mushroom"
	},

	"E_BLOCK_CRAFTING_TABLE_0": {
		"prefix": "E_BLOCK_CRAFTING_TABLE",
		"body": "E_BLOCK_CRAFTING_TABLE$0",
		"description": "(Globals) () The blocktype for crafting table"
	},

	"DIG_STATUS_DROP_HELD_0": {
		"prefix": "DIG_STATUS_DROP_HELD",
		"body": "DIG_STATUS_DROP_HELD$0",
		"description": "(Globals) () The player has dropped a single item using the Drop Item key (default: Q)"
	},

	"E_BLOCK_WALLSIGN_0": {
		"prefix": "E_BLOCK_WALLSIGN",
		"body": "E_BLOCK_WALLSIGN$0",
		"description": "(Globals) () The blocktype for wallsign"
	},

	"E_BLOCK_REDSTONE_LAMP_ON_0": {
		"prefix": "E_BLOCK_REDSTONE_LAMP_ON",
		"body": "E_BLOCK_REDSTONE_LAMP_ON$0",
		"description": "(Globals) () The blocktype for redstone lamp on"
	},

	"E_BLOCK_AIR_0": {
		"prefix": "E_BLOCK_AIR",
		"body": "E_BLOCK_AIR$0",
		"description": "(Globals) () The blocktype for air"
	},

	"E_BLOCK_ENCHANTMENT_TABLE_0": {
		"prefix": "E_BLOCK_ENCHANTMENT_TABLE",
		"body": "E_BLOCK_ENCHANTMENT_TABLE$0",
		"description": "(Globals) () The blocktype for enchantment table"
	},

	"E_BLOCK_MELON_0": {
		"prefix": "E_BLOCK_MELON",
		"body": "E_BLOCK_MELON$0",
		"description": "(Globals) () The blocktype for melon"
	},

	"E_BLOCK_STONE_BUTTON_0": {
		"prefix": "E_BLOCK_STONE_BUTTON",
		"body": "E_BLOCK_STONE_BUTTON$0",
		"description": "(Globals) () The blocktype for stone button"
	},

	"E_META_DROPSPENSER_FACING_MASK_0": {
		"prefix": "E_META_DROPSPENSER_FACING_MASK",
		"body": "E_META_DROPSPENSER_FACING_MASK$0",
		"description": "(Globals) () A mask that indicates the bits of the metadata that specify the facing of droppers and dispensers."
	},

	"DIG_STATUS_SWAP_ITEM_IN_HAND_0": {
		"prefix": "DIG_STATUS_SWAP_ITEM_IN_HAND",
		"body": "DIG_STATUS_SWAP_ITEM_IN_HAND$0",
		"description": "(Globals) () The player has swapped their held item with the item in their offhand slot (1.9)"
	},

	"E_BLOCK_WHITE_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_WHITE_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_WHITE_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for white glazed terracotta"
	},

	"E_ITEM_DARK_OAK_DOOR_0": {
		"prefix": "E_ITEM_DARK_OAK_DOOR",
		"body": "E_ITEM_DARK_OAK_DOOR$0",
		"description": "(Globals) () The itemtype for dark oak door"
	},

	"E_BLOCK_ACTIVE_COMPARATOR_0": {
		"prefix": "E_BLOCK_ACTIVE_COMPARATOR",
		"body": "E_BLOCK_ACTIVE_COMPARATOR$0",
		"description": "(Globals) () The blocktype for active comparator"
	},

	"E_BLOCK_ANVIL_0": {
		"prefix": "E_BLOCK_ANVIL",
		"body": "E_BLOCK_ANVIL$0",
		"description": "(Globals) () The blocktype for anvil"
	},

	"E_ITEM_FLOWER_POT_0": {
		"prefix": "E_ITEM_FLOWER_POT",
		"body": "E_ITEM_FLOWER_POT$0",
		"description": "(Globals) () The itemtype for flower pot"
	},

	"caLeftClickOutside_0": {
		"prefix": "caLeftClickOutside",
		"body": "caLeftClickOutside$0",
		"description": "(Globals) () Left click outside of inventory"
	},

	"E_BLOCK_BURNING_FURNACE_0": {
		"prefix": "E_BLOCK_BURNING_FURNACE",
		"body": "E_BLOCK_BURNING_FURNACE$0",
		"description": "(Globals) () The blocktype for burning furnace"
	},

	"E_BLOCK_NEW_LOG_0": {
		"prefix": "E_BLOCK_NEW_LOG",
		"body": "E_BLOCK_NEW_LOG$0",
		"description": "(Globals) () The blocktype for new log"
	},

	"E_BLOCK_GLASS_0": {
		"prefix": "E_BLOCK_GLASS",
		"body": "E_BLOCK_GLASS$0",
		"description": "(Globals) () The blocktype for glass"
	},

	"E_ITEM_BLAZE_POWDER_0": {
		"prefix": "E_ITEM_BLAZE_POWDER",
		"body": "E_ITEM_BLAZE_POWDER$0",
		"description": "(Globals) () The itemtype for blaze powder"
	},

	"E_BLOCK_NETHER_BRICK_STAIRS_0": {
		"prefix": "E_BLOCK_NETHER_BRICK_STAIRS",
		"body": "E_BLOCK_NETHER_BRICK_STAIRS$0",
		"description": "(Globals) () The blocktype for nether brick stairs"
	},

	"E_BLOCK_STAIRS_ZP_0": {
		"prefix": "E_BLOCK_STAIRS_ZP",
		"body": "E_BLOCK_STAIRS_ZP$0",
		"description": "(Globals) () The blocktype for stairs zp"
	},

	"E_ITEM_BIRCH_DOOR_0": {
		"prefix": "E_ITEM_BIRCH_DOOR",
		"body": "E_ITEM_BIRCH_DOOR$0",
		"description": "(Globals) () The itemtype for birch door"
	},

	"E_BLOCK_HEAD_0": {
		"prefix": "E_BLOCK_HEAD",
		"body": "E_BLOCK_HEAD$0",
		"description": "(Globals) () The blocktype for head"
	},

	"E_ITEM_IRON_HELMET_0": {
		"prefix": "E_ITEM_IRON_HELMET",
		"body": "E_ITEM_IRON_HELMET$0",
		"description": "(Globals) () The itemtype for iron helmet"
	},

	"E_ITEM_BEETROOT_SOUP_0": {
		"prefix": "E_ITEM_BEETROOT_SOUP",
		"body": "E_ITEM_BEETROOT_SOUP$0",
		"description": "(Globals) () The itemtype for betroot soup"
	},

	"E_ITEM_ENCHANTED_BOOK_0": {
		"prefix": "E_ITEM_ENCHANTED_BOOK",
		"body": "E_ITEM_ENCHANTED_BOOK$0",
		"description": "(Globals) () The itemtype for enchanted book"
	},

	"E_BLOCK_BIRCH_WOOD_STAIRS_0": {
		"prefix": "E_BLOCK_BIRCH_WOOD_STAIRS",
		"body": "E_BLOCK_BIRCH_WOOD_STAIRS$0",
		"description": "(Globals) () The blocktype for birch wood stairs"
	},

	"caRightClickOutside_0": {
		"prefix": "caRightClickOutside",
		"body": "caRightClickOutside$0",
		"description": "(Globals) () Right click outside of inventory"
	},

	"E_META_SPONGE_DRY_0": {
		"prefix": "E_META_SPONGE_DRY",
		"body": "E_META_SPONGE_DRY$0",
		"description": "(Globals) () A flag in the metadata of sponges that indicates that the sponge is dry."
	},

	"BLOCK_FACE_YM_0": {
		"prefix": "BLOCK_FACE_YM",
		"body": "BLOCK_FACE_YM$0",
		"description": "(Globals) () Interacting with the Y- face of the block"
	},

	"E_ITEM_EMERALD_0": {
		"prefix": "E_ITEM_EMERALD",
		"body": "E_ITEM_EMERALD$0",
		"description": "(Globals) () The itemtype for emerald"
	},

	"E_BLOCK_TNT_0": {
		"prefix": "E_BLOCK_TNT",
		"body": "E_BLOCK_TNT$0",
		"description": "(Globals) () The blocktype for tnt"
	},

	"caLeftClickOutsideHoldNothing_0": {
		"prefix": "caLeftClickOutsideHoldNothing",
		"body": "caLeftClickOutsideHoldNothing$0",
		"description": "(Globals) () Left click outside inventory holding nothing"
	},

	"mtFail_0": {
		"prefix": "mtFail",
		"body": "mtFail$0",
		"description": "(Globals) () Something could not be done (i.e. command not executed due to insufficient privilege)"
	},

	"E_ITEM_STONE_HOE_0": {
		"prefix": "E_ITEM_STONE_HOE",
		"body": "E_ITEM_STONE_HOE$0",
		"description": "(Globals) () The itemtype for stone hoe"
	},

	"E_ITEM_HEAD_0": {
		"prefix": "E_ITEM_HEAD",
		"body": "E_ITEM_HEAD$0",
		"description": "(Globals) () The itemtype for head"
	},

	"E_BLOCK_REDSTONE_TORCH_OFF_0": {
		"prefix": "E_BLOCK_REDSTONE_TORCH_OFF",
		"body": "E_BLOCK_REDSTONE_TORCH_OFF$0",
		"description": "(Globals) () The blocktype for redstone torch off"
	},

	"E_BLOCK_BED_XP_0": {
		"prefix": "E_BLOCK_BED_XP",
		"body": "E_BLOCK_BED_XP$0",
		"description": "(Globals) () The blocktype for bed xp"
	},

	"E_ITEM_STICK_0": {
		"prefix": "E_ITEM_STICK",
		"body": "E_ITEM_STICK$0",
		"description": "(Globals) () The itemtype for stick"
	},

	"E_BLOCK_FENCE_0": {
		"prefix": "E_BLOCK_FENCE",
		"body": "E_BLOCK_FENCE$0",
		"description": "(Globals) () The blocktype for fence"
	},

	"E_ITEM_BOOK_0": {
		"prefix": "E_ITEM_BOOK",
		"body": "E_ITEM_BOOK$0",
		"description": "(Globals) () The itemtype for book"
	},

	"E_META_CONCRETE_CYAN_0": {
		"prefix": "E_META_CONCRETE_CYAN",
		"body": "E_META_CONCRETE_CYAN$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is cyan."
	},

	"E_BLOCK_COCOA_POD_0": {
		"prefix": "E_BLOCK_COCOA_POD",
		"body": "E_BLOCK_COCOA_POD$0",
		"description": "(Globals) () The blocktype for cocoa pod"
	},

	"mhLeft_0": {
		"prefix": "mhLeft",
		"body": "mhLeft$0",
		"description": "(Globals) () The left hand is the main hand"
	},

	"E_ITEM_NAME_TAG_0": {
		"prefix": "E_ITEM_NAME_TAG",
		"body": "E_ITEM_NAME_TAG$0",
		"description": "(Globals) () The itemtype for name tag"
	},

	"E_BLOCK_LILY_PAD_0": {
		"prefix": "E_BLOCK_LILY_PAD",
		"body": "E_BLOCK_LILY_PAD$0",
		"description": "(Globals) () The blocktype for lily pad"
	},

	"E_BLOCK_GRASS_0": {
		"prefix": "E_BLOCK_GRASS",
		"body": "E_BLOCK_GRASS$0",
		"description": "(Globals) () The blocktype for grass"
	},

	"E_ITEM_TOTEM_OF_UNDYING_0": {
		"prefix": "E_ITEM_TOTEM_OF_UNDYING",
		"body": "E_ITEM_TOTEM_OF_UNDYING$0",
		"description": "(Globals) () The itemtype for totem of undying"
	},

	"E_BLOCK_LEAVES_0": {
		"prefix": "E_BLOCK_LEAVES",
		"body": "E_BLOCK_LEAVES$0",
		"description": "(Globals) () The blocktype for leaves"
	},

	"caNumber2_0": {
		"prefix": "caNumber2",
		"body": "caNumber2$0",
		"description": "(Globals) () Number key 2"
	},

	"E_BLOCK_REEDS_0": {
		"prefix": "E_BLOCK_REEDS",
		"body": "E_BLOCK_REEDS$0",
		"description": "(Globals) () The blocktype for reeds"
	},

	"E_BLOCK_SNOW_0": {
		"prefix": "E_BLOCK_SNOW",
		"body": "E_BLOCK_SNOW$0",
		"description": "(Globals) () The blocktype for snow"
	},

	"E_ITEM_PAINTING_0": {
		"prefix": "E_ITEM_PAINTING",
		"body": "E_ITEM_PAINTING$0",
		"description": "(Globals) () The itemtype for painting"
	},

	"spHat_0": {
		"prefix": "spHat",
		"body": "spHat$0",
		"description": "(Globals) () The hat/head skin part"
	},

	"spRightPants_0": {
		"prefix": "spRightPants",
		"body": "spRightPants$0",
		"description": "(Globals) () The right pants leg skin part"
	},

	"mtPrivateMessage_0": {
		"prefix": "mtPrivateMessage",
		"body": "mtPrivateMessage$0",
		"description": "(Globals) () Player to player messaging identifier"
	},

	"E_ITEM_GOLD_NUGGET_0": {
		"prefix": "E_ITEM_GOLD_NUGGET",
		"body": "E_ITEM_GOLD_NUGGET$0",
		"description": "(Globals) () The itemtype for gold nugget"
	},

	"spCape_0": {
		"prefix": "spCape",
		"body": "spCape$0",
		"description": "(Globals) () The cape skin part"
	},

	"SKULL_TYPE_ZOMBIE_0": {
		"prefix": "SKULL_TYPE_ZOMBIE",
		"body": "SKULL_TYPE_ZOMBIE$0",
		"description": "(Globals) () A zombie skull"
	},

	"BLOCK_FACE_MIN_0": {
		"prefix": "BLOCK_FACE_MIN",
		"body": "BLOCK_FACE_MIN$0",
		"description": "(Globals) () Used for range checking - lowest legal value for an {{Globals#eBlockFace|eBlockFace}}"
	},

	"E_META_HEAD_SKELETON_0": {
		"prefix": "E_META_HEAD_SKELETON",
		"body": "E_META_HEAD_SKELETON$0",
		"description": "(Globals) () A flag in the metadata of heads that indicates that the head is a skeleton head."
	},

	"SKULL_TYPE_WITHER_0": {
		"prefix": "SKULL_TYPE_WITHER",
		"body": "SKULL_TYPE_WITHER$0",
		"description": "(Globals) () A wither skull"
	},

	"BLOCK_FACE_WEST_0": {
		"prefix": "BLOCK_FACE_WEST",
		"body": "BLOCK_FACE_WEST$0",
		"description": "(Globals) () Please use BLOCK_FACE_XP instead. Interacting with the western face of the block."
	},

	"SKULL_TYPE_DRAGON_0": {
		"prefix": "SKULL_TYPE_DRAGON",
		"body": "SKULL_TYPE_DRAGON$0",
		"description": "(Globals) () A dragon skull"
	},

	"mtWarning_0": {
		"prefix": "mtWarning",
		"body": "mtWarning$0",
		"description": "(Globals) () Something concerning (i.e. reload) is about to happen"
	},

	"E_META_END_PORTAL_FRAME_XP_0": {
		"prefix": "E_META_END_PORTAL_FRAME_XP",
		"body": "E_META_END_PORTAL_FRAME_XP$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame is facing the positive X direction."
	},

	"E_ITEM_DARK_OAK_BOAT_0": {
		"prefix": "E_ITEM_DARK_OAK_BOAT",
		"body": "E_ITEM_DARK_OAK_BOAT$0",
		"description": "(Globals) () The itemtype for dark oak boat"
	},

	"spLeftSleeve_0": {
		"prefix": "spLeftSleeve",
		"body": "spLeftSleeve$0",
		"description": "(Globals) () The left sleeve skin part"
	},

	"E_BLOCK_ACACIA_FENCE_0": {
		"prefix": "E_BLOCK_ACACIA_FENCE",
		"body": "E_BLOCK_ACACIA_FENCE$0",
		"description": "(Globals) () The blocktype for acacia fence"
	},

	"mtPM_0": {
		"prefix": "mtPM",
		"body": "mtPM$0",
		"description": "(Globals) () Player to player messaging identifier"
	},

	"mtInformation_0": {
		"prefix": "mtInformation",
		"body": "mtInformation$0",
		"description": "(Globals) () Informational message (i.e. command usage)"
	},

	"E_BLOCK_WORKBENCH_0": {
		"prefix": "E_BLOCK_WORKBENCH",
		"body": "E_BLOCK_WORKBENCH$0",
		"description": "(Globals) () The blocktype for workbench"
	},

	"E_META_CONCRETE_RED_0": {
		"prefix": "E_META_CONCRETE_RED",
		"body": "E_META_CONCRETE_RED$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is red."
	},

	"mtInfo_0": {
		"prefix": "mtInfo",
		"body": "mtInfo$0",
		"description": "(Globals) () Informational message (i.e. command usage)"
	},

	"mtFatal_0": {
		"prefix": "mtFatal",
		"body": "mtFatal$0",
		"description": "(Globals) () Something catastrophic occured (i.e. plugin crash)"
	},

	"mtFailure_0": {
		"prefix": "mtFailure",
		"body": "mtFailure$0",
		"description": "(Globals) () Something could not be done (i.e. command not executed due to insufficient privilege)"
	},

	"E_ITEM_SADDLE_0": {
		"prefix": "E_ITEM_SADDLE",
		"body": "E_ITEM_SADDLE$0",
		"description": "(Globals) () The itemtype for saddle"
	},

	"E_BLOCK_NETHER_BRICK_0": {
		"prefix": "E_BLOCK_NETHER_BRICK",
		"body": "E_BLOCK_NETHER_BRICK$0",
		"description": "(Globals) () The blocktype for nether brick"
	},

	"E_ITEM_DIAMOND_AXE_0": {
		"prefix": "E_ITEM_DIAMOND_AXE",
		"body": "E_ITEM_DIAMOND_AXE$0",
		"description": "(Globals) () The itemtype for diamond axe"
	},

	"E_META_CONCRETE_GREEN_0": {
		"prefix": "E_META_CONCRETE_GREEN",
		"body": "E_META_CONCRETE_GREEN$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is green."
	},

	"mtCustom_0": {
		"prefix": "mtCustom",
		"body": "mtCustom$0",
		"description": "(Globals) () Send raw data without any processing"
	},

	"esWitherSkull_0": {
		"prefix": "esWitherSkull",
		"body": "esWitherSkull$0",
		"description": "(Globals) () A wither skull explosion. The SourceData param is the {{cWitherSkullEntity|wither skull entity}} object."
	},

	"E_BLOCK_IRON_BARS_0": {
		"prefix": "E_BLOCK_IRON_BARS",
		"body": "E_BLOCK_IRON_BARS$0",
		"description": "(Globals) () The blocktype for iron bars"
	},

	"E_BLOCK_BRICK_0": {
		"prefix": "E_BLOCK_BRICK",
		"body": "E_BLOCK_BRICK$0",
		"description": "(Globals) () The blocktype for brick"
	},

	"E_BLOCK_CHEST_0": {
		"prefix": "E_BLOCK_CHEST",
		"body": "E_BLOCK_CHEST$0",
		"description": "(Globals) () The blocktype for chest"
	},

	"E_ITEM_ELYTRA_0": {
		"prefix": "E_ITEM_ELYTRA",
		"body": "E_ITEM_ELYTRA$0",
		"description": "(Globals) () The itemtype for elytra"
	},

	"esPlugin_0": {
		"prefix": "esPlugin",
		"body": "esPlugin$0",
		"description": "(Globals) () An explosion started by a plugin, without any further information. The SourceData param is unused. "
	},

	"esOther_0": {
		"prefix": "esOther",
		"body": "esOther$0",
		"description": "(Globals) () Any other explosion. The SourceData param is unused."
	},

	"esMonster_0": {
		"prefix": "esMonster",
		"body": "esMonster$0",
		"description": "(Globals) () A monster explosion (creeper). The SourceData param is the {{cMonster|monster entity}} object."
	},

	"esGhastFireball_0": {
		"prefix": "esGhastFireball",
		"body": "esGhastFireball$0",
		"description": "(Globals) () A ghast fireball explosion. The SourceData param is the {{cGhastFireballEntity|ghast fireball entity}} object."
	},

	"E_BLOCK_MAX_TYPE_ID_0": {
		"prefix": "E_BLOCK_MAX_TYPE_ID",
		"body": "E_BLOCK_MAX_TYPE_ID$0",
		"description": "(Globals) () The blocktype for max type id"
	},

	"E_ITEM_REDSTONE_DUST_0": {
		"prefix": "E_ITEM_REDSTONE_DUST",
		"body": "E_ITEM_REDSTONE_DUST$0",
		"description": "(Globals) () The itemtype for redstone dust"
	},

	"E_META_HEAD_WITHER_0": {
		"prefix": "E_META_HEAD_WITHER",
		"body": "E_META_HEAD_WITHER$0",
		"description": "(Globals) () A flag in the metadata of heads that indicates that the head is a wither head."
	},

	"E_ITEM_CHEST_MINECART_0": {
		"prefix": "E_ITEM_CHEST_MINECART",
		"body": "E_ITEM_CHEST_MINECART$0",
		"description": "(Globals) () The itemtype for chest minecart"
	},

	"E_META_HEAD_DRAGON_0": {
		"prefix": "E_META_HEAD_DRAGON",
		"body": "E_META_HEAD_DRAGON$0",
		"description": "(Globals) () A flag in the metadata of heads that indicates that the head is a dragon head."
	},

	"E_META_END_PORTAL_FRAME_ZP_EYE_0": {
		"prefix": "E_META_END_PORTAL_FRAME_ZP_EYE",
		"body": "E_META_END_PORTAL_FRAME_ZP_EYE$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame is facing the positive Z direction and has an ender eye in it."
	},

	"E_META_END_PORTAL_FRAME_ZM_EYE_0": {
		"prefix": "E_META_END_PORTAL_FRAME_ZM_EYE",
		"body": "E_META_END_PORTAL_FRAME_ZM_EYE$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame is facing the negative Z direction and has an ender eye in it."
	},

	"caNumber4_0": {
		"prefix": "caNumber4",
		"body": "caNumber4$0",
		"description": "(Globals) () Number key 4"
	},

	"DIG_STATUS_DROP_STACK_0": {
		"prefix": "DIG_STATUS_DROP_STACK",
		"body": "DIG_STATUS_DROP_STACK$0",
		"description": "(Globals) () The player has dropped a full stack of items using the Drop Item key (default: Q) while holding down a specific modifier key (in windows, control)"
	},

	"E_META_END_PORTAL_FRAME_XM_EYE_0": {
		"prefix": "E_META_END_PORTAL_FRAME_XM_EYE",
		"body": "E_META_END_PORTAL_FRAME_XM_EYE$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame is facing the negative X direction and has an ender eye in it."
	},

	"E_BLOCK_BLOCK_OF_REDSTONE_0": {
		"prefix": "E_BLOCK_BLOCK_OF_REDSTONE",
		"body": "E_BLOCK_BLOCK_OF_REDSTONE$0",
		"description": "(Globals) () The blocktype for block of redstone"
	},

	"E_META_END_PORTAL_FRAME_ZP_0": {
		"prefix": "E_META_END_PORTAL_FRAME_ZP",
		"body": "E_META_END_PORTAL_FRAME_ZP$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame is facing the positive Z direction."
	},

	"mtSuccess_0": {
		"prefix": "mtSuccess",
		"body": "mtSuccess$0",
		"description": "(Globals) () Something executed successfully"
	},

	"E_META_END_PORTAL_FRAME_XM_0": {
		"prefix": "E_META_END_PORTAL_FRAME_XM",
		"body": "E_META_END_PORTAL_FRAME_XM$0",
		"description": "(Globals) () A flag in the metadata of end portal frames that indicates that the portal frame is facing the negative X direction."
	},

	"E_ITEM_CHAIN_HELMET_0": {
		"prefix": "E_ITEM_CHAIN_HELMET",
		"body": "E_ITEM_CHAIN_HELMET$0",
		"description": "(Globals) () The itemtype for chain helmet"
	},

	"caRightPaintEnd_0": {
		"prefix": "caRightPaintEnd",
		"body": "caRightPaintEnd$0",
		"description": "(Globals) () End of right click paint drag action"
	},

	"E_META_END_PORTAL_FRAME_NO_EYE_0": {
		"prefix": "E_META_END_PORTAL_FRAME_NO_EYE",
		"body": "E_META_END_PORTAL_FRAME_NO_EYE$0",
		"description": "(Globals) () The lack of the flag in the metadata of end portal frames indicating that the portal frame has an eye in it."
	},

	"E_BLOCK_RED_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_RED_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_RED_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for red glazed terracotta"
	},

	"E_META_CONCRETE_POWDER_PURPLE_0": {
		"prefix": "E_META_CONCRETE_POWDER_PURPLE",
		"body": "E_META_CONCRETE_POWDER_PURPLE$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is purple."
	},

	"E_META_DROPSPENSER_FACING_YP_0": {
		"prefix": "E_META_DROPSPENSER_FACING_YP",
		"body": "E_META_DROPSPENSER_FACING_YP$0",
		"description": "(Globals) () A flag in the metadata of droppers and dispensers that indicates that the dropper or dispenser is looking in the positive Y direction."
	},

	"E_ITEM_STONE_PICKAXE_0": {
		"prefix": "E_ITEM_STONE_PICKAXE",
		"body": "E_ITEM_STONE_PICKAXE$0",
		"description": "(Globals) () The itemtype for stone pickaxe"
	},

	"E_META_DROPSPENSER_FACING_XP_0": {
		"prefix": "E_META_DROPSPENSER_FACING_XP",
		"body": "E_META_DROPSPENSER_FACING_XP$0",
		"description": "(Globals) () A flag in the metadata of droppers and dispensers that indicates that the dropper or dispenser is looking in the positive X direction."
	},

	"E_META_DROPSPENSER_FACING_XM_0": {
		"prefix": "E_META_DROPSPENSER_FACING_XM",
		"body": "E_META_DROPSPENSER_FACING_XM$0",
		"description": "(Globals) () A flag in the metadata of droppers and dispensers that indicates that the dropper or dispenser is looking in the negative X direction."
	},

	"E_BLOCK_STICKY_PISTON_0": {
		"prefix": "E_BLOCK_STICKY_PISTON",
		"body": "E_BLOCK_STICKY_PISTON$0",
		"description": "(Globals) () The blocktype for sticky piston"
	},

	"E_META_CONCRETE_YELLOW_0": {
		"prefix": "E_META_CONCRETE_YELLOW",
		"body": "E_META_CONCRETE_YELLOW$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is yellow."
	},

	"SKULL_TYPE_SKELETON_0": {
		"prefix": "SKULL_TYPE_SKELETON",
		"body": "SKULL_TYPE_SKELETON$0",
		"description": "(Globals) () A skeleton skull"
	},

	"E_ITEM_FISHING_ROD_0": {
		"prefix": "E_ITEM_FISHING_ROD",
		"body": "E_ITEM_FISHING_ROD$0",
		"description": "(Globals) () The itemtype for fishing rod"
	},

	"E_BLOCK_LIGHT_GRAY_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_LIGHT_GRAY_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_LIGHT_GRAY_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for light gray glazed terracotta"
	},

	"E_ITEM_DIAMOND_LEGGINGS_0": {
		"prefix": "E_ITEM_DIAMOND_LEGGINGS",
		"body": "E_ITEM_DIAMOND_LEGGINGS$0",
		"description": "(Globals) () The itemtype for diamond leggings"
	},

	"E_META_CONCRETE_POWDER_YELLOW_0": {
		"prefix": "E_META_CONCRETE_POWDER_YELLOW",
		"body": "E_META_CONCRETE_POWDER_YELLOW$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is yellow."
	},

	"E_BLOCK_IRON_BLOCK_0": {
		"prefix": "E_BLOCK_IRON_BLOCK",
		"body": "E_BLOCK_IRON_BLOCK$0",
		"description": "(Globals) () The blocktype for iron block"
	},

	"E_BLOCK_JUKEBOX_0": {
		"prefix": "E_BLOCK_JUKEBOX",
		"body": "E_BLOCK_JUKEBOX$0",
		"description": "(Globals) () The blocktype for jukebox"
	},

	"E_META_CONCRETE_POWDER_WHITE_0": {
		"prefix": "E_META_CONCRETE_POWDER_WHITE",
		"body": "E_META_CONCRETE_POWDER_WHITE$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is white."
	},

	"E_META_CONCRETE_POWDER_RED_0": {
		"prefix": "E_META_CONCRETE_POWDER_RED",
		"body": "E_META_CONCRETE_POWDER_RED$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is red."
	},

	"E_META_CONCRETE_POWDER_PINK_0": {
		"prefix": "E_META_CONCRETE_POWDER_PINK",
		"body": "E_META_CONCRETE_POWDER_PINK$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is pink."
	},

	"E_ITEM_WARD_DISC_0": {
		"prefix": "E_ITEM_WARD_DISC",
		"body": "E_ITEM_WARD_DISC$0",
		"description": "(Globals) () The itemtype for ward disc"
	},

	"E_META_CONCRETE_POWDER_ORANGE_0": {
		"prefix": "E_META_CONCRETE_POWDER_ORANGE",
		"body": "E_META_CONCRETE_POWDER_ORANGE$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is orange."
	},

	"E_ITEM_MUSHROOM_SOUP_0": {
		"prefix": "E_ITEM_MUSHROOM_SOUP",
		"body": "E_ITEM_MUSHROOM_SOUP$0",
		"description": "(Globals) () The itemtype for mushroom soup"
	},

	"E_BLOCK_JUNGLE_WOOD_STAIRS_0": {
		"prefix": "E_BLOCK_JUNGLE_WOOD_STAIRS",
		"body": "E_BLOCK_JUNGLE_WOOD_STAIRS$0",
		"description": "(Globals) () The blocktype for jungle wood stairs"
	},

	"E_META_CONCRETE_POWDER_LIGHTGREEN_0": {
		"prefix": "E_META_CONCRETE_POWDER_LIGHTGREEN",
		"body": "E_META_CONCRETE_POWDER_LIGHTGREEN$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is light green."
	},

	"E_META_CONCRETE_POWDER_LIGHTGRAY_0": {
		"prefix": "E_META_CONCRETE_POWDER_LIGHTGRAY",
		"body": "E_META_CONCRETE_POWDER_LIGHTGRAY$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is light gray."
	},

	"E_ITEM_MINECART_0": {
		"prefix": "E_ITEM_MINECART",
		"body": "E_ITEM_MINECART$0",
		"description": "(Globals) () The itemtype for minecart"
	},

	"E_ITEM_COMPARATOR_0": {
		"prefix": "E_ITEM_COMPARATOR",
		"body": "E_ITEM_COMPARATOR$0",
		"description": "(Globals) () The itemtype for comparator"
	},

	"E_BLOCK_BUTTON_YM_0": {
		"prefix": "E_BLOCK_BUTTON_YM",
		"body": "E_BLOCK_BUTTON_YM$0",
		"description": "(Globals) () The blocktype for button ym"
	},

	"E_META_CONCRETE_POWDER_LIGHTBLUE_0": {
		"prefix": "E_META_CONCRETE_POWDER_LIGHTBLUE",
		"body": "E_META_CONCRETE_POWDER_LIGHTBLUE$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is light blue."
	},

	"E_META_CONCRETE_POWDER_BROWN_0": {
		"prefix": "E_META_CONCRETE_POWDER_BROWN",
		"body": "E_META_CONCRETE_POWDER_BROWN$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is brown."
	},

	"E_META_CONCRETE_POWDER_BLUE_0": {
		"prefix": "E_META_CONCRETE_POWDER_BLUE",
		"body": "E_META_CONCRETE_POWDER_BLUE$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is blue."
	},

	"E_BLOCK_FARMLAND_0": {
		"prefix": "E_BLOCK_FARMLAND",
		"body": "E_BLOCK_FARMLAND$0",
		"description": "(Globals) () The blocktype for farmland"
	},

	"E_BLOCK_TALL_GRASS_0": {
		"prefix": "E_BLOCK_TALL_GRASS",
		"body": "E_BLOCK_TALL_GRASS$0",
		"description": "(Globals) () The blocktype for tall grass"
	},

	"E_BLOCK_RED_SANDSTONE_STAIRS_0": {
		"prefix": "E_BLOCK_RED_SANDSTONE_STAIRS",
		"body": "E_BLOCK_RED_SANDSTONE_STAIRS$0",
		"description": "(Globals) () The blocktype for red sandstone stairs"
	},

	"E_ITEM_DIAMOND_0": {
		"prefix": "E_ITEM_DIAMOND",
		"body": "E_ITEM_DIAMOND$0",
		"description": "(Globals) () The itemtype for diamond"
	},

	"E_BLOCK_STANDING_BANNER_0": {
		"prefix": "E_BLOCK_STANDING_BANNER",
		"body": "E_BLOCK_STANDING_BANNER$0",
		"description": "(Globals) () The blocktype for standing banner"
	},

	"E_META_CONCRETE_LIGHTGREEN_0": {
		"prefix": "E_META_CONCRETE_LIGHTGREEN",
		"body": "E_META_CONCRETE_LIGHTGREEN$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is light green."
	},

	"E_BLOCK_DIAMOND_BLOCK_0": {
		"prefix": "E_BLOCK_DIAMOND_BLOCK",
		"body": "E_BLOCK_DIAMOND_BLOCK$0",
		"description": "(Globals) () The blocktype for diamond block"
	},

	"E_BLOCK_HARDENED_CLAY_0": {
		"prefix": "E_BLOCK_HARDENED_CLAY",
		"body": "E_BLOCK_HARDENED_CLAY$0",
		"description": "(Globals) () The blocktype for hardened clay"
	},

	"mtDeath_0": {
		"prefix": "mtDeath",
		"body": "mtDeath$0",
		"description": "(Globals) () Denotes death of player"
	},

	"E_META_CONCRETE_BLUE_0": {
		"prefix": "E_META_CONCRETE_BLUE",
		"body": "E_META_CONCRETE_BLUE$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is blue."
	},

	"E_META_CONCRETE_BLACK_0": {
		"prefix": "E_META_CONCRETE_BLACK",
		"body": "E_META_CONCRETE_BLACK$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is black."
	},

	"E_META_BIG_FLOWER_TOP_0": {
		"prefix": "E_META_BIG_FLOWER_TOP",
		"body": "E_META_BIG_FLOWER_TOP$0",
		"description": "(Globals) () The metadata of a big flower block that indicates it is the top block."
	},

	"DIG_STATUS_STARTED_0": {
		"prefix": "DIG_STATUS_STARTED",
		"body": "DIG_STATUS_STARTED$0",
		"description": "(Globals) () The player has started digging"
	},

	"DIG_STATUS_CANCELLED_0": {
		"prefix": "DIG_STATUS_CANCELLED",
		"body": "DIG_STATUS_CANCELLED$0",
		"description": "(Globals) () The player has let go of the mine block key before finishing mining the block"
	},

	"BLOCK_FACE_ZP_0": {
		"prefix": "BLOCK_FACE_ZP",
		"body": "BLOCK_FACE_ZP$0",
		"description": "(Globals) () Interacting with the Z+ face of the block"
	},

	"E_ITEM_FLINT_0": {
		"prefix": "E_ITEM_FLINT",
		"body": "E_ITEM_FLINT$0",
		"description": "(Globals) () The itemtype for flint"
	},

	"BLOCK_FACE_YP_0": {
		"prefix": "BLOCK_FACE_YP",
		"body": "BLOCK_FACE_YP$0",
		"description": "(Globals) () Interacting with the Y+ face of the block"
	},

	"caCtrlDropKey_0": {
		"prefix": "caCtrlDropKey",
		"body": "caCtrlDropKey$0",
		"description": "(Globals) () Drop a full stack"
	},

	"E_META_CONCRETE_PURPLE_0": {
		"prefix": "E_META_CONCRETE_PURPLE",
		"body": "E_META_CONCRETE_PURPLE$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is purple."
	},

	"BLOCK_FACE_SOUTH_0": {
		"prefix": "BLOCK_FACE_SOUTH",
		"body": "BLOCK_FACE_SOUTH$0",
		"description": "(Globals) () Please use BLOCK_FACE_ZP instead. Interacting with the southern face of the block."
	},

	"BLOCK_FACE_NORTH_0": {
		"prefix": "BLOCK_FACE_NORTH",
		"body": "BLOCK_FACE_NORTH$0",
		"description": "(Globals) () Please use BLOCK_FACE_ZM instead. Interacting with the northern face of the block."
	},

	"BLOCK_FACE_NONE_0": {
		"prefix": "BLOCK_FACE_NONE",
		"body": "BLOCK_FACE_NONE$0",
		"description": "(Globals) () Interacting with no block face - swinging the item in the air"
	},

	"caNumber9_0": {
		"prefix": "caNumber9",
		"body": "caNumber9$0",
		"description": "(Globals) () Number key 9"
	},

	"E_BLOCK_BIRCH_FENCE_0": {
		"prefix": "E_BLOCK_BIRCH_FENCE",
		"body": "E_BLOCK_BIRCH_FENCE$0",
		"description": "(Globals) () The blocktype for birch fence"
	},

	"E_ITEM_CAULDRON_0": {
		"prefix": "E_ITEM_CAULDRON",
		"body": "E_ITEM_CAULDRON$0",
		"description": "(Globals) () The itemtype for cauldron"
	},

	"E_ITEM_WOODEN_SWORD_0": {
		"prefix": "E_ITEM_WOODEN_SWORD",
		"body": "E_ITEM_WOODEN_SWORD$0",
		"description": "(Globals) () The itemtype for wooden sword"
	},

	"E_ITEM_CHAIN_BOOTS_0": {
		"prefix": "E_ITEM_CHAIN_BOOTS",
		"body": "E_ITEM_CHAIN_BOOTS$0",
		"description": "(Globals) () The itemtype for chain boots"
	},

	"E_ITEM_BREWING_STAND_0": {
		"prefix": "E_ITEM_BREWING_STAND",
		"body": "E_ITEM_BREWING_STAND$0",
		"description": "(Globals) () The itemtype for brewing stand"
	},

	"E_ITEM_JUNGLE_DOOR_0": {
		"prefix": "E_ITEM_JUNGLE_DOOR",
		"body": "E_ITEM_JUNGLE_DOOR$0",
		"description": "(Globals) () The itemtype for jungle door"
	},

	"E_ITEM_WOODEN_PICKAXE_0": {
		"prefix": "E_ITEM_WOODEN_PICKAXE",
		"body": "E_ITEM_WOODEN_PICKAXE$0",
		"description": "(Globals) () The itemtype for wooden pickaxe"
	},

	"E_BLOCK_BARRIER_0": {
		"prefix": "E_BLOCK_BARRIER",
		"body": "E_BLOCK_BARRIER$0",
		"description": "(Globals) () The blocktype for barrier"
	},

	"E_ITEM_WOODEN_HOE_0": {
		"prefix": "E_ITEM_WOODEN_HOE",
		"body": "E_ITEM_WOODEN_HOE$0",
		"description": "(Globals) () The itemtype for wooden hoe"
	},

	"mtError_0": {
		"prefix": "mtError",
		"body": "mtError$0",
		"description": "(Globals) () Something could not be done (i.e. command not executed due to insufficient privilege)"
	},

	"E_ITEM_WOODEN_AXE_0": {
		"prefix": "E_ITEM_WOODEN_AXE",
		"body": "E_ITEM_WOODEN_AXE$0",
		"description": "(Globals) () The itemtype for wooden axe"
	},

	"E_ITEM_WATER_BUCKET_0": {
		"prefix": "E_ITEM_WATER_BUCKET",
		"body": "E_ITEM_WATER_BUCKET$0",
		"description": "(Globals) () The itemtype for water bucket"
	},

	"E_BLOCK_COBWEB_0": {
		"prefix": "E_BLOCK_COBWEB",
		"body": "E_BLOCK_COBWEB$0",
		"description": "(Globals) () The blocktype for cobweb"
	},

	"E_ITEM_WAIT_DISC_0": {
		"prefix": "E_ITEM_WAIT_DISC",
		"body": "E_ITEM_WAIT_DISC$0",
		"description": "(Globals) () The itemtype for wait disc"
	},

	"E_BLOCK_BED_OCCUPIED_0": {
		"prefix": "E_BLOCK_BED_OCCUPIED",
		"body": "E_BLOCK_BED_OCCUPIED$0",
		"description": "(Globals) () The blocktype for bed occupied"
	},

	"E_ITEM_TIPPED_ARROW_0": {
		"prefix": "E_ITEM_TIPPED_ARROW",
		"body": "E_ITEM_TIPPED_ARROW$0",
		"description": "(Globals) () The itemtype for tipped arrow"
	},

	"E_ITEM_STRAD_DISC_0": {
		"prefix": "E_ITEM_STRAD_DISC",
		"body": "E_ITEM_STRAD_DISC$0",
		"description": "(Globals) () The itemtype for strad disc"
	},

	"E_ITEM_STONE_AXE_0": {
		"prefix": "E_ITEM_STONE_AXE",
		"body": "E_ITEM_STONE_AXE$0",
		"description": "(Globals) () The itemtype for stone axe"
	},

	"E_ITEM_SPRUCE_DOOR_0": {
		"prefix": "E_ITEM_SPRUCE_DOOR",
		"body": "E_ITEM_SPRUCE_DOOR$0",
		"description": "(Globals) () The itemtype for spruce door"
	},

	"E_ITEM_SPRUCE_BOAT_0": {
		"prefix": "E_ITEM_SPRUCE_BOAT",
		"body": "E_ITEM_SPRUCE_BOAT$0",
		"description": "(Globals) () The itemtype for spruce boat"
	},

	"E_ITEM_LAST_DISC_PLUS_ONE_0": {
		"prefix": "E_ITEM_LAST_DISC_PLUS_ONE",
		"body": "E_ITEM_LAST_DISC_PLUS_ONE$0",
		"description": "(Globals) () The itemtype for last disc plus one"
	},

	"E_BLOCK_IRON_ORE_0": {
		"prefix": "E_BLOCK_IRON_ORE",
		"body": "E_BLOCK_IRON_ORE$0",
		"description": "(Globals) () The blocktype for iron ore"
	},

	"E_BLOCK_MOSSY_COBBLESTONE_0": {
		"prefix": "E_BLOCK_MOSSY_COBBLESTONE",
		"body": "E_BLOCK_MOSSY_COBBLESTONE$0",
		"description": "(Globals) () The blocktype for mossy cobblestone"
	},

	"E_ITEM_SPECTRAL_ARROW_0": {
		"prefix": "E_ITEM_SPECTRAL_ARROW",
		"body": "E_ITEM_SPECTRAL_ARROW$0",
		"description": "(Globals) () The itemtype for spectral arrow"
	},

	"E_ITEM_SPAWN_EGG_0": {
		"prefix": "E_ITEM_SPAWN_EGG",
		"body": "E_ITEM_SPAWN_EGG$0",
		"description": "(Globals) () The itemtype for spawn egg"
	},

	"E_ITEM_SHULKER_SHELL_0": {
		"prefix": "E_ITEM_SHULKER_SHELL",
		"body": "E_ITEM_SHULKER_SHELL$0",
		"description": "(Globals) () The itemtype for shulker shell"
	},

	"E_ITEM_FIRST_0": {
		"prefix": "E_ITEM_FIRST",
		"body": "E_ITEM_FIRST$0",
		"description": "(Globals) () The itemtype for first"
	},

	"E_META_CONCRETE_MAGENTA_0": {
		"prefix": "E_META_CONCRETE_MAGENTA",
		"body": "E_META_CONCRETE_MAGENTA$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is magenta."
	},

	"E_ITEM_ROTTEN_FLESH_0": {
		"prefix": "E_ITEM_ROTTEN_FLESH",
		"body": "E_ITEM_ROTTEN_FLESH$0",
		"description": "(Globals) () The itemtype for rotten flesh"
	},

	"caNumber3_0": {
		"prefix": "caNumber3",
		"body": "caNumber3$0",
		"description": "(Globals) () Number key 3"
	},

	"E_ITEM_RED_APPLE_0": {
		"prefix": "E_ITEM_RED_APPLE",
		"body": "E_ITEM_RED_APPLE$0",
		"description": "(Globals) () The itemtype for red apple"
	},

	"esBed_0": {
		"prefix": "esBed",
		"body": "esBed$0",
		"description": "(Globals) () A bed explosion. The SourceData param is the {{Vector3i|position}} of the bed."
	},

	"E_BLOCK_BUTTON_YP_0": {
		"prefix": "E_BLOCK_BUTTON_YP",
		"body": "E_BLOCK_BUTTON_YP$0",
		"description": "(Globals) () The blocktype for button yp"
	},

	"E_ITEM_RABBIT_STEW_0": {
		"prefix": "E_ITEM_RABBIT_STEW",
		"body": "E_ITEM_RABBIT_STEW$0",
		"description": "(Globals) () The itemtype for rabbit stew"
	},

	"E_ITEM_ITEM_FRAME_0": {
		"prefix": "E_ITEM_ITEM_FRAME",
		"body": "E_ITEM_ITEM_FRAME$0",
		"description": "(Globals) () The itemtype for item frame"
	},

	"E_ITEM_PRISMARINE_CRYSTALS_0": {
		"prefix": "E_ITEM_PRISMARINE_CRYSTALS",
		"body": "E_ITEM_PRISMARINE_CRYSTALS$0",
		"description": "(Globals) () The itemtype for prismarine crystals"
	},

	"E_BLOCK_PURPUR_DOUBLE_SLAB_0": {
		"prefix": "E_BLOCK_PURPUR_DOUBLE_SLAB",
		"body": "E_BLOCK_PURPUR_DOUBLE_SLAB$0",
		"description": "(Globals) () The blocktype for purpur double slab"
	},

	"E_ITEM_POTATO_0": {
		"prefix": "E_ITEM_POTATO",
		"body": "E_ITEM_POTATO$0",
		"description": "(Globals) () The itemtype for potato"
	},

	"E_BLOCK_IRON_DOOR_0": {
		"prefix": "E_BLOCK_IRON_DOOR",
		"body": "E_BLOCK_IRON_DOOR$0",
		"description": "(Globals) () The blocktype for iron door"
	},

	"E_ITEM_POISONOUS_POTATO_0": {
		"prefix": "E_ITEM_POISONOUS_POTATO",
		"body": "E_ITEM_POISONOUS_POTATO$0",
		"description": "(Globals) () The itemtype for poisonous potato"
	},

	"E_BLOCK_BOOKCASE_0": {
		"prefix": "E_BLOCK_BOOKCASE",
		"body": "E_BLOCK_BOOKCASE$0",
		"description": "(Globals) () The blocktype for bookcase"
	},

	"E_BLOCK_SEA_LANTERN_0": {
		"prefix": "E_BLOCK_SEA_LANTERN",
		"body": "E_BLOCK_SEA_LANTERN$0",
		"description": "(Globals) () The blocktype for sea lantern"
	},

	"E_ITEM_NETHER_WART_0": {
		"prefix": "E_ITEM_NETHER_WART",
		"body": "E_ITEM_NETHER_WART$0",
		"description": "(Globals) () The itemtype for nether wart"
	},

	"E_ITEM_NETHER_QUARTZ_0": {
		"prefix": "E_ITEM_NETHER_QUARTZ",
		"body": "E_ITEM_NETHER_QUARTZ$0",
		"description": "(Globals) () The itemtype for nether quartz"
	},

	"E_BLOCK_END_ROD_0": {
		"prefix": "E_BLOCK_END_ROD",
		"body": "E_BLOCK_END_ROD$0",
		"description": "(Globals) () The blocktype for end rod"
	},

	"caRightPaintBegin_0": {
		"prefix": "caRightPaintBegin",
		"body": "caRightPaintBegin$0",
		"description": "(Globals) () Begining of right click paint drag action"
	},

	"caMiddlePaintProgress_0": {
		"prefix": "caMiddlePaintProgress",
		"body": "caMiddlePaintProgress$0",
		"description": "(Globals) () Add slot for middle click paint drag action, only valid for creative players"
	},

	"E_META_CONCRETE_POWDER_MAGENTA_0": {
		"prefix": "E_META_CONCRETE_POWDER_MAGENTA",
		"body": "E_META_CONCRETE_POWDER_MAGENTA$0",
		"description": "(Globals) () A flag in the metadata of concete powder that indicates that the concrete powder is magenta."
	},

	"E_BLOCK_DARK_OAK_FENCE_0": {
		"prefix": "E_BLOCK_DARK_OAK_FENCE",
		"body": "E_BLOCK_DARK_OAK_FENCE$0",
		"description": "(Globals) () The blocktype for dark oak fence"
	},

	"E_ITEM_MINECART_WITH_HOPPER_0": {
		"prefix": "E_ITEM_MINECART_WITH_HOPPER",
		"body": "E_ITEM_MINECART_WITH_HOPPER$0",
		"description": "(Globals) () The itemtype for minecart with hopper"
	},

	"E_ITEM_MILK_0": {
		"prefix": "E_ITEM_MILK",
		"body": "E_ITEM_MILK$0",
		"description": "(Globals) () The itemtype for milk"
	},

	"E_ITEM_CAT_DISC_0": {
		"prefix": "E_ITEM_CAT_DISC",
		"body": "E_ITEM_CAT_DISC$0",
		"description": "(Globals) () The itemtype for cat disc"
	},

	"E_ITEM_DIAMOND_SHOVEL_0": {
		"prefix": "E_ITEM_DIAMOND_SHOVEL",
		"body": "E_ITEM_DIAMOND_SHOVEL$0",
		"description": "(Globals) () The itemtype for diamond shovel"
	},

	"E_BLOCK_CACTUS_0": {
		"prefix": "E_BLOCK_CACTUS",
		"body": "E_BLOCK_CACTUS$0",
		"description": "(Globals) () The blocktype for cactus"
	},

	"E_ITEM_LEASH_0": {
		"prefix": "E_ITEM_LEASH",
		"body": "E_ITEM_LEASH$0",
		"description": "(Globals) () The itemtype for lead (E_ITEM_LEAD synonym)"
	},

	"E_ITEM_GOLD_0": {
		"prefix": "E_ITEM_GOLD",
		"body": "E_ITEM_GOLD$0",
		"description": "(Globals) () The itemtype for gold"
	},

	"E_ITEM_MELLOHI_DISC_0": {
		"prefix": "E_ITEM_MELLOHI_DISC",
		"body": "E_ITEM_MELLOHI_DISC$0",
		"description": "(Globals) () The itemtype for mellohi disc"
	},

	"E_BLOCK_WALL_BANNER_0": {
		"prefix": "E_BLOCK_WALL_BANNER",
		"body": "E_BLOCK_WALL_BANNER$0",
		"description": "(Globals) () The blocktype for wall banner"
	},

	"E_ITEM_MAP_0": {
		"prefix": "E_ITEM_MAP",
		"body": "E_ITEM_MAP$0",
		"description": "(Globals) () The itemtype for map"
	},

	"E_ITEM_BAKED_POTATO_0": {
		"prefix": "E_ITEM_BAKED_POTATO",
		"body": "E_ITEM_BAKED_POTATO$0",
		"description": "(Globals) () The itemtype for baked potato"
	},

	"E_ITEM_FURNACE_MINECART_0": {
		"prefix": "E_ITEM_FURNACE_MINECART",
		"body": "E_ITEM_FURNACE_MINECART$0",
		"description": "(Globals) () The itemtype for furnace minecart"
	},

	"E_ITEM_LEATHER_CAP_0": {
		"prefix": "E_ITEM_LEATHER_CAP",
		"body": "E_ITEM_LEATHER_CAP$0",
		"description": "(Globals) () The itemtype for leather cap"
	},

	"E_BLOCK_SNOW_BLOCK_0": {
		"prefix": "E_BLOCK_SNOW_BLOCK",
		"body": "E_BLOCK_SNOW_BLOCK$0",
		"description": "(Globals) () The blocktype for snow block"
	},

	"E_ITEM_DIAMOND_PICKAXE_0": {
		"prefix": "E_ITEM_DIAMOND_PICKAXE",
		"body": "E_ITEM_DIAMOND_PICKAXE$0",
		"description": "(Globals) () The itemtype for diamond pickaxe"
	},

	"E_BLOCK_PUMPKIN_STEM_0": {
		"prefix": "E_BLOCK_PUMPKIN_STEM",
		"body": "E_BLOCK_PUMPKIN_STEM$0",
		"description": "(Globals) () The blocktype for pumpkin stem"
	},

	"E_ITEM_BEETROOT_SEEDS_0": {
		"prefix": "E_ITEM_BEETROOT_SEEDS",
		"body": "E_ITEM_BEETROOT_SEEDS$0",
		"description": "(Globals) () The itemtype for beetroot seeds"
	},

	"E_ITEM_COMPASS_0": {
		"prefix": "E_ITEM_COMPASS",
		"body": "E_ITEM_COMPASS$0",
		"description": "(Globals) () The itemtype for compass"
	},

	"E_BLOCK_RED_NETHER_BRICK_0": {
		"prefix": "E_BLOCK_RED_NETHER_BRICK",
		"body": "E_BLOCK_RED_NETHER_BRICK$0",
		"description": "(Globals) () The blocktype for red nether brick"
	},

	"E_ITEM_LAVA_BUCKET_0": {
		"prefix": "E_ITEM_LAVA_BUCKET",
		"body": "E_ITEM_LAVA_BUCKET$0",
		"description": "(Globals) () The itemtype for lava bucket"
	},

	"E_BLOCK_REDSTONE_LAMP_OFF_0": {
		"prefix": "E_BLOCK_REDSTONE_LAMP_OFF",
		"body": "E_BLOCK_REDSTONE_LAMP_OFF$0",
		"description": "(Globals) () The blocktype for redstone lamp off"
	},

	"E_ITEM_SPLASH_POTION_0": {
		"prefix": "E_ITEM_SPLASH_POTION",
		"body": "E_ITEM_SPLASH_POTION$0",
		"description": "(Globals) () The itemtype for splash potion"
	},

	"E_BLOCK_COAL_ORE_0": {
		"prefix": "E_BLOCK_COAL_ORE",
		"body": "E_BLOCK_COAL_ORE$0",
		"description": "(Globals) () The blocktype for coal ore"
	},

	"E_BLOCK_LIME_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_LIME_SHULKER_BOX",
		"body": "E_BLOCK_LIME_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for lime shulker box"
	},

	"E_ITEM_FEATHER_0": {
		"prefix": "E_ITEM_FEATHER",
		"body": "E_ITEM_FEATHER$0",
		"description": "(Globals) () The itemtype for feather"
	},

	"E_ITEM_LAST_0": {
		"prefix": "E_ITEM_LAST",
		"body": "E_ITEM_LAST$0",
		"description": "(Globals) () The itemtype for last"
	},

	"E_ITEM_RABBITS_FOOT_0": {
		"prefix": "E_ITEM_RABBITS_FOOT",
		"body": "E_ITEM_RABBITS_FOOT$0",
		"description": "(Globals) () The itemtype for rabbits foot"
	},

	"E_ITEM_ENDER_PEARL_0": {
		"prefix": "E_ITEM_ENDER_PEARL",
		"body": "E_ITEM_ENDER_PEARL$0",
		"description": "(Globals) () The itemtype for ender pearl"
	},

	"E_ITEM_DIAMOND_HELMET_0": {
		"prefix": "E_ITEM_DIAMOND_HELMET",
		"body": "E_ITEM_DIAMOND_HELMET$0",
		"description": "(Globals) () The itemtype for diamond helmet"
	},

	"E_ITEM_GOLDEN_APPLE_0": {
		"prefix": "E_ITEM_GOLDEN_APPLE",
		"body": "E_ITEM_GOLDEN_APPLE$0",
		"description": "(Globals) () The itemtype for golden apple"
	},

	"E_ITEM_IRON_HORSE_ARMOR_0": {
		"prefix": "E_ITEM_IRON_HORSE_ARMOR",
		"body": "E_ITEM_IRON_HORSE_ARMOR$0",
		"description": "(Globals) () The itemtype for iron horse armor"
	},

	"BLOCK_FACE_ZM_0": {
		"prefix": "BLOCK_FACE_ZM",
		"body": "BLOCK_FACE_ZM$0",
		"description": "(Globals) () Interacting with the Z- face of the block"
	},

	"E_BLOCK_NOTE_BLOCK_0": {
		"prefix": "E_BLOCK_NOTE_BLOCK",
		"body": "E_BLOCK_NOTE_BLOCK$0",
		"description": "(Globals) () The blocktype for note block"
	},

	"E_BLOCK_NETHERRACK_0": {
		"prefix": "E_BLOCK_NETHERRACK",
		"body": "E_BLOCK_NETHERRACK$0",
		"description": "(Globals) () The blocktype for netherrack"
	},

	"E_ITEM_IRON_HOE_0": {
		"prefix": "E_ITEM_IRON_HOE",
		"body": "E_ITEM_IRON_HOE$0",
		"description": "(Globals) () The itemtype for iron hoe"
	},

	"E_ITEM_IRON_DOOR_0": {
		"prefix": "E_ITEM_IRON_DOOR",
		"body": "E_ITEM_IRON_DOOR$0",
		"description": "(Globals) () The itemtype for iron door"
	},

	"E_ITEM_IRON_CHESTPLATE_0": {
		"prefix": "E_ITEM_IRON_CHESTPLATE",
		"body": "E_ITEM_IRON_CHESTPLATE$0",
		"description": "(Globals) () The itemtype for iron chestplate"
	},

	"E_ITEM_IRON_BOOTS_0": {
		"prefix": "E_ITEM_IRON_BOOTS",
		"body": "E_ITEM_IRON_BOOTS$0",
		"description": "(Globals) () The itemtype for iron boots"
	},

	"E_ITEM_IRON_0": {
		"prefix": "E_ITEM_IRON",
		"body": "E_ITEM_IRON$0",
		"description": "(Globals) () The itemtype for iron"
	},

	"E_ITEM_GOLD_SWORD_0": {
		"prefix": "E_ITEM_GOLD_SWORD",
		"body": "E_ITEM_GOLD_SWORD$0",
		"description": "(Globals) () The itemtype for gold sword"
	},

	"E_ITEM_GOLD_AXE_0": {
		"prefix": "E_ITEM_GOLD_AXE",
		"body": "E_ITEM_GOLD_AXE$0",
		"description": "(Globals) () The itemtype for gold axe"
	},

	"E_ITEM_EMPTY_0": {
		"prefix": "E_ITEM_EMPTY",
		"body": "E_ITEM_EMPTY$0",
		"description": "(Globals) () The itemtype for empty"
	},

	"E_ITEM_GOLD_PICKAXE_0": {
		"prefix": "E_ITEM_GOLD_PICKAXE",
		"body": "E_ITEM_GOLD_PICKAXE$0",
		"description": "(Globals) () The itemtype for gold pickaxe"
	},

	"E_BLOCK_POTATOES_0": {
		"prefix": "E_BLOCK_POTATOES",
		"body": "E_BLOCK_POTATOES$0",
		"description": "(Globals) () The blocktype for potatoes"
	},

	"E_ITEM_GOLDEN_CARROT_0": {
		"prefix": "E_ITEM_GOLDEN_CARROT",
		"body": "E_ITEM_GOLDEN_CARROT$0",
		"description": "(Globals) () The itemtype for golden carrot"
	},

	"E_ITEM_IRON_NUGGET_0": {
		"prefix": "E_ITEM_IRON_NUGGET",
		"body": "E_ITEM_IRON_NUGGET$0",
		"description": "(Globals) () The itemtype for iron nugget"
	},

	"E_ITEM_GLOWSTONE_DUST_0": {
		"prefix": "E_ITEM_GLOWSTONE_DUST",
		"body": "E_ITEM_GLOWSTONE_DUST$0",
		"description": "(Globals) () The itemtype for glowstone dust"
	},

	"E_BLOCK_PURPLE_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_PURPLE_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_PURPLE_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for purple glazed terracotta"
	},

	"E_ITEM_IRON_LEGGINGS_0": {
		"prefix": "E_ITEM_IRON_LEGGINGS",
		"body": "E_ITEM_IRON_LEGGINGS$0",
		"description": "(Globals) () The itemtype for iron leggings"
	},

	"E_ITEM_WOODEN_DOOR_0": {
		"prefix": "E_ITEM_WOODEN_DOOR",
		"body": "E_ITEM_WOODEN_DOOR$0",
		"description": "(Globals) () The itemtype for wooden door"
	},

	"E_ITEM_SHIELD_0": {
		"prefix": "E_ITEM_SHIELD",
		"body": "E_ITEM_SHIELD$0",
		"description": "(Globals) () The itemtype for shield"
	},

	"E_BLOCK_SPONGE_0": {
		"prefix": "E_BLOCK_SPONGE",
		"body": "E_BLOCK_SPONGE$0",
		"description": "(Globals) () The blocktype for sponge"
	},

	"E_ITEM_LAST_DISC_0": {
		"prefix": "E_ITEM_LAST_DISC",
		"body": "E_ITEM_LAST_DISC$0",
		"description": "(Globals) () The itemtype for last disc"
	},

	"E_ITEM_FAR_DISC_0": {
		"prefix": "E_ITEM_FAR_DISC",
		"body": "E_ITEM_FAR_DISC$0",
		"description": "(Globals) () The itemtype for far disc"
	},

	"E_BLOCK_BED_ZM_0": {
		"prefix": "E_BLOCK_BED_ZM",
		"body": "E_BLOCK_BED_ZM$0",
		"description": "(Globals) () The blocktype for bed zm"
	},

	"E_ITEM_IRON_SWORD_0": {
		"prefix": "E_ITEM_IRON_SWORD",
		"body": "E_ITEM_IRON_SWORD$0",
		"description": "(Globals) () The itemtype for iron sword"
	},

	"E_ITEM_CHAIN_LEGGINGS_0": {
		"prefix": "E_ITEM_CHAIN_LEGGINGS",
		"body": "E_ITEM_CHAIN_LEGGINGS$0",
		"description": "(Globals) () The itemtype for chain leggings"
	},

	"E_ITEM_EMPTY_MAP_0": {
		"prefix": "E_ITEM_EMPTY_MAP",
		"body": "E_ITEM_EMPTY_MAP$0",
		"description": "(Globals) () The itemtype for empty map"
	},

	"E_BLOCK_EMERALD_BLOCK_0": {
		"prefix": "E_BLOCK_EMERALD_BLOCK",
		"body": "E_BLOCK_EMERALD_BLOCK$0",
		"description": "(Globals) () The blocktype for emerald block"
	},

	"E_ITEM_DIAMOND_CHESTPLATE_0": {
		"prefix": "E_ITEM_DIAMOND_CHESTPLATE",
		"body": "E_ITEM_DIAMOND_CHESTPLATE$0",
		"description": "(Globals) () The itemtype for diamond chestplate"
	},

	"esPrimedTNT_0": {
		"prefix": "esPrimedTNT",
		"body": "esPrimedTNT$0",
		"description": "(Globals) () A TNT explosion. The SourceData param is the {{cTNTEntity|TNT entity}} object."
	},

	"caMiddlePaintBegin_0": {
		"prefix": "caMiddlePaintBegin",
		"body": "caMiddlePaintBegin$0",
		"description": "(Globals) () Begining of middle click paint drag action, only valid for creative players"
	},

	"E_ITEM_EGG_0": {
		"prefix": "E_ITEM_EGG",
		"body": "E_ITEM_EGG$0",
		"description": "(Globals) () The itemtype for egg"
	},

	"E_ITEM_DYE_0": {
		"prefix": "E_ITEM_DYE",
		"body": "E_ITEM_DYE$0",
		"description": "(Globals) () The itemtype for dye"
	},

	"E_ITEM_CLAY_BRICK_0": {
		"prefix": "E_ITEM_CLAY_BRICK",
		"body": "E_ITEM_CLAY_BRICK$0",
		"description": "(Globals) () The itemtype for clay brick"
	},

	"E_BLOCK_NETHER_BRICK_FENCE_0": {
		"prefix": "E_BLOCK_NETHER_BRICK_FENCE",
		"body": "E_BLOCK_NETHER_BRICK_FENCE$0",
		"description": "(Globals) () The blocktype for nether brick fence"
	},

	"E_ITEM_IRON_SHOVEL_0": {
		"prefix": "E_ITEM_IRON_SHOVEL",
		"body": "E_ITEM_IRON_SHOVEL$0",
		"description": "(Globals) () The itemtype for iron shovel"
	},

	"E_ITEM_DIAMOND_BOOTS_0": {
		"prefix": "E_ITEM_DIAMOND_BOOTS",
		"body": "E_ITEM_DIAMOND_BOOTS$0",
		"description": "(Globals) () The itemtype for diamond boots"
	},

	"E_ITEM_FIRST_DISC_0": {
		"prefix": "E_ITEM_FIRST_DISC",
		"body": "E_ITEM_FIRST_DISC$0",
		"description": "(Globals) () The itemtype for first disc"
	},

	"E_ITEM_SEEDS_0": {
		"prefix": "E_ITEM_SEEDS",
		"body": "E_ITEM_SEEDS$0",
		"description": "(Globals) () The itemtype for seeds"
	},

	"E_ITEM_COOKED_MUTTON_0": {
		"prefix": "E_ITEM_COOKED_MUTTON",
		"body": "E_ITEM_COOKED_MUTTON$0",
		"description": "(Globals) () The itemtype for cooked mutton"
	},

	"E_BLOCK_ACTIVATOR_RAIL_0": {
		"prefix": "E_BLOCK_ACTIVATOR_RAIL",
		"body": "E_BLOCK_ACTIVATOR_RAIL$0",
		"description": "(Globals) () The blocktype for activator rail"
	},

	"E_ITEM_COOKED_FISH_0": {
		"prefix": "E_ITEM_COOKED_FISH",
		"body": "E_ITEM_COOKED_FISH$0",
		"description": "(Globals) () The itemtype for cooked fish"
	},

	"E_ITEM_COOKED_CHICKEN_0": {
		"prefix": "E_ITEM_COOKED_CHICKEN",
		"body": "E_ITEM_COOKED_CHICKEN$0",
		"description": "(Globals) () The itemtype for cooked chicken"
	},

	"E_ITEM_COAL_0": {
		"prefix": "E_ITEM_COAL",
		"body": "E_ITEM_COAL$0",
		"description": "(Globals) () The itemtype for coal"
	},

	"E_ITEM_DIAMOND_SWORD_0": {
		"prefix": "E_ITEM_DIAMOND_SWORD",
		"body": "E_ITEM_DIAMOND_SWORD$0",
		"description": "(Globals) () The itemtype for diamond sword"
	},

	"E_ITEM_CLAY_0": {
		"prefix": "E_ITEM_CLAY",
		"body": "E_ITEM_CLAY$0",
		"description": "(Globals) () The itemtype for clay"
	},

	"E_ITEM_CHAIN_CHESTPLATE_0": {
		"prefix": "E_ITEM_CHAIN_CHESTPLATE",
		"body": "E_ITEM_CHAIN_CHESTPLATE$0",
		"description": "(Globals) () The itemtype for chain chestplate"
	},

	"BLOCK_FACE_BOTTOM_0": {
		"prefix": "BLOCK_FACE_BOTTOM",
		"body": "BLOCK_FACE_BOTTOM$0",
		"description": "(Globals) () Please use BLOCK_FACE_YM instead. Interacting with the bottom face of the block."
	},

	"E_BLOCK_BLUE_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_BLUE_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_BLUE_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for blue glazed terracotta"
	},

	"E_BLOCK_GREEN_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_GREEN_SHULKER_BOX",
		"body": "E_BLOCK_GREEN_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for green shulker box"
	},

	"E_ITEM_MELON_SEEDS_0": {
		"prefix": "E_ITEM_MELON_SEEDS",
		"body": "E_ITEM_MELON_SEEDS$0",
		"description": "(Globals) () The itemtype for melon seeds"
	},

	"E_BLOCK_RED_ROSE_0": {
		"prefix": "E_BLOCK_RED_ROSE",
		"body": "E_BLOCK_RED_ROSE$0",
		"description": "(Globals) () The blocktype for red rose"
	},

	"E_BLOCK_FLOWER_POT_0": {
		"prefix": "E_BLOCK_FLOWER_POT",
		"body": "E_BLOCK_FLOWER_POT$0",
		"description": "(Globals) () The blocktype for flower pot"
	},

	"E_ITEM_CARROT_ON_STICK_0": {
		"prefix": "E_ITEM_CARROT_ON_STICK",
		"body": "E_ITEM_CARROT_ON_STICK$0",
		"description": "(Globals) () The itemtype for carrot on stick"
	},

	"E_BLOCK_BUTTON_PRESSED_0": {
		"prefix": "E_BLOCK_BUTTON_PRESSED",
		"body": "E_BLOCK_BUTTON_PRESSED$0",
		"description": "(Globals) () The blocktype for button pressed"
	},

	"E_ITEM_CAKE_0": {
		"prefix": "E_ITEM_CAKE",
		"body": "E_ITEM_CAKE$0",
		"description": "(Globals) () The itemtype for cake"
	},

	"E_BLOCK_IRON_TRAPDOOR_0": {
		"prefix": "E_BLOCK_IRON_TRAPDOOR",
		"body": "E_BLOCK_IRON_TRAPDOOR$0",
		"description": "(Globals) () The blocktype for iron trapdoor"
	},

	"E_ITEM_BUCKET_0": {
		"prefix": "E_ITEM_BUCKET",
		"body": "E_ITEM_BUCKET$0",
		"description": "(Globals) () The itemtype for bucket"
	},

	"E_ITEM_BOOK_AND_QUILL_0": {
		"prefix": "E_ITEM_BOOK_AND_QUILL",
		"body": "E_ITEM_BOOK_AND_QUILL$0",
		"description": "(Globals) () The itemtype for book and quill"
	},

	"E_ITEM_BOAT_0": {
		"prefix": "E_ITEM_BOAT",
		"body": "E_ITEM_BOAT$0",
		"description": "(Globals) () The itemtype for boat"
	},

	"E_ITEM_BLOCKS_DISC_0": {
		"prefix": "E_ITEM_BLOCKS_DISC",
		"body": "E_ITEM_BLOCKS_DISC$0",
		"description": "(Globals) () The itemtype for blocks disc"
	},

	"E_ITEM_LEAD_0": {
		"prefix": "E_ITEM_LEAD",
		"body": "E_ITEM_LEAD$0",
		"description": "(Globals) () The itemtype for lead"
	},

	"E_ITEM_BLAZE_ROD_0": {
		"prefix": "E_ITEM_BLAZE_ROD",
		"body": "E_ITEM_BLAZE_ROD$0",
		"description": "(Globals) () The itemtype for blaze rod"
	},

	"E_ITEM_LEATHER_0": {
		"prefix": "E_ITEM_LEATHER",
		"body": "E_ITEM_LEATHER$0",
		"description": "(Globals) () The itemtype for leather"
	},

	"E_BLOCK_COBBLESTONE_STAIRS_0": {
		"prefix": "E_BLOCK_COBBLESTONE_STAIRS",
		"body": "E_BLOCK_COBBLESTONE_STAIRS$0",
		"description": "(Globals) () The blocktype for cobblestone stairs"
	},

	"E_ITEM_BED_0": {
		"prefix": "E_ITEM_BED",
		"body": "E_ITEM_BED$0",
		"description": "(Globals) () The itemtype for bed"
	},

	"E_ITEM_LEATHER_TUNIC_0": {
		"prefix": "E_ITEM_LEATHER_TUNIC",
		"body": "E_ITEM_LEATHER_TUNIC$0",
		"description": "(Globals) () The itemtype for leather tunic"
	},

	"E_ITEM_ARROW_0": {
		"prefix": "E_ITEM_ARROW",
		"body": "E_ITEM_ARROW$0",
		"description": "(Globals) () The itemtype for arrow"
	},

	"E_ITEM_ACACIA_DOOR_0": {
		"prefix": "E_ITEM_ACACIA_DOOR",
		"body": "E_ITEM_ACACIA_DOOR$0",
		"description": "(Globals) () The itemtype for acacia door"
	},

	"E_BLOCK_YELLOW_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_YELLOW_SHULKER_BOX",
		"body": "E_BLOCK_YELLOW_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for yellow shulker box"
	},

	"E_BLOCK_SPRUCE_WOOD_STAIRS_0": {
		"prefix": "E_BLOCK_SPRUCE_WOOD_STAIRS",
		"body": "E_BLOCK_SPRUCE_WOOD_STAIRS$0",
		"description": "(Globals) () The blocktype for spruce wood stairs"
	},

	"E_ITEM_RAW_BEEF_0": {
		"prefix": "E_ITEM_RAW_BEEF",
		"body": "E_ITEM_RAW_BEEF$0",
		"description": "(Globals) () The itemtype for raw beef"
	},

	"E_BLOCK_WOODEN_SLAB_0": {
		"prefix": "E_BLOCK_WOODEN_SLAB",
		"body": "E_BLOCK_WOODEN_SLAB$0",
		"description": "(Globals) () The blocktype for wooden slab"
	},

	"E_BLOCK_WOODEN_PRESSURE_PLATE_0": {
		"prefix": "E_BLOCK_WOODEN_PRESSURE_PLATE",
		"body": "E_BLOCK_WOODEN_PRESSURE_PLATE$0",
		"description": "(Globals) () The blocktype for wooden pressure plate"
	},

	"E_BLOCK_WHITE_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_WHITE_SHULKER_BOX",
		"body": "E_BLOCK_WHITE_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for white shulker box"
	},

	"E_BLOCK_END_STONE_0": {
		"prefix": "E_BLOCK_END_STONE",
		"body": "E_BLOCK_END_STONE$0",
		"description": "(Globals) () The blocktype for end stone"
	},

	"E_BLOCK_STAIRS_UPSIDE_DOWN_0": {
		"prefix": "E_BLOCK_STAIRS_UPSIDE_DOWN",
		"body": "E_BLOCK_STAIRS_UPSIDE_DOWN$0",
		"description": "(Globals) () The blocktype for stairs upside down"
	},

	"E_BLOCK_LEVER_0": {
		"prefix": "E_BLOCK_LEVER",
		"body": "E_BLOCK_LEVER$0",
		"description": "(Globals) () The blocktype for lever"
	},

	"E_META_CONCRETE_PINK_0": {
		"prefix": "E_META_CONCRETE_PINK",
		"body": "E_META_CONCRETE_PINK$0",
		"description": "(Globals) () A flag in the metadata of concete that indicates that the concrete is pink."
	},

	"E_BLOCK_SUGARCANE_0": {
		"prefix": "E_BLOCK_SUGARCANE",
		"body": "E_BLOCK_SUGARCANE$0",
		"description": "(Globals) () The blocktype for sugarcane"
	},

	"E_BLOCK_STRUCTURE_VOID_0": {
		"prefix": "E_BLOCK_STRUCTURE_VOID",
		"body": "E_BLOCK_STRUCTURE_VOID$0",
		"description": "(Globals) () The blocktype for structure void"
	},

	"E_BLOCK_BIG_FLOWER_0": {
		"prefix": "E_BLOCK_BIG_FLOWER",
		"body": "E_BLOCK_BIG_FLOWER$0",
		"description": "(Globals) () The blocktype for big flower"
	},

	"E_BLOCK_STONE_SLAB_0": {
		"prefix": "E_BLOCK_STONE_SLAB",
		"body": "E_BLOCK_STONE_SLAB$0",
		"description": "(Globals) () The blocktype for stone slab"
	},

	"E_BLOCK_JACK_O_LANTERN_0": {
		"prefix": "E_BLOCK_JACK_O_LANTERN",
		"body": "E_BLOCK_JACK_O_LANTERN$0",
		"description": "(Globals) () The blocktype for jack o lantern"
	},

	"E_META_DROPSPENSER_ACTIVATED_0": {
		"prefix": "E_META_DROPSPENSER_ACTIVATED",
		"body": "E_META_DROPSPENSER_ACTIVATED$0",
		"description": "(Globals) () A flag in the metadata of droppers and dispensers that indicates that the dropper or dispenser is currently activated. If this flag is set, the block must be unpowered first and powered again to shoot the next item."
	},

	"E_BLOCK_PUMPKIN_0": {
		"prefix": "E_BLOCK_PUMPKIN",
		"body": "E_BLOCK_PUMPKIN$0",
		"description": "(Globals) () The blocktype for pumpkin"
	},

	"E_BLOCK_STATIONARY_LAVA_0": {
		"prefix": "E_BLOCK_STATIONARY_LAVA",
		"body": "E_BLOCK_STATIONARY_LAVA$0",
		"description": "(Globals) () The blocktype for stationary lava"
	},

	"E_BLOCK_STAIRS_XP_0": {
		"prefix": "E_BLOCK_STAIRS_XP",
		"body": "E_BLOCK_STAIRS_XP$0",
		"description": "(Globals) () The blocktype for stairs xp"
	},

	"E_BLOCK_TERRACOTTA_0": {
		"prefix": "E_BLOCK_TERRACOTTA",
		"body": "E_BLOCK_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for terracotta (synonym for E_BLOCK_STAINED_CLAY)"
	},

	"E_BLOCK_STAINED_GLASS_0": {
		"prefix": "E_BLOCK_STAINED_GLASS",
		"body": "E_BLOCK_STAINED_GLASS$0",
		"description": "(Globals) () The blocktype for stained glass"
	},

	"E_BLOCK_SPRUCE_FENCE_GATE_0": {
		"prefix": "E_BLOCK_SPRUCE_FENCE_GATE",
		"body": "E_BLOCK_SPRUCE_FENCE_GATE$0",
		"description": "(Globals) () The blocktype for spruce fence gate"
	},

	"E_BLOCK_OAK_DOOR_0": {
		"prefix": "E_BLOCK_OAK_DOOR",
		"body": "E_BLOCK_OAK_DOOR$0",
		"description": "(Globals) () The blocktype for oak door"
	},

	"E_ITEM_FERMENTED_SPIDER_EYE_0": {
		"prefix": "E_ITEM_FERMENTED_SPIDER_EYE",
		"body": "E_ITEM_FERMENTED_SPIDER_EYE$0",
		"description": "(Globals) () The itemtype for fermented spider eye"
	},

	"E_BLOCK_SOULSAND_0": {
		"prefix": "E_BLOCK_SOULSAND",
		"body": "E_BLOCK_SOULSAND$0",
		"description": "(Globals) () The blocktype for soulsand"
	},

	"E_BLOCK_SILVERFISH_EGG_0": {
		"prefix": "E_BLOCK_SILVERFISH_EGG",
		"body": "E_BLOCK_SILVERFISH_EGG$0",
		"description": "(Globals) () The blocktype for silverfish egg"
	},

	"E_BLOCK_DIRT_0": {
		"prefix": "E_BLOCK_DIRT",
		"body": "E_BLOCK_DIRT$0",
		"description": "(Globals) () The blocktype for dirt"
	},

	"E_BLOCK_SAND_0": {
		"prefix": "E_BLOCK_SAND",
		"body": "E_BLOCK_SAND$0",
		"description": "(Globals) () The blocktype for sand"
	},

	"E_BLOCK_RED_SANDSTONE_SLAB_0": {
		"prefix": "E_BLOCK_RED_SANDSTONE_SLAB",
		"body": "E_BLOCK_RED_SANDSTONE_SLAB$0",
		"description": "(Globals) () The blocktype for red sandstone slab"
	},

	"E_ITEM_BIRCH_BOAT_0": {
		"prefix": "E_ITEM_BIRCH_BOAT",
		"body": "E_ITEM_BIRCH_BOAT$0",
		"description": "(Globals) () The itemtype for birch boat"
	},

	"caShiftLeftClick_0": {
		"prefix": "caShiftLeftClick",
		"body": "caShiftLeftClick$0",
		"description": "(Globals) () Shift + left click on a slot"
	},

	"E_BLOCK_RED_MUSHROOM_0": {
		"prefix": "E_BLOCK_RED_MUSHROOM",
		"body": "E_BLOCK_RED_MUSHROOM$0",
		"description": "(Globals) () The blocktype for red mushroom"
	},

	"E_META_DROPSPENSER_FACING_ZM_0": {
		"prefix": "E_META_DROPSPENSER_FACING_ZM",
		"body": "E_META_DROPSPENSER_FACING_ZM$0",
		"description": "(Globals) () A flag in the metadata of droppers and dispensers that indicates that the dropper or dispenser is looking in the negative Z direction."
	},

	"caLeftPaintEnd_0": {
		"prefix": "caLeftPaintEnd",
		"body": "caLeftPaintEnd$0",
		"description": "(Globals) () End of left click paint drag action"
	},

	"E_BLOCK_NETHER_WART_BLOCK_0": {
		"prefix": "E_BLOCK_NETHER_WART_BLOCK",
		"body": "E_BLOCK_NETHER_WART_BLOCK$0",
		"description": "(Globals) () The blocktype for nether wart block"
	},

	"E_BLOCK_REDSTONE_TORCH_ON_0": {
		"prefix": "E_BLOCK_REDSTONE_TORCH_ON",
		"body": "E_BLOCK_REDSTONE_TORCH_ON$0",
		"description": "(Globals) () The blocktype for redstone torch on"
	},

	"E_BLOCK_REDSTONE_REPEATER_ON_0": {
		"prefix": "E_BLOCK_REDSTONE_REPEATER_ON",
		"body": "E_BLOCK_REDSTONE_REPEATER_ON$0",
		"description": "(Globals) () The blocktype for redstone repeater on"
	},

	"E_BLOCK_REDSTONE_ORE_0": {
		"prefix": "E_BLOCK_REDSTONE_ORE",
		"body": "E_BLOCK_REDSTONE_ORE$0",
		"description": "(Globals) () The blocktype for redstone ore"
	},

	"E_BLOCK_JUNGLE_FENCE_GATE_0": {
		"prefix": "E_BLOCK_JUNGLE_FENCE_GATE",
		"body": "E_BLOCK_JUNGLE_FENCE_GATE$0",
		"description": "(Globals) () The blocktype for jungle fence gate"
	},

	"E_BLOCK_ORANGE_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_ORANGE_SHULKER_BOX",
		"body": "E_BLOCK_ORANGE_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for orange shulker box"
	},

	"E_BLOCK_RAIL_0": {
		"prefix": "E_BLOCK_RAIL",
		"body": "E_BLOCK_RAIL$0",
		"description": "(Globals) () The blocktype for rail"
	},

	"E_BLOCK_SAPLING_0": {
		"prefix": "E_BLOCK_SAPLING",
		"body": "E_BLOCK_SAPLING$0",
		"description": "(Globals) () The blocktype for sapling"
	},

	"E_BLOCK_PURPUR_PILLAR_0": {
		"prefix": "E_BLOCK_PURPUR_PILLAR",
		"body": "E_BLOCK_PURPUR_PILLAR$0",
		"description": "(Globals) () The blocktype for purpur pillar"
	},

	"E_ITEM_GOLD_BOOTS_0": {
		"prefix": "E_ITEM_GOLD_BOOTS",
		"body": "E_ITEM_GOLD_BOOTS$0",
		"description": "(Globals) () The itemtype for gold boots"
	},

	"E_BLOCK_PLANKS_0": {
		"prefix": "E_BLOCK_PLANKS",
		"body": "E_BLOCK_PLANKS$0",
		"description": "(Globals) () The blocktype for planks"
	},

	"E_BLOCK_LAPIS_BLOCK_0": {
		"prefix": "E_BLOCK_LAPIS_BLOCK",
		"body": "E_BLOCK_LAPIS_BLOCK$0",
		"description": "(Globals) () The blocktype for lapis block"
	},

	"E_BLOCK_END_PORTAL_0": {
		"prefix": "E_BLOCK_END_PORTAL",
		"body": "E_BLOCK_END_PORTAL$0",
		"description": "(Globals) () The blocktype for end portal"
	},

	"E_BLOCK_OAK_FENCE_GATE_0": {
		"prefix": "E_BLOCK_OAK_FENCE_GATE",
		"body": "E_BLOCK_OAK_FENCE_GATE$0",
		"description": "(Globals) () The blocktype for oak fence gate"
	},

	"E_BLOCK_DARK_OAK_DOOR_0": {
		"prefix": "E_BLOCK_DARK_OAK_DOOR",
		"body": "E_BLOCK_DARK_OAK_DOOR$0",
		"description": "(Globals) () The blocktype for dark oak door"
	},

	"E_BLOCK_MYCELIUM_0": {
		"prefix": "E_BLOCK_MYCELIUM",
		"body": "E_BLOCK_MYCELIUM$0",
		"description": "(Globals) () The blocktype for mycelium"
	},

	"E_BLOCK_BUTTON_XM_0": {
		"prefix": "E_BLOCK_BUTTON_XM",
		"body": "E_BLOCK_BUTTON_XM$0",
		"description": "(Globals) () The blocktype for button xm"
	},

	"BLOCK_FACE_MAX_0": {
		"prefix": "BLOCK_FACE_MAX",
		"body": "BLOCK_FACE_MAX$0",
		"description": "(Globals) () Used for range checking - highest legal value for an {{Globals#eBlockFace|eBlockFace}}"
	},

	"E_BLOCK_LAVA_0": {
		"prefix": "E_BLOCK_LAVA",
		"body": "E_BLOCK_LAVA$0",
		"description": "(Globals) () The blocktype for lava"
	},

	"E_BLOCK_DANDELION_0": {
		"prefix": "E_BLOCK_DANDELION",
		"body": "E_BLOCK_DANDELION$0",
		"description": "(Globals) () The blocktype for dandelion"
	},

	"E_BLOCK_LIGHT_BLUE_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_LIGHT_BLUE_SHULKER_BOX",
		"body": "E_BLOCK_LIGHT_BLUE_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for light blue shulker box"
	},

	"E_BLOCK_LIGHT_BLUE_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_LIGHT_BLUE_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_LIGHT_BLUE_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for light blue glazed terracotta"
	},

	"E_BLOCK_MAGENTA_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_MAGENTA_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_MAGENTA_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for magenta glazed terracotta"
	},

	"E_BLOCK_OBSIDIAN_0": {
		"prefix": "E_BLOCK_OBSIDIAN",
		"body": "E_BLOCK_OBSIDIAN$0",
		"description": "(Globals) () The blocktype for obsidian"
	},

	"E_BLOCK_STONE_BRICK_STAIRS_0": {
		"prefix": "E_BLOCK_STONE_BRICK_STAIRS",
		"body": "E_BLOCK_STONE_BRICK_STAIRS$0",
		"description": "(Globals) () The blocktype for stone brick stairs"
	},

	"E_BLOCK_ICE_0": {
		"prefix": "E_BLOCK_ICE",
		"body": "E_BLOCK_ICE$0",
		"description": "(Globals) () The blocktype for ice"
	},

	"E_BLOCK_TRIPWIRE_HOOK_0": {
		"prefix": "E_BLOCK_TRIPWIRE_HOOK",
		"body": "E_BLOCK_TRIPWIRE_HOOK$0",
		"description": "(Globals) () The blocktype for tripwire hook"
	},

	"E_BLOCK_END_BRICKS_0": {
		"prefix": "E_BLOCK_END_BRICKS",
		"body": "E_BLOCK_END_BRICKS$0",
		"description": "(Globals) () The blocktype for end bricks"
	},

	"E_BLOCK_QUARTZ_BLOCK_0": {
		"prefix": "E_BLOCK_QUARTZ_BLOCK",
		"body": "E_BLOCK_QUARTZ_BLOCK$0",
		"description": "(Globals) () The blocktype for quartz block"
	},

	"E_BLOCK_DIAMOND_ORE_0": {
		"prefix": "E_BLOCK_DIAMOND_ORE",
		"body": "E_BLOCK_DIAMOND_ORE$0",
		"description": "(Globals) () The blocktype for diamond ore"
	},

	"E_BLOCK_CHORUS_PLANT_0": {
		"prefix": "E_BLOCK_CHORUS_PLANT",
		"body": "E_BLOCK_CHORUS_PLANT$0",
		"description": "(Globals) () The blocktype for chorus plant"
	},

	"E_BLOCK_YELLOW_GLAZED_TERRACOTTA_0": {
		"prefix": "E_BLOCK_YELLOW_GLAZED_TERRACOTTA",
		"body": "E_BLOCK_YELLOW_GLAZED_TERRACOTTA$0",
		"description": "(Globals) () The blocktype for yellow glazed terracotta"
	},

	"E_BLOCK_BEACON_0": {
		"prefix": "E_BLOCK_BEACON",
		"body": "E_BLOCK_BEACON$0",
		"description": "(Globals) () The blocktype for beacon"
	},

	"caMiddlePaintEnd_0": {
		"prefix": "caMiddlePaintEnd",
		"body": "caMiddlePaintEnd$0",
		"description": "(Globals) () End of middle click paint drag action, only valid for creative players"
	},

	"E_BLOCK_MAGENTA_SHULKER_BOX_0": {
		"prefix": "E_BLOCK_MAGENTA_SHULKER_BOX",
		"body": "E_BLOCK_MAGENTA_SHULKER_BOX$0",
		"description": "(Globals) () The blocktype for magenta shulker box"
	},

	"IsBiomeOcean_0": {
		"prefix": "IsBiomeOcean",
		"body": "IsBiomeOcean(${1:Biome EMCSBiome})$0",
		"description": "(Globals) (boolean) Returns true if the biome is an ocean biome."
	},

	"BiomeToString_0": {
		"prefix": "BiomeToString",
		"body": "BiomeToString(${1:Biome EMCSBiome})$0",
		"description": "(Globals) (string) Translates biome enum into biome string. Returns empty string on failure (unknown biome)."
	},

	"RotateBlockFaceCCW_0": {
		"prefix": "RotateBlockFaceCCW",
		"body": "RotateBlockFaceCCW(${1:eBlockFace eBlockFace})$0",
		"description": "(Globals) (eBlockFace) Returns the {{Globals#BlockFaces|eBlockFace}} that corresponds to the given {{Globals#BlockFaces|eBlockFace}} after rotating it around the Y axis 90 degrees counter-clockwise."
	},

	"StringSplit_0": {
		"prefix": "StringSplit",
		"body": "StringSplit(${1:Input string}, ${2:SeperatorsString string})$0",
		"description": "(Globals) (table) Seperates string into multiple by splitting every time any of the characters in SeperatorsString is encountered. Returns and array-table of strings."
	},

	"NoCaseCompare_0": {
		"prefix": "NoCaseCompare",
		"body": "NoCaseCompare(${1:Value1 string}, ${2:Value2 string})$0",
		"description": "(Globals) (number) Case-insensitive string comparison; returns 0 if the strings are the same, -1 if Value1 is smaller and 1 if Value2 is smaller"
	},

	"BlockStringToType_0": {
		"prefix": "BlockStringToType",
		"body": "BlockStringToType(${1:BlockTypeString string})$0",
		"description": "(Globals) (BLOCKTYPE numbe) Returns the block type parsed from the given string"
	},

	"GetTime_0": {
		"prefix": "GetTime",
		"body": "GetTime()$0",
		"description": "(Globals) (number) Returns the current OS time, as a unix time stamp (number of seconds since Jan 1, 1970)"
	},

	"IsBiomeCold_0": {
		"prefix": "IsBiomeCold",
		"body": "IsBiomeCold(${1:Biome EMCSBiome})$0",
		"description": "(Globals) (boolean) Returns true if the biome is cold (has snow and snowfall at higher elevations but not at regular heights). Doesn't report Very Cold biomes, use IsBiomeVeryCold() for those."
	},

	"RotateBlockFaceCW_0": {
		"prefix": "RotateBlockFaceCW",
		"body": "RotateBlockFaceCW(${1:eBlockFace eBlockFace})$0",
		"description": "(Globals) (eBlockFace) Returns the {{Globals#BlockFaces|eBlockFace}} that corresponds to the given {{Globals#BlockFaces|eBlockFace}} after rotating it around the Y axis 90 degrees clockwise."
	},

	"ItemTypeToString_0": {
		"prefix": "ItemTypeToString",
		"body": "ItemTypeToString(${1:ItemType number})$0",
		"description": "(Globals) (string) Returns the string representation of ItemType "
	},

	"ItemToString_0": {
		"prefix": "ItemToString",
		"body": "ItemToString(${1:cItem cItem})$0",
		"description": "(Globals) (string) Returns the string representation of the item type"
	},

	"ReverseBlockFace_0": {
		"prefix": "ReverseBlockFace",
		"body": "ReverseBlockFace(${1:BlockFace eBlockFace})$0",
		"description": "(Globals) (eBlockFace) Returns the reversed {{Globals#eBlockFace|eBlockFace}}."
	},

	"LOGERROR_0": {
		"prefix": "LOGERROR",
		"body": "LOGERROR(${1:Message string})$0",
		"description": "(Globals) () Logs a text into the server console and logfile using 'error' severity (black text on red background)"
	},

	"LOGERROR_1": {
		"prefix": "LOGERROR",
		"body": "LOGERROR(${1:Message cCompositeChat})$0",
		"description": "(Globals) () Logs the {{cCompositeChat}}'s human-readable text into the server console and logfile using 'error' severity (black text on red background)"
	},

	"LOGWARN_0": {
		"prefix": "LOGWARN",
		"body": "LOGWARN(${1:Message string})$0",
		"description": "(Globals) () Logs a text into the server console and logfile using 'warning' severity (red text); OBSOLETE, use LOGWARNING() instead"
	},

	"LOGWARN_1": {
		"prefix": "LOGWARN",
		"body": "LOGWARN(${1:Message cCompositeChat})$0",
		"description": "(Globals) () Logs the {{cCompositeChat}}'s human-readable text into the server console and logfile using 'warning' severity (red text); OBSOLETE, use LOGWARNING() instead"
	},

	"Base64Encode_0": {
		"prefix": "Base64Encode",
		"body": "Base64Encode(${1:Input string})$0",
		"description": "(Globals) (string) Encodes a string into Base64."
	},

	"BlockFaceToString_0": {
		"prefix": "BlockFaceToString",
		"body": "BlockFaceToString(${1:eBlockFace eBlockFace})$0",
		"description": "(Globals) (string) Returns the string representation of the {{Globals#BlockFaces|eBlockFace}} constant. Uses the axis-direction-based names, such as BLOCK_FACE_XP."
	},

	"IsValidBlock_0": {
		"prefix": "IsValidBlock",
		"body": "IsValidBlock(${1:BlockType number})$0",
		"description": "(Globals) (boolean) Returns true if BlockType is a known block type"
	},

	"ItemToFullString_0": {
		"prefix": "ItemToFullString",
		"body": "ItemToFullString(${1:cItem cItem})$0",
		"description": "(Globals) (string) Returns the string representation of the item, in the format 'ItemTypeText:ItemDamage * Count'"
	},

	"DimensionToString_0": {
		"prefix": "DimensionToString",
		"body": "DimensionToString(${1:Dimension eDimension})$0",
		"description": "(Globals) (string) Converts an {{Globals#eDimension|eDimension}} to a string value. Returns Overworld on failure."
	},

	"GetSnowStartHeight_0": {
		"prefix": "GetSnowStartHeight",
		"body": "GetSnowStartHeight(${1:Biome EMCSBiome})$0",
		"description": "(Globals) (number) Returns the height at which snow will start falling in the {{Globals#EMCSBiome|Biome}}. Check functions IsBiomeCold and IsBiomeVeryCold for more informations."
	},

	"StripColorCodes_0": {
		"prefix": "StripColorCodes",
		"body": "StripColorCodes(${1:Input string})$0",
		"description": "(Globals) (string) Removes all control codes used by MC for colors and styles"
	},

	"IsBiomeNoDownfall_0": {
		"prefix": "IsBiomeNoDownfall",
		"body": "IsBiomeNoDownfall(${1:Biome EMCSBiome})$0",
		"description": "(Globals) (boolean) Returns true if the biome is 'dry', that is, there is no precipitation during rains and storms."
	},

	"TrimString_0": {
		"prefix": "TrimString",
		"body": "TrimString(${1:Input string})$0",
		"description": "(Globals) (string) Removes whitespace at both ends of the string"
	},

	"IsBiomeVeryCold_0": {
		"prefix": "IsBiomeVeryCold",
		"body": "IsBiomeVeryCold(${1:Biome EMCSBiome})$0",
		"description": "(Globals) (boolean) Returns true if the biome is very cold (has snow on ground everywhere, turns top water to ice, has snowfall instead of rain everywhere). Doesn't report mildly cold biomes (where it snows above certain elevation), use IsBiomeCold() for those."
	},

	"MirrorBlockFaceY_0": {
		"prefix": "MirrorBlockFaceY",
		"body": "MirrorBlockFaceY(${1:eBlockFace eBlockFace})$0",
		"description": "(Globals) (eBlockFace) Returns the {{Globals#BlockFaces|eBlockFace}} that corresponds to the given {{Globals#BlockFaces|eBlockFace}} after mirroring it around the Y axis (or rotating 180 degrees around it)."
	},

	"DamageTypeToString_0": {
		"prefix": "DamageTypeToString",
		"body": "DamageTypeToString(${1:DamageType eDamageType})$0",
		"description": "(Globals) (string) Converts the {{Globals#eDamageType|DamageType}} to a string representation "
	},

	"NormalizeAngleDegrees_0": {
		"prefix": "NormalizeAngleDegrees",
		"body": "NormalizeAngleDegrees(${1:AngleDegrees number})$0",
		"description": "(Globals) (AngleDegrees numbe) Returns the angle, wrapped into the [-180, +180) range."
	},

	"GetIniItemSet_0": {
		"prefix": "GetIniItemSet",
		"body": "GetIniItemSet(${1:IniFile cIniFile}, ${2:SectionName string}, ${3:KeyName string}, ${4:DefaultValue string})$0",
		"description": "(Globals) (cItem) Returns the item that has been read from the specified INI file value. If the value is not present in the INI file, the DefaultValue is stored in the file and parsed as the result. Returns empty item if the value cannot be parsed. "
	},

	"StringToItem_0": {
		"prefix": "StringToItem",
		"body": "StringToItem(${1:StringToParse string}, ${2:DestItem cItem})$0",
		"description": "(Globals) (boolean) Parses the item specification in the given string and sets it into DestItem; returns true if successful"
	},

	"Base64Decode_0": {
		"prefix": "Base64Decode",
		"body": "Base64Decode(${1:Input string})$0",
		"description": "(Globals) (string) Decodes a Base64-encoded string into the raw data."
	},

	"Clamp_3": {
		"prefix": "Clamp",
		"body": "Clamp(${1:Number number}, ${2:Min number}, ${3:Max number})$0",
		"description": "(Globals) (number) Clamp the number to the specified range."
	},

	"StringSplitAndTrim_0": {
		"prefix": "StringSplitAndTrim",
		"body": "StringSplitAndTrim(${1:Input string}, ${2:SeperatorsString string})$0",
		"description": "(Globals) (table) Seperates string into multiple by splitting every time any of the characters in SeperatorsString is encountered. Each of the separate strings is trimmed (whitespace removed from the beginning and end of the string). Returns an array-table of strings."
	},

	"StringToDimension_0": {
		"prefix": "StringToDimension",
		"body": "StringToDimension(${1:Input string})$0",
		"description": "(Globals) (Dimension eDimensio) Converts a string representation to a {{Globals#eDimension|eDimension}} enumerated value. Returns dimNotSet if the input is not a recognized dimension."
	},

	"StringToDamageType_0": {
		"prefix": "StringToDamageType",
		"body": "StringToDamageType(${1:Input string})$0",
		"description": "(Globals) (DamageType eDamageTyp) Converts a string representation to a {{Globals#DamageType|DamageType}} enumerated value. Returns -1 if the inupt is not a recognized damage type."
	},

	"StringToBiome_0": {
		"prefix": "StringToBiome",
		"body": "StringToBiome(${1:Input string})$0",
		"description": "(Globals) (BiomeType EMCSBiom) Converts a string representation to a {{Globals#BiomeTypes|BiomeType}} enumerated value. Returns biInvalidBiome if the input is not a recognized biome."
	},

	"StringSplitWithQuotes_0": {
		"prefix": "StringSplitWithQuotes",
		"body": "StringSplitWithQuotes(${1:Input string}, ${2:SeperatorsString string})$0",
		"description": "(Globals) (table) Seperates string into multiple by splitting every time any of the characters in SeperatorsString is encountered. Whitespace wrapped with single or double quotes will be ignored. Returns an array-table of strings."
	},

	"ReplaceString_0": {
		"prefix": "ReplaceString",
		"body": "ReplaceString(${1:full-string string}, ${2:to-be-replaced-string string}, ${3:to-replace-string string})$0",
		"description": "(Globals) (string) Replaces *each* occurence of to-be-replaced-string in full-string with to-replace-string"
	},

	"StringToMobType_1": {
		"prefix": "StringToMobType",
		"body": "StringToMobType(${1:MobTypeString string})$0",
		"description": "(Globals) (MobType eMonsterTyp) (<b>DEPRECATED!</b>) Please use cMonster:StringToMobType(). Converts a string representation to an {{Globals#eMonsterType|eMonsterType}} enumerated value"
	},

	"LOGWARNING_0": {
		"prefix": "LOGWARNING",
		"body": "LOGWARNING(${1:Message string})$0",
		"description": "(Globals) () Logs a text into the server console and logfile using 'warning' severity (red text)"
	},

	"LOGWARNING_1": {
		"prefix": "LOGWARNING",
		"body": "LOGWARNING(${1:Message cCompositeChat})$0",
		"description": "(Globals) () Logs the {{cCompositeChat}}'s human-readable text into the server console and logfile using 'warning' severity (red text)"
	},

	"ClickActionToString_0": {
		"prefix": "ClickActionToString",
		"body": "ClickActionToString(${1:ClickAction eClickAction})$0",
		"description": "(Globals) (string) Returns a string description of the ClickAction enumerated value"
	},

	"md5_1": {
		"prefix": "md5",
		"body": "md5(${1:Data string})$0",
		"description": "(Globals) (string) <b>OBSOLETE</b>, use the {{cCryptoHash}} functions instead.<br>Converts a string to a raw binary md5 hash."
	},

	"LOGINFO_0": {
		"prefix": "LOGINFO",
		"body": "LOGINFO(${1:Message string})$0",
		"description": "(Globals) () Logs a text into the server console and logfile using 'info' severity (yellow text)"
	},

	"LOGINFO_1": {
		"prefix": "LOGINFO",
		"body": "LOGINFO(${1:Message cCompositeChat})$0",
		"description": "(Globals) () Logs the {{cCompositeChat}}'s human-readable text into the server console and logfile using 'info' severity (yellow text)"
	},

	"AddFaceDirection_0": {
		"prefix": "AddFaceDirection",
		"body": "AddFaceDirection(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:BlockFace eBlockFace}, ${5:IsInverse boolean})$0",
		"description": "(Globals) (BlockX number, BlockY number, BlockZ numbe) Returns the coords of a block adjacent to the specified block through the specified {{Globals#BlockFaces|face}}"
	},

	"EscapeString_0": {
		"prefix": "EscapeString",
		"body": "EscapeString(${1:Input string})$0",
		"description": "(Globals) (string) Returns a copy of the string with all quotes and backslashes escaped by a backslash"
	},

	"IsValidItem_0": {
		"prefix": "IsValidItem",
		"body": "IsValidItem(${1:ItemType number})$0",
		"description": "(Globals) (boolean) Returns true if ItemType is a known item type"
	},

	"LOG_0": {
		"prefix": "LOG",
		"body": "LOG(${1:Message string})$0",
		"description": "(Globals) () Logs a text into the server console and logfile using 'normal' severity (gray text)"
	},

	"LOG_1": {
		"prefix": "LOG",
		"body": "LOG(${1:Message cCompositeChat})$0",
		"description": "(Globals) () Logs the {{cCompositeChat}}'s human-readable text into the server console. The severity is converted from the CompositeChat's MessageType."
	},

	"SmokeDirection_0": {
		"prefix": "SmokeDirection",
		"body": "SmokeDirection$0",
		"description": "(SmokeDirection) () The Scary Class."
	},

	"NORTH_WEST_0": {
		"prefix": "NORTH_WEST",
		"body": "NORTH_WEST$0",
		"description": "(SmokeDirection) () Smoke drifts west"
	},

	"CENTRE_0": {
		"prefix": "CENTRE",
		"body": "CENTRE$0",
		"description": "(SmokeDirection) () Smoke does not drift"
	},

	"SOUTH_WEST_0": {
		"prefix": "SOUTH_WEST",
		"body": "SOUTH_WEST$0",
		"description": "(SmokeDirection) () Smoke drifts south-west"
	},

	"EAST_0": {
		"prefix": "EAST",
		"body": "EAST$0",
		"description": "(SmokeDirection) () Smoke drifts east"
	},

	"SOUTH_EAST_0": {
		"prefix": "SOUTH_EAST",
		"body": "SOUTH_EAST$0",
		"description": "(SmokeDirection) () Smoke drifts south-east"
	},

	"NORTH_0": {
		"prefix": "NORTH",
		"body": "NORTH$0",
		"description": "(SmokeDirection) () Smoke drifts north"
	},

	"NORTH_EAST_0": {
		"prefix": "NORTH_EAST",
		"body": "NORTH_EAST$0",
		"description": "(SmokeDirection) () Smoke drifts north-east"
	},

	"SOUTH_0": {
		"prefix": "SOUTH",
		"body": "SOUTH$0",
		"description": "(SmokeDirection) () Smoke drifts south"
	},

	"WEST_0": {
		"prefix": "WEST",
		"body": "WEST$0",
		"description": "(SmokeDirection) () Smoke drifts west"
	},

	"cCraftingRecipe_0": {
		"prefix": "cCraftingRecipe",
		"body": "cCraftingRecipe$0",
		"description": "(cCraftingRecipe) () The Scary Class."
	},

	"Clear_3": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cCraftingRecipe) () Clears the entire recipe, both ingredients and results"
	},

	"SetResult_0": {
		"prefix": "SetResult",
		"body": "SetResult(${1:cItem cItem})$0",
		"description": "(cCraftingRecipe) () Sets the result item"
	},

	"SetResult_1": {
		"prefix": "SetResult",
		"body": "SetResult(${1:ItemType number}, ${2:ItemCount number}, ${3:ItemDamage number})$0",
		"description": "(cCraftingRecipe) () Sets the result item"
	},

	"GetIngredientsWidth_0": {
		"prefix": "GetIngredientsWidth",
		"body": "GetIngredientsWidth()$0",
		"description": "(cCraftingRecipe) (number) Returns the width of the ingredients' grid"
	},

	"GetResult_0": {
		"prefix": "GetResult",
		"body": "GetResult()$0",
		"description": "(cCraftingRecipe) (cItem) Returns the result of the recipe"
	},

	"Dump_0": {
		"prefix": "Dump",
		"body": "Dump()$0",
		"description": "(cCraftingRecipe) () DEBUG build: dumps ingredients and result into server log. RELEASE build: no action"
	},

	"GetIngredient_0": {
		"prefix": "GetIngredient",
		"body": "GetIngredient(${1:x number}, ${2:y number})$0",
		"description": "(cCraftingRecipe) (cItem) Returns the ingredient stored in the recipe at the specified coords"
	},

	"ConsumeIngredients_0": {
		"prefix": "ConsumeIngredients",
		"body": "ConsumeIngredients(${1:CraftingGrid cCraftingGrid})$0",
		"description": "(cCraftingRecipe) () Consumes ingredients specified in the given {{cCraftingGrid|cCraftingGrid}} class"
	},

	"GetIngredientsHeight_0": {
		"prefix": "GetIngredientsHeight",
		"body": "GetIngredientsHeight()$0",
		"description": "(cCraftingRecipe) (number) Returns the height of the ingredients' grid"
	},

	"SetIngredient_0": {
		"prefix": "SetIngredient",
		"body": "SetIngredient(${1:x number}, ${2:y number}, ${3:cItem cItem})$0",
		"description": "(cCraftingRecipe) () Sets the ingredient at the specified coords"
	},

	"SetIngredient_1": {
		"prefix": "SetIngredient",
		"body": "SetIngredient(${1:x number}, ${2:y number}, ${3:ItemType number}, ${4:ItemCount number}, ${5:ItemDamage number})$0",
		"description": "(cCraftingRecipe) () Sets the ingredient at the specified coords"
	},

	"cPlugin_0": {
		"prefix": "cPlugin",
		"body": "cPlugin$0",
		"description": "(cPlugin) () The Scary Class."
	},

	"GetLocalDirectory_0": {
		"prefix": "GetLocalDirectory",
		"body": "GetLocalDirectory()$0",
		"description": "(cPlugin) () <b>OBSOLETE</b>, use GetLocalFolder instead."
	},

	"GetFolderName_0": {
		"prefix": "GetFolderName",
		"body": "GetFolderName()$0",
		"description": "(cPlugin) (string) Returns the name of the folder where the plugin's files are. (APIDump)"
	},

	"GetLoadError_0": {
		"prefix": "GetLoadError",
		"body": "GetLoadError()$0",
		"description": "(cPlugin) (string) If the plugin failed to load, returns the error message for the failure."
	},

	"GetLocalFolder_0": {
		"prefix": "GetLocalFolder",
		"body": "GetLocalFolder()$0",
		"description": "(cPlugin) (string) Returns the path where the plugin's files are. (Plugins/APIDump)"
	},

	"GetName_4": {
		"prefix": "GetName",
		"body": "GetName()$0",
		"description": "(cPlugin) (string) Returns the name of the plugin."
	},

	"GetVersion_0": {
		"prefix": "GetVersion",
		"body": "GetVersion()$0",
		"description": "(cPlugin) (number) Returns the version of the plugin."
	},

	"SetName_0": {
		"prefix": "SetName",
		"body": "SetName(${1:PluginApiName string})$0",
		"description": "(cPlugin) () Sets the API name of the Plugin that is used by {{cPluginManager}}:CallPlugin() to identify the plugin."
	},

	"SetVersion_0": {
		"prefix": "SetVersion",
		"body": "SetVersion(${1:PluginApiVersion number})$0",
		"description": "(cPlugin) () Sets the API version of the plugin. Currently unused."
	},

	"GetDirectory_0": {
		"prefix": "GetDirectory",
		"body": "GetDirectory()$0",
		"description": "(cPlugin) (string) <b>OBSOLETE</b>, use GetFolderName() instead!"
	},

	"IsLoaded_0": {
		"prefix": "IsLoaded",
		"body": "IsLoaded()$0",
		"description": "(cPlugin) (boolean) "
	},

	"GetStatus_0": {
		"prefix": "GetStatus",
		"body": "GetStatus()$0",
		"description": "(cPlugin) (PluginStatus cPluginManager#ePluginStatu) Returns the status of the plugin (loaded, disabled, unloaded, error, not found)"
	},

	"EffectID_0": {
		"prefix": "EffectID",
		"body": "EffectID$0",
		"description": "(EffectID) () The Scary Class."
	},

	"SFX_MOB_ENDERDRAGON_SHOOT_0": {
		"prefix": "SFX_MOB_ENDERDRAGON_SHOOT",
		"body": "SFX_MOB_ENDERDRAGON_SHOOT$0",
		"description": "(EffectID) () Sound of the enderdragon shooting"
	},

	"SFX_MOB_WITHER_SPAWN_0": {
		"prefix": "SFX_MOB_WITHER_SPAWN",
		"body": "SFX_MOB_WITHER_SPAWN$0",
		"description": "(EffectID) () Sound of a wither spawning"
	},

	"SFX_RANDOM_DISPENSER_DISPENSE_FAIL_0": {
		"prefix": "SFX_RANDOM_DISPENSER_DISPENSE_FAIL",
		"body": "SFX_RANDOM_DISPENSER_DISPENSE_FAIL$0",
		"description": "(EffectID) () Sound of a droper/dispenser activated without items"
	},

	"SFX_MOB_ZOMBIE_UNFECT_0": {
		"prefix": "SFX_MOB_ZOMBIE_UNFECT",
		"body": "SFX_MOB_ZOMBIE_UNFECT$0",
		"description": "(EffectID) () Sound of a zombie villager converting to villager"
	},

	"SFX_MOB_ZOMBIE_METAL_0": {
		"prefix": "SFX_MOB_ZOMBIE_METAL",
		"body": "SFX_MOB_ZOMBIE_METAL$0",
		"description": "(EffectID) () Sound of a zombie attacking a metal door"
	},

	"SFX_RANDOM_IRON_TRAPDOOR_CLOSE_0": {
		"prefix": "SFX_RANDOM_IRON_TRAPDOOR_CLOSE",
		"body": "SFX_RANDOM_IRON_TRAPDOOR_CLOSE$0",
		"description": "(EffectID) () Sound of an iron trapdoor closing"
	},

	"SFX_RANDOM_WOODEN_DOOR_CLOSE_0": {
		"prefix": "SFX_RANDOM_WOODEN_DOOR_CLOSE",
		"body": "SFX_RANDOM_WOODEN_DOOR_CLOSE$0",
		"description": "(EffectID) () Sound of a wooden door closing"
	},

	"SFX_RANDOM_BREWING_STAND_BREW_0": {
		"prefix": "SFX_RANDOM_BREWING_STAND_BREW",
		"body": "SFX_RANDOM_BREWING_STAND_BREW$0",
		"description": "(EffectID) () Sound of an active brewing stand"
	},

	"SFX_MOB_ZOMBIE_INFECT_0": {
		"prefix": "SFX_MOB_ZOMBIE_INFECT",
		"body": "SFX_MOB_ZOMBIE_INFECT$0",
		"description": "(EffectID) () Sound of a zombie infecting a villager"
	},

	"SFX_RANDOM_ANVIL_USE_0": {
		"prefix": "SFX_RANDOM_ANVIL_USE",
		"body": "SFX_RANDOM_ANVIL_USE$0",
		"description": "(EffectID) () Sound of using an anvil"
	},

	"SFX_MOB_WITHER_BREAK_BLOCK_0": {
		"prefix": "SFX_MOB_WITHER_BREAK_BLOCK",
		"body": "SFX_MOB_WITHER_BREAK_BLOCK$0",
		"description": "(EffectID) () Sound of a wither breaking blocks"
	},

	"SFX_RANDOM_IRON_DOOR_OPEN_0": {
		"prefix": "SFX_RANDOM_IRON_DOOR_OPEN",
		"body": "SFX_RANDOM_IRON_DOOR_OPEN$0",
		"description": "(EffectID) () Sound of an iron door opening"
	},

	"PARTICLE_SPLASH_POTION_0": {
		"prefix": "PARTICLE_SPLASH_POTION",
		"body": "PARTICLE_SPLASH_POTION$0",
		"description": "(EffectID) () Splash potion particles and glass break sound.  Needs a PotionID"
	},

	"SFX_RANDOM_ANVIL_BREAK_0": {
		"prefix": "SFX_RANDOM_ANVIL_BREAK",
		"body": "SFX_RANDOM_ANVIL_BREAK$0",
		"description": "(EffectID) () Sound of an anvil breaking"
	},

	"SFX_MOB_GHAST_SHOOT_0": {
		"prefix": "SFX_MOB_GHAST_SHOOT",
		"body": "SFX_MOB_GHAST_SHOOT$0",
		"description": "(EffectID) () Sound of a ghast shooting"
	},

	"SFX_MOB_WITHER_SHOOT_0": {
		"prefix": "SFX_MOB_WITHER_SHOOT",
		"body": "SFX_MOB_WITHER_SHOOT$0",
		"description": "(EffectID) () Sound of a wither shooting"
	},

	"SFX_RANDOM_DISPENSER_SHOOT_0": {
		"prefix": "SFX_RANDOM_DISPENSER_SHOOT",
		"body": "SFX_RANDOM_DISPENSER_SHOOT$0",
		"description": "(EffectID) () Sound of a dispenser shooting"
	},

	"SFX_RANDOM_WOODEN_TRAPDOOR_CLOSE_0": {
		"prefix": "SFX_RANDOM_WOODEN_TRAPDOOR_CLOSE",
		"body": "SFX_RANDOM_WOODEN_TRAPDOOR_CLOSE$0",
		"description": "(EffectID) () Sound of a trapdoor closing"
	},

	"SFX_MOB_GHAST_WARN_0": {
		"prefix": "SFX_MOB_GHAST_WARN",
		"body": "SFX_MOB_GHAST_WARN$0",
		"description": "(EffectID) () Sound of a ghast warning cry"
	},

	"PARTICLE_HAPPY_VILLAGER_0": {
		"prefix": "PARTICLE_HAPPY_VILLAGER",
		"body": "PARTICLE_HAPPY_VILLAGER$0",
		"description": "(EffectID) () Happy villager/bonemeal particles.  Number of particles may be given or 0 for default of 15"
	},

	"PARTICLE_BLOCK_BREAK_0": {
		"prefix": "PARTICLE_BLOCK_BREAK",
		"body": "PARTICLE_BLOCK_BREAK$0",
		"description": "(EffectID) () Block break particle and sound.  Needs a BlockID"
	},

	"SFX_RANDOM_FENCE_GATE_CLOSE_0": {
		"prefix": "SFX_RANDOM_FENCE_GATE_CLOSE",
		"body": "SFX_RANDOM_FENCE_GATE_CLOSE$0",
		"description": "(EffectID) () Sound of a fence gate closing"
	},

	"SFX_MOB_ZOMBIE_WOOD_BREAK_0": {
		"prefix": "SFX_MOB_ZOMBIE_WOOD_BREAK",
		"body": "SFX_MOB_ZOMBIE_WOOD_BREAK$0",
		"description": "(EffectID) () Sound of a zombie breaking a wooden door"
	},

	"SFX_RANDOM_CHORUS_FLOWER_GROW_0": {
		"prefix": "SFX_RANDOM_CHORUS_FLOWER_GROW",
		"body": "SFX_RANDOM_CHORUS_FLOWER_GROW$0",
		"description": "(EffectID) () Sound of a growing chorus flower"
	},

	"PARTICLE_ENDERDRAGON_GROWL_0": {
		"prefix": "PARTICLE_ENDERDRAGON_GROWL",
		"body": "PARTICLE_ENDERDRAGON_GROWL$0",
		"description": "(EffectID) () Ender dragon growl particle effect"
	},

	"PARTICLE_END_GATEWAY_SPAWN_0": {
		"prefix": "PARTICLE_END_GATEWAY_SPAWN",
		"body": "PARTICLE_END_GATEWAY_SPAWN$0",
		"description": "(EffectID) () End gateway spawn particle effect"
	},

	"SFX_RANDOM_ENDER_EYE_LAUNCH_0": {
		"prefix": "SFX_RANDOM_ENDER_EYE_LAUNCH",
		"body": "SFX_RANDOM_ENDER_EYE_LAUNCH$0",
		"description": "(EffectID) () Sound of an ender eye launch"
	},

	"SFX_MOB_ZOMBIE_WOOD_0": {
		"prefix": "SFX_MOB_ZOMBIE_WOOD",
		"body": "SFX_MOB_ZOMBIE_WOOD$0",
		"description": "(EffectID) () Sound of a zombie attacking a wooden door"
	},

	"SFX_RANDOM_PORTAL_TRAVEL_0": {
		"prefix": "SFX_RANDOM_PORTAL_TRAVEL",
		"body": "SFX_RANDOM_PORTAL_TRAVEL$0",
		"description": "(EffectID) () Sound of travelling through a portal"
	},

	"PARTICLE_DRAGON_BREATH_0": {
		"prefix": "PARTICLE_DRAGON_BREATH",
		"body": "PARTICLE_DRAGON_BREATH$0",
		"description": "(EffectID) () Dragon breath particle effect"
	},

	"PARTICLE_MOBSPAWN_0": {
		"prefix": "PARTICLE_MOBSPAWN",
		"body": "PARTICLE_MOBSPAWN$0",
		"description": "(EffectID) () Mob spawn particle effect: smoke and flames"
	},

	"SFX_RANDOM_FIREWORK_SHOT_0": {
		"prefix": "SFX_RANDOM_FIREWORK_SHOT",
		"body": "SFX_RANDOM_FIREWORK_SHOT$0",
		"description": "(EffectID) () Sound of a firework shot"
	},

	"PARTICLE_EYE_OF_ENDER_0": {
		"prefix": "PARTICLE_EYE_OF_ENDER",
		"body": "PARTICLE_EYE_OF_ENDER$0",
		"description": "(EffectID) () Eye of ender entity break particles and sound"
	},

	"PARTICLE_SMOKE_0": {
		"prefix": "PARTICLE_SMOKE",
		"body": "PARTICLE_SMOKE$0",
		"description": "(EffectID) () Spawns 10 smoke particles, e.g. from a fire.  Needs a {{SmokeDirection|SmokeDirection}}"
	},

	"SFX_RANDOM_WOODEN_TRAPDOOR_OPEN_0": {
		"prefix": "SFX_RANDOM_WOODEN_TRAPDOOR_OPEN",
		"body": "SFX_RANDOM_WOODEN_TRAPDOOR_OPEN$0",
		"description": "(EffectID) () Sound of a wooden trapdoor opening"
	},

	"SFX_RANDOM_IRON_TRAPDOOR_OPEN_0": {
		"prefix": "SFX_RANDOM_IRON_TRAPDOOR_OPEN",
		"body": "SFX_RANDOM_IRON_TRAPDOOR_OPEN$0",
		"description": "(EffectID) () Sound of an iron trapdoor opening"
	},

	"SFX_RANDOM_DISPENSER_DISPENSE_0": {
		"prefix": "SFX_RANDOM_DISPENSER_DISPENSE",
		"body": "SFX_RANDOM_DISPENSER_DISPENSE$0",
		"description": "(EffectID) () Sound of droper/dispenser releasing an item"
	},

	"SFX_RANDOM_CHORUS_FLOWER_DEATH_0": {
		"prefix": "SFX_RANDOM_CHORUS_FLOWER_DEATH",
		"body": "SFX_RANDOM_CHORUS_FLOWER_DEATH$0",
		"description": "(EffectID) () Sound of a dieing chorus flower"
	},

	"SFX_RANDOM_ANVIL_LAND_0": {
		"prefix": "SFX_RANDOM_ANVIL_LAND",
		"body": "SFX_RANDOM_ANVIL_LAND$0",
		"description": "(EffectID) () Sound of a falling anvil landing"
	},

	"SFX_RANDOM_IRON_DOOR_CLOSE_0": {
		"prefix": "SFX_RANDOM_IRON_DOOR_CLOSE",
		"body": "SFX_RANDOM_IRON_DOOR_CLOSE$0",
		"description": "(EffectID) () Sound of an iron door closing"
	},

	"SFX_RANDOM_FENCE_GATE_OPEN_0": {
		"prefix": "SFX_RANDOM_FENCE_GATE_OPEN",
		"body": "SFX_RANDOM_FENCE_GATE_OPEN$0",
		"description": "(EffectID) () Sound of a fence gate opening"
	},

	"SFX_RANDOM_WOODEN_DOOR_OPEN_0": {
		"prefix": "SFX_RANDOM_WOODEN_DOOR_OPEN",
		"body": "SFX_RANDOM_WOODEN_DOOR_OPEN$0",
		"description": "(EffectID) () Sound of a wooden door opening"
	},

	"SFX_MOB_BLAZE_SHOOT_0": {
		"prefix": "SFX_MOB_BLAZE_SHOOT",
		"body": "SFX_MOB_BLAZE_SHOOT$0",
		"description": "(EffectID) () Sound of a blaze shooting"
	},

	"SFX_MOB_BAT_TAKEOFF_0": {
		"prefix": "SFX_MOB_BAT_TAKEOFF",
		"body": "SFX_MOB_BAT_TAKEOFF$0",
		"description": "(EffectID) () Sound of a bat taking off"
	},

	"SFX_MOB_ENDERDRAGON_DEATH_0": {
		"prefix": "SFX_MOB_ENDERDRAGON_DEATH",
		"body": "SFX_MOB_ENDERDRAGON_DEATH$0",
		"description": "(EffectID) () Sound of the dragon releasing dragon breath"
	},

	"SFX_RANDOM_PLAY_MUSIC_DISC_0": {
		"prefix": "SFX_RANDOM_PLAY_MUSIC_DISC",
		"body": "SFX_RANDOM_PLAY_MUSIC_DISC$0",
		"description": "(EffectID) () Starts playing a music disc. Needs an accompanting music disc ID"
	},

	"SFX_RANDOM_FIRE_EXTINGUISH_0": {
		"prefix": "SFX_RANDOM_FIRE_EXTINGUISH",
		"body": "SFX_RANDOM_FIRE_EXTINGUISH$0",
		"description": "(EffectID) () Sound of a fire extinguishing"
	},

	"cWindow_0": {
		"prefix": "cWindow",
		"body": "cWindow$0",
		"description": "(cWindow) () The Scary Class."
	},

	"wtFurnace_0": {
		"prefix": "wtFurnace",
		"body": "wtFurnace$0",
		"description": "(cWindow) () A {{cFurnaceEntity|furnace}} window"
	},

	"wtBrewery_0": {
		"prefix": "wtBrewery",
		"body": "wtBrewery$0",
		"description": "(cWindow) () A brewing stand window"
	},

	"wtBeacon_0": {
		"prefix": "wtBeacon",
		"body": "wtBeacon$0",
		"description": "(cWindow) () A beacon window"
	},

	"wtAnvil_0": {
		"prefix": "wtAnvil",
		"body": "wtAnvil$0",
		"description": "(cWindow) () An anvil window"
	},

	"wtEnchantment_0": {
		"prefix": "wtEnchantment",
		"body": "wtEnchantment$0",
		"description": "(cWindow) () An enchantment table window"
	},

	"wtAnimalChest_0": {
		"prefix": "wtAnimalChest",
		"body": "wtAnimalChest$0",
		"description": "(cWindow) () A horse or donkey window"
	},

	"wtChest_0": {
		"prefix": "wtChest",
		"body": "wtChest$0",
		"description": "(cWindow) () A {{cChestEntity|chest}} or doublechest window"
	},

	"wtWorkbench_0": {
		"prefix": "wtWorkbench",
		"body": "wtWorkbench$0",
		"description": "(cWindow) () A workbench (crafting table) window"
	},

	"wtNPCTrade_0": {
		"prefix": "wtNPCTrade",
		"body": "wtNPCTrade$0",
		"description": "(cWindow) () A villager trade window"
	},

	"wtInventory_0": {
		"prefix": "wtInventory",
		"body": "wtInventory$0",
		"description": "(cWindow) () An inventory window"
	},

	"wtHopper_0": {
		"prefix": "wtHopper",
		"body": "wtHopper$0",
		"description": "(cWindow) () A {{cHopperEntity|hopper}} window"
	},

	"wtDropSpenser_0": {
		"prefix": "wtDropSpenser",
		"body": "wtDropSpenser$0",
		"description": "(cWindow) () A {{cDropperEntity|dropper}} or a {{cDispenserEntity|dispenser}} window"
	},

	"GetSlot_0": {
		"prefix": "GetSlot",
		"body": "GetSlot(${1:Player cPlayer}, ${2:SlotNumber number})$0",
		"description": "(cWindow) (cItem) Returns the item at the specified slot for the specified player. Returns nil and logs to server console on error."
	},

	"SetWindowTitle_0": {
		"prefix": "SetWindowTitle",
		"body": "SetWindowTitle(${1:WindowTitle string})$0",
		"description": "(cWindow) () Sets the window title that will be displayed to the player"
	},

	"GetWindowTypeName_0": {
		"prefix": "GetWindowTypeName",
		"body": "GetWindowTypeName()$0",
		"description": "(cWindow) (string) Returns the textual representation of the window's type, such as 'minecraft:chest'."
	},

	"GetWindowType_0": {
		"prefix": "GetWindowType",
		"body": "GetWindowType()$0",
		"description": "(cWindow) (number) Returns the type of the window, one of the constants in the table above"
	},

	"GetWindowID_0": {
		"prefix": "GetWindowID",
		"body": "GetWindowID()$0",
		"description": "(cWindow) (number) Returns the ID of the window, as used by the network protocol"
	},

	"IsSlotInPlayerMainInventory_0": {
		"prefix": "IsSlotInPlayerMainInventory",
		"body": "IsSlotInPlayerMainInventory(${1:SlotNum number})$0",
		"description": "(cWindow) (boolean) Returns true if the specified slot number is in the player's main inventory"
	},

	"SetSlot_0": {
		"prefix": "SetSlot",
		"body": "SetSlot(${1:Player cPlayer}, ${2:SlotNum number}, ${3:cItem cItem})$0",
		"description": "(cWindow) () Sets the contents of the specified slot for the specified player. Ignored if the slot number is invalid"
	},

	"IsSlotInPlayerInventory_0": {
		"prefix": "IsSlotInPlayerInventory",
		"body": "IsSlotInPlayerInventory(${1:SlotNum number})$0",
		"description": "(cWindow) (boolean) Returns true if the specified slot number is in the player's main inventory or in the hotbar. Note that this returns false for armor slots!"
	},

	"SetProperty_0": {
		"prefix": "SetProperty",
		"body": "SetProperty(${1:PropertyID number}, ${2:PropertyValue number}, ${3:Player cPlayer})$0",
		"description": "(cWindow) () Updates a numerical property associated with the window. Typically used for furnace progressbars. Sends the UpdateWindowProperty packet to the specified Player, or to all current clients of the window if Player is not specified."
	},

	"IsSlotInPlayerHotbar_0": {
		"prefix": "IsSlotInPlayerHotbar",
		"body": "IsSlotInPlayerHotbar(${1:SlotNum number})$0",
		"description": "(cWindow) (boolean) Returns true if the specified slot number is in the player hotbar"
	},

	"GetWindowTitle_0": {
		"prefix": "GetWindowTitle",
		"body": "GetWindowTitle()$0",
		"description": "(cWindow) (string) Returns the window title that will be displayed to the player"
	},

	"cItemGrid_0": {
		"prefix": "cItemGrid",
		"body": "cItemGrid$0",
		"description": "(cItemGrid) () The Scary Class."
	},

	"GetLastEmptySlot_0": {
		"prefix": "GetLastEmptySlot",
		"body": "GetLastEmptySlot()$0",
		"description": "(cItemGrid) (number) Returns the SlotNumber of the last empty slot, -1 if all slots are full"
	},

	"GetNextUsedSlot_0": {
		"prefix": "GetNextUsedSlot",
		"body": "GetNextUsedSlot(${1:StartFrom number})$0",
		"description": "(cItemGrid) (number) Returns the SlotNumber of the first non-empty slot following StartFrom, -1 if all the following slots are full"
	},

	"DamageItem_0": {
		"prefix": "DamageItem",
		"body": "DamageItem(${1:SlotNum number}, ${2:DamageAmount number})$0",
		"description": "(cItemGrid) (HasReachedMaxDamage boolea) Adds the specified damage (1 by default) to the specified item, returns true if the item reached its max damage and should be destroyed (but doesn't destroy the item)."
	},

	"DamageItem_1": {
		"prefix": "DamageItem",
		"body": "DamageItem(${1:X number}, ${2:Y number}, ${3:DamageAmount number})$0",
		"description": "(cItemGrid) (HasReachedMaxDamage boolea) Adds the specified damage (1 by default) to the specified item, returns true if the item reached its max damage and should be destroyed (but doesn't destroy the item)."
	},

	"HowManyCanFit_0": {
		"prefix": "HowManyCanFit",
		"body": "HowManyCanFit(${1:ItemStack cItem}, ${2:AllowNewStacks boolean})$0",
		"description": "(cItemGrid) (number) Returns the number of the specified items that can fit in the storage. If AllowNewStacks is true (default), includes empty slots in the returned count."
	},

	"GetSlotNum_0": {
		"prefix": "GetSlotNum",
		"body": "GetSlotNum(${1:X number}, ${2:Y number})$0",
		"description": "(cItemGrid) (number) Returns the SlotNumber for the specified slot coords. Returns -1 on invalid coords"
	},

	"GetNumSlots_0": {
		"prefix": "GetNumSlots",
		"body": "GetNumSlots()$0",
		"description": "(cItemGrid) (number) Returns the total number of slots in the grid (Width * Height)"
	},

	"GetFirstUsedSlot_0": {
		"prefix": "GetFirstUsedSlot",
		"body": "GetFirstUsedSlot()$0",
		"description": "(cItemGrid) (number) Returns the SlotNumber of the first non-empty slot, -1 if all slots are empty"
	},

	"SetSlot_1": {
		"prefix": "SetSlot",
		"body": "SetSlot(${1:SlotNum number}, ${2:cItem cItem})$0",
		"description": "(cItemGrid) () Sets the specified slot to the specified item"
	},

	"SetSlot_2": {
		"prefix": "SetSlot",
		"body": "SetSlot(${1:SlotNum number}, ${2:ItemType number}, ${3:ItemCount number}, ${4:ItemDamage number})$0",
		"description": "(cItemGrid) () Sets the specified slot to the specified item"
	},

	"SetSlot_3": {
		"prefix": "SetSlot",
		"body": "SetSlot(${1:X number}, ${2:Y number}, ${3:cItem cItem})$0",
		"description": "(cItemGrid) () Sets the specified slot to the specified item"
	},

	"SetSlot_4": {
		"prefix": "SetSlot",
		"body": "SetSlot(${1:X number}, ${2:Y number}, ${3:ItemType number}, ${4:ItemCount number}, ${5:ItemDamage number})$0",
		"description": "(cItemGrid) () Sets the specified slot to the specified item"
	},

	"ChangeSlotCount_0": {
		"prefix": "ChangeSlotCount",
		"body": "ChangeSlotCount(${1:SlotNum number}, ${2:AddToCount number})$0",
		"description": "(cItemGrid) (number) Adds AddToCount to the count of items in the specified slot. If the slot was empty, ignores the call. Returns the new count in the slot, or -1 if invalid SlotNum"
	},

	"ChangeSlotCount_1": {
		"prefix": "ChangeSlotCount",
		"body": "ChangeSlotCount(${1:X number}, ${2:Y number}, ${3:AddToCount number})$0",
		"description": "(cItemGrid) (number) Adds AddToCount to the count of items in the specified slot. If the slot was empty, ignores the call. Returns the new count in the slot, or -1 if invalid slot coords"
	},

	"CopyToItems_0": {
		"prefix": "CopyToItems",
		"body": "CopyToItems(${1:cItems cItems})$0",
		"description": "(cItemGrid) () Copies all non-empty slots into the {{cItems}} object provided; original cItems contents are preserved as well."
	},

	"Clear_4": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cItemGrid) () Empties all slots"
	},

	"GetWidth_1": {
		"prefix": "GetWidth",
		"body": "GetWidth()$0",
		"description": "(cItemGrid) (number) Returns the X dimension of the grid"
	},

	"GetSlot_1": {
		"prefix": "GetSlot",
		"body": "GetSlot(${1:SlotNumber number})$0",
		"description": "(cItemGrid) (cItem) Returns the item in the specified slot. Note that the item is read-only"
	},

	"GetSlot_2": {
		"prefix": "GetSlot",
		"body": "GetSlot(${1:X number}, ${2:Y number})$0",
		"description": "(cItemGrid) (cItem) Returns the item in the specified slot. Note that the item is read-only"
	},

	"HasItems_0": {
		"prefix": "HasItems",
		"body": "HasItems(${1:ItemStack cItem})$0",
		"description": "(cItemGrid) (boolean) Returns true if there are at least as many items of the specified type as in the parameter"
	},

	"AddItems_0": {
		"prefix": "AddItems",
		"body": "AddItems(${1:ItemStackList cItems}, ${2:AllowNewStacks boolean}, ${3:PrioritySlot number})$0",
		"description": "(cItemGrid) (number) Same as AddItem, but works on an entire list of item stacks. The a_ItemStackList is modified to reflect the leftover items. If a_AllowNewStacks is set to false, only existing stacks can be topped up. If AllowNewStacks is set to true, empty slots can be used for the rest. If PrioritySlot is set to a non-negative value, then the corresponding slot will be used first (if empty or compatible with added items). If PrioritySlot is set to -1 (default), regular order applies. Returns the total number of items that fit."
	},

	"IsSlotEmpty_0": {
		"prefix": "IsSlotEmpty",
		"body": "IsSlotEmpty(${1:SlotNum number})$0",
		"description": "(cItemGrid) (boolean) Returns true if the specified slot is empty, or an invalid slot is specified"
	},

	"IsSlotEmpty_1": {
		"prefix": "IsSlotEmpty",
		"body": "IsSlotEmpty(${1:X number}, ${2:Y number})$0",
		"description": "(cItemGrid) (boolean) Returns true if the specified slot is empty, or an invalid slot is specified"
	},

	"HowManyItems_0": {
		"prefix": "HowManyItems",
		"body": "HowManyItems(${1:Item cItem})$0",
		"description": "(cItemGrid) (number) Returns the number of the specified item that are currently stored"
	},

	"RemoveOneItem_0": {
		"prefix": "RemoveOneItem",
		"body": "RemoveOneItem(${1:SlotNum number})$0",
		"description": "(cItemGrid) (cItem) Removes one item from the stack in the specified slot and returns it as a single cItem. Empty slots are skipped and an empty item is returned"
	},

	"RemoveOneItem_1": {
		"prefix": "RemoveOneItem",
		"body": "RemoveOneItem(${1:X number}, ${2:Y number})$0",
		"description": "(cItemGrid) (cItem) Removes one item from the stack in the specified slot and returns it as a single cItem. Empty slots are skipped and an empty item is returned"
	},

	"AddItem_0": {
		"prefix": "AddItem",
		"body": "AddItem(${1:ItemStack cItem}, ${2:AllowNewStacks boolean}, ${3:PrioritySlot number})$0",
		"description": "(cItemGrid) (number) Adds as many items out of ItemStack as can fit. If AllowNewStacks is set to false, only existing stacks can be topped up. If AllowNewStacks is set to true (default), empty slots can be used for the rest. If PrioritySlot is set to a non-negative value, then the corresponding slot will be used first (if empty or compatible with added items). If PrioritySlot is set to -1 (default), regular order applies. Returns the number of items that fit."
	},

	"GetHeight_3": {
		"prefix": "GetHeight",
		"body": "GetHeight()$0",
		"description": "(cItemGrid) (number) Returns the Y dimension of the grid"
	},

	"GetNextEmptySlot_0": {
		"prefix": "GetNextEmptySlot",
		"body": "GetNextEmptySlot(${1:StartFrom number})$0",
		"description": "(cItemGrid) (number) Returns the SlotNumber of the first empty slot following StartFrom, -1 if all the following slots are full"
	},

	"GetSlotCoords_0": {
		"prefix": "GetSlotCoords",
		"body": "GetSlotCoords(${1:SlotNum number})$0",
		"description": "(cItemGrid) (number , number) Returns the X and Y coords for the specified SlotNumber. Returns '-1, -1' on invalid SlotNumber"
	},

	"GetFirstEmptySlot_0": {
		"prefix": "GetFirstEmptySlot",
		"body": "GetFirstEmptySlot()$0",
		"description": "(cItemGrid) (number) Returns the SlotNumber of the first empty slot, -1 if all slots are full"
	},

	"RemoveItem_0": {
		"prefix": "RemoveItem",
		"body": "RemoveItem(${1:ItemStack cItem})$0",
		"description": "(cItemGrid) (number) Removes the specified item from the grid, as many as possible, up to ItemStack's m_ItemCount. Returns the number of items that were removed."
	},

	"GetLastUsedSlot_0": {
		"prefix": "GetLastUsedSlot",
		"body": "GetLastUsedSlot()$0",
		"description": "(cItemGrid) (number) Returns the SlotNumber of the last non-empty slot, -1 if all slots are empty"
	},

	"EmptySlot_0": {
		"prefix": "EmptySlot",
		"body": "EmptySlot(${1:SlotNum number})$0",
		"description": "(cItemGrid) () Destroys the item in the specified slot"
	},

	"EmptySlot_1": {
		"prefix": "EmptySlot",
		"body": "EmptySlot(${1:X number}, ${2:Y number})$0",
		"description": "(cItemGrid) () Destroys the item in the specified slot"
	},

	"cWebPlugin_0": {
		"prefix": "cWebPlugin",
		"body": "cWebPlugin$0",
		"description": "(cWebPlugin) () The Scary Class."
	},

	"cHangingEntity_0": {
		"prefix": "cHangingEntity",
		"body": "cHangingEntity$0",
		"description": "(cHangingEntity) () The Scary Class."
	},

	"GetFacing_0": {
		"prefix": "GetFacing",
		"body": "GetFacing()$0",
		"description": "(cHangingEntity) (BlockFace eBlockFac) Returns the direction in which the entity is facing."
	},

	"SetFacing_0": {
		"prefix": "SetFacing",
		"body": "SetFacing(${1:BlockFace eBlockFace})$0",
		"description": "(cHangingEntity) () Set the direction in which the entity is facing."
	},

	"cLuaWindow_0": {
		"prefix": "cLuaWindow",
		"body": "cLuaWindow$0",
		"description": "(cLuaWindow) () The Scary Class."
	},

	"GetContents_0": {
		"prefix": "GetContents",
		"body": "GetContents()$0",
		"description": "(cLuaWindow) (cItemGrid) Returns the cItemGrid object representing the internal storage in this window"
	},

	"SetOnClicked_0": {
		"prefix": "SetOnClicked",
		"body": "SetOnClicked(${1:OnClickedCallback function})$0",
		"description": "(cLuaWindow) () Sets the function that the window will call when it is about to process a click from a player. See {{#additionalinfo_1|below}} for the signature of the callback function."
	},

	"SetOnClosing_0": {
		"prefix": "SetOnClosing",
		"body": "SetOnClosing(${1:OnClosingCallback function})$0",
		"description": "(cLuaWindow) () Sets the function that the window will call when it is about to be closed by a player"
	},

	"SetOnSlotChanged_0": {
		"prefix": "SetOnSlotChanged",
		"body": "SetOnSlotChanged(${1:OnSlotChangedCallback function})$0",
		"description": "(cLuaWindow) () Sets the function that the window will call when a slot is changed by a player"
	},

	"constructor_1": {
		"prefix": "constructor",
		"body": "constructor(${1:WindowType cWindow#WindowType}, ${2:ContentsWidth number}, ${3:ContentsHeight number}, ${4:Title string})$0",
		"description": "(cLuaWindow) () Creates a new object of this class. The window is not shown to any player yet."
	},

	"cInventory_0": {
		"prefix": "cInventory",
		"body": "cInventory$0",
		"description": "(cInventory) () The Scary Class."
	},

	"invShieldOffset_0": {
		"prefix": "invShieldOffset",
		"body": "invShieldOffset$0",
		"description": "(cInventory) () Starting slot number of the Shield part"
	},

	"invInventoryCount_0": {
		"prefix": "invInventoryCount",
		"body": "invInventoryCount$0",
		"description": "(cInventory) () Number of slots in the main inventory part"
	},

	"invHotbarCount_0": {
		"prefix": "invHotbarCount",
		"body": "invHotbarCount$0",
		"description": "(cInventory) () Number of slots in the Hotbar part"
	},

	"invShieldCount_0": {
		"prefix": "invShieldCount",
		"body": "invShieldCount$0",
		"description": "(cInventory) () Number of slots in the Shield part"
	},

	"invNumSlots_0": {
		"prefix": "invNumSlots",
		"body": "invNumSlots$0",
		"description": "(cInventory) () Total number of slots in a cInventory"
	},

	"invArmorCount_0": {
		"prefix": "invArmorCount",
		"body": "invArmorCount$0",
		"description": "(cInventory) () Number of slots in the Armor part"
	},

	"invArmorOffset_0": {
		"prefix": "invArmorOffset",
		"body": "invArmorOffset$0",
		"description": "(cInventory) () Starting slot number of the Armor part"
	},

	"invHotbarOffset_0": {
		"prefix": "invHotbarOffset",
		"body": "invHotbarOffset$0",
		"description": "(cInventory) () Starting slot number of the Hotbar part"
	},

	"invInventoryOffset_0": {
		"prefix": "invInventoryOffset",
		"body": "invInventoryOffset$0",
		"description": "(cInventory) () Starting slot number of the main inventory part"
	},

	"GetEquippedChestplate_0": {
		"prefix": "GetEquippedChestplate",
		"body": "GetEquippedChestplate()$0",
		"description": "(cInventory) (cItem) Returns the item in the 'chestplate' slot of the armor grid. Note that the returned item is read-only"
	},

	"GetArmorSlot_0": {
		"prefix": "GetArmorSlot",
		"body": "GetArmorSlot(${1:ArmorSlotNum number})$0",
		"description": "(cInventory) (cItem) Returns the specified armor slot contents. Note that the returned item is read-only"
	},

	"GetOwner_0": {
		"prefix": "GetOwner",
		"body": "GetOwner()$0",
		"description": "(cInventory) (cPlayer) Returns the player whose inventory this object represents"
	},

	"GetEquippedItem_0": {
		"prefix": "GetEquippedItem",
		"body": "GetEquippedItem()$0",
		"description": "(cInventory) (cItem) Returns the currently selected item from the hotbar. Note that the returned item is read-only. Also note that the returned item is bound to the actual inventory slot - if a player moves another item into the slot, this object will update to the new item. Use a {{cItem}} constructor to make a copy if you need to store the contents of the slot."
	},

	"DamageEquippedItem_0": {
		"prefix": "DamageEquippedItem",
		"body": "DamageEquippedItem(${1:DamageAmount number})$0",
		"description": "(cInventory) (HasDestroyed boolea) Adds the specified damage (1 by default) to the currently equipped item. Removes the item and returns true if the item reached its max damage and was destroyed."
	},

	"GetArmorGrid_0": {
		"prefix": "GetArmorGrid",
		"body": "GetArmorGrid()$0",
		"description": "(cInventory) (cItemGrid) Returns the ItemGrid representing the armor grid (1 x 4 slots)"
	},

	"GetEquippedHelmet_0": {
		"prefix": "GetEquippedHelmet",
		"body": "GetEquippedHelmet()$0",
		"description": "(cInventory) (cItem) Returns the item in the 'helmet' slot of the armor grid. Note that the returned item is read-only"
	},

	"Clear_5": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cInventory) () Empties all slots"
	},

	"GetInventoryGrid_0": {
		"prefix": "GetInventoryGrid",
		"body": "GetInventoryGrid()$0",
		"description": "(cInventory) (cItemGrid) Returns the ItemGrid representing the main inventory (9 x 3 slots)"
	},

	"HasItems_1": {
		"prefix": "HasItems",
		"body": "HasItems(${1:cItem cItem})$0",
		"description": "(cInventory) (boolean) Returns true if there are at least as many items of the specified type as in the parameter"
	},

	"AddItems_1": {
		"prefix": "AddItems",
		"body": "AddItems(${1:cItems cItems}, ${2:AllowNewStacks boolean})$0",
		"description": "(cInventory) (number) Same as AddItem, but for several items at once"
	},

	"GetHotbarSlot_0": {
		"prefix": "GetHotbarSlot",
		"body": "GetHotbarSlot(${1:HotBarSlotNum number})$0",
		"description": "(cInventory) (cItem) Returns the specified hotbar slot contents. Note that the returned item is read-only"
	},

	"RemoveOneEquippedItem_0": {
		"prefix": "RemoveOneEquippedItem",
		"body": "RemoveOneEquippedItem()$0",
		"description": "(cInventory) (boolean) Removes one item from the hotbar's currently selected slot. Returns true on success."
	},

	"GetEquippedLeggings_0": {
		"prefix": "GetEquippedLeggings",
		"body": "GetEquippedLeggings()$0",
		"description": "(cInventory) (cItem) Returns the item in the 'leggings' slot of the armor grid. Note that the returned item is read-only"
	},

	"RemoveItem_1": {
		"prefix": "RemoveItem",
		"body": "RemoveItem(${1:cItem cItem})$0",
		"description": "(cInventory) (number) Removes the specified item from the inventory, as many as possible, up to the item's m_ItemCount. Returns the number of items that were removed."
	},

	"DamageItem_2": {
		"prefix": "DamageItem",
		"body": "DamageItem(${1:SlotNum number}, ${2:DamageAmount number})$0",
		"description": "(cInventory) (HasDestroyed boolea) Adds the specified damage (1 by default) to the specified item. Removes the item and returns true if the item reached its max damage and was destroyed."
	},

	"HowManyCanFit_1": {
		"prefix": "HowManyCanFit",
		"body": "HowManyCanFit(${1:ItemStack cItem}, ${2:AllowNewStacks boolean})$0",
		"description": "(cInventory) (number) Returns number of items out of a_ItemStack that can fit in the storage. If AllowNewStacks is false, only considers slots already containing the specified item. AllowNewStacks defaults to true if not given."
	},

	"HowManyCanFit_2": {
		"prefix": "HowManyCanFit",
		"body": "HowManyCanFit(${1:ItemStack cItem}, ${2:BeginSlotNum number}, ${3:EndSlotNum number}, ${4:AllowNewStacks boolean})$0",
		"description": "(cInventory) (number) Returns how many items of the specified type would fit into the slot range specified. If AllowNewStacks is false, only considers slots already containing the specified item. AllowNewStacks defaults to true if not given."
	},

	"GetInventorySlot_0": {
		"prefix": "GetInventorySlot",
		"body": "GetInventorySlot(${1:InventorySlotNum number})$0",
		"description": "(cInventory) (cItem) Returns the specified main inventory slot contents. Note that the returned item is read-only"
	},

	"GetShieldSlot_0": {
		"prefix": "GetShieldSlot",
		"body": "GetShieldSlot()$0",
		"description": "(cInventory) (cItem) Returns current item in shield slot."
	},

	"GetEquippedBoots_0": {
		"prefix": "GetEquippedBoots",
		"body": "GetEquippedBoots()$0",
		"description": "(cInventory) (cItem) Returns the item in the 'boots' slot of the armor grid. Note that the returned item is read-only"
	},

	"SetSlot_5": {
		"prefix": "SetSlot",
		"body": "SetSlot(${1:SlotNum number}, ${2:cItem cItem})$0",
		"description": "(cInventory) () Sets the specified slot contents"
	},

	"ChangeSlotCount_2": {
		"prefix": "ChangeSlotCount",
		"body": "ChangeSlotCount(${1:SlotNum number}, ${2:AddToCount number})$0",
		"description": "(cInventory) (number) Adds AddToCount to the count of items in the specified slot. If the slot was empty, ignores the call. Returns the new count in the slot, or -1 if invalid SlotNum"
	},

	"CopyToItems_1": {
		"prefix": "CopyToItems",
		"body": "CopyToItems(${1:cItems cItems})$0",
		"description": "(cInventory) () Copies all non-empty slots into the cItems object provided; original cItems contents are preserved"
	},

	"SetEquippedSlotNum_0": {
		"prefix": "SetEquippedSlotNum",
		"body": "SetEquippedSlotNum(${1:EquippedSlotNum number})$0",
		"description": "(cInventory) () Sets the currently selected hotbar slot number"
	},

	"GetHotbarGrid_0": {
		"prefix": "GetHotbarGrid",
		"body": "GetHotbarGrid()$0",
		"description": "(cInventory) (cItemGrid) Returns the ItemGrid representing the hotbar grid (9 x 1 slots)"
	},

	"SetInventorySlot_0": {
		"prefix": "SetInventorySlot",
		"body": "SetInventorySlot(${1:InventorySlotNum number}, ${2:cItem cItem})$0",
		"description": "(cInventory) () Sets the specified main inventory slot contents"
	},

	"AddItem_1": {
		"prefix": "AddItem",
		"body": "AddItem(${1:cItem cItem}, ${2:AllowNewStacks boolean})$0",
		"description": "(cInventory) (number) Adds an item to the storage; if AllowNewStacks is true (default), will also create new stacks in empty slots. Returns the number of items added"
	},

	"SetShieldSlot_0": {
		"prefix": "SetShieldSlot",
		"body": "SetShieldSlot(${1:Item cItem})$0",
		"description": "(cInventory) () Sets the shield slot content"
	},

	"SetHotbarSlot_0": {
		"prefix": "SetHotbarSlot",
		"body": "SetHotbarSlot(${1:HotbarSlotNum number}, ${2:cItem cItem})$0",
		"description": "(cInventory) () Sets the specified hotbar slot contents"
	},

	"SetArmorSlot_0": {
		"prefix": "SetArmorSlot",
		"body": "SetArmorSlot(${1:ArmorSlotNum number}, ${2:cItem cItem})$0",
		"description": "(cInventory) () Sets the specified armor slot contents"
	},

	"SendEquippedSlot_0": {
		"prefix": "SendEquippedSlot",
		"body": "SendEquippedSlot()$0",
		"description": "(cInventory) () Sends the equipped item slot to the client"
	},

	"HowManyItems_1": {
		"prefix": "HowManyItems",
		"body": "HowManyItems(${1:cItem cItem})$0",
		"description": "(cInventory) (number) Returns the number of the specified items that are currently stored"
	},

	"GetSlot_3": {
		"prefix": "GetSlot",
		"body": "GetSlot(${1:SlotNum number})$0",
		"description": "(cInventory) (cItem) Returns the contents of the specified slot. Note that the returned item is read-only"
	},

	"GetEquippedSlotNum_0": {
		"prefix": "GetEquippedSlotNum",
		"body": "GetEquippedSlotNum()$0",
		"description": "(cInventory) (number) Returns the hotbar slot number for the currently selected item"
	},

	"cUUID_0": {
		"prefix": "cUUID",
		"body": "cUUID$0",
		"description": "(cUUID) () The Scary Class."
	},

	"FromString_0": {
		"prefix": "FromString",
		"body": "FromString(${1:StringUUID string})$0",
		"description": "(cUUID) (boolean) Tries to interpret the string as a short or long form UUID and assign from it.On error, returns false and does not set the value."
	},

	"constructor_2": {
		"prefix": "constructor",
		"body": "constructor()$0",
		"description": "(cUUID) (cUUID) Constructs a nil-valued UUID (all zeros)"
	},

	"ToLongString_0": {
		"prefix": "ToLongString",
		"body": "ToLongString()$0",
		"description": "(cUUID) (string) Converts the UUID to a long form string (i.e with dashes)."
	},

	"Compare_0": {
		"prefix": "Compare",
		"body": "Compare(${1:Other cUUID})$0",
		"description": "(cUUID) (number) Compares this UUID with the specified Other UUID, Returns:0 when equal to Other,< 0 when less than Other,> 0 when greater than Other"
	},

	"Variant_0": {
		"prefix": "Variant",
		"body": "Variant()$0",
		"description": "(cUUID) (number) Returns the variant number of the UUID"
	},

	"GenerateVersion3_0": {
		"prefix": "GenerateVersion3",
		"body": "GenerateVersion3(${1:Name string})$0",
		"description": "(cUUID) (cUUID) Generates a version 3, variant 1 UUID based on the md5 hash of Name."
	},

	"Version_0": {
		"prefix": "Version",
		"body": "Version()$0",
		"description": "(cUUID) (number) Returns the version number of the UUID."
	},

	"ToShortString_0": {
		"prefix": "ToShortString",
		"body": "ToShortString()$0",
		"description": "(cUUID) (string) Converts the UUID to a short form string (i.e without dashes)."
	},

	"IsNil_0": {
		"prefix": "IsNil",
		"body": "IsNil()$0",
		"description": "(cUUID) (boolean) Returns true if this contains the 'nil' UUID with all bits set to 0"
	},

	"cUrlParser_0": {
		"prefix": "cUrlParser",
		"body": "cUrlParser$0",
		"description": "(cUrlParser) () The Scary Class."
	},

	"GetDefaultPort_0": {
		"prefix": "GetDefaultPort",
		"body": "GetDefaultPort(${1:Scheme string})$0",
		"description": "(cUrlParser) (number) Returns the default port that should be used for the given scheme (protocol). Returns zero if the scheme is not known."
	},

	"IsKnownScheme_0": {
		"prefix": "IsKnownScheme",
		"body": "IsKnownScheme(${1:Scheme string})$0",
		"description": "(cUrlParser) (boolean) Returns true if the scheme (protocol) is recognized by the parser."
	},

	"UrlDecode_0": {
		"prefix": "UrlDecode",
		"body": "UrlDecode(${1:Text string})$0",
		"description": "(cUrlParser) (Decoded strin) Returns the Text, URL-decoded. Returns nil if there is a problem while decoding (invalid input)."
	},

	"UrlEncode_0": {
		"prefix": "UrlEncode",
		"body": "UrlEncode(${1:Text string})$0",
		"description": "(cUrlParser) (Encoded strin) Returns the Text, URL-encoded."
	},

	"ParseAuthorityPart_0": {
		"prefix": "ParseAuthorityPart",
		"body": "ParseAuthorityPart(${1:AuthPart string})$0",
		"description": "(cUrlParser) (Username string, Password string, Host string, Port strin) Parses the Authority part of the URL. Parts that are not explicitly specified in the AuthPart are returned empty, the port is returned zero. If parsing fails, the function returns nil and an error message."
	},

	"Parse_1": {
		"prefix": "Parse",
		"body": "Parse(${1:URL string})$0",
		"description": "(cUrlParser) (Scheme string, Username string, Password string, Host string, Port string, Path string, Query string, Fragment strin) Returns the individual parts of the URL. Parts that are not explicitly specified in the URL are empty, the default port for the scheme is used. If parsing fails, the function returns nil and an error message."
	},

	"cTNTEntity_0": {
		"prefix": "cTNTEntity",
		"body": "cTNTEntity$0",
		"description": "(cTNTEntity) () The Scary Class."
	},

	"Explode_0": {
		"prefix": "Explode",
		"body": "Explode()$0",
		"description": "(cTNTEntity) () Explode the tnt."
	},

	"GetFuseTicks_0": {
		"prefix": "GetFuseTicks",
		"body": "GetFuseTicks()$0",
		"description": "(cTNTEntity) (number) Returns the fuse ticks - the number of game ticks until the tnt explodes."
	},

	"SetFuseTicks_0": {
		"prefix": "SetFuseTicks",
		"body": "SetFuseTicks(${1:TicksUntilExplosion number})$0",
		"description": "(cTNTEntity) () Set the fuse ticks until the tnt will explode."
	},

	"cCraftingGrid_0": {
		"prefix": "cCraftingGrid",
		"body": "cCraftingGrid$0",
		"description": "(cCraftingGrid) () The Scary Class."
	},

	"Clear_6": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cCraftingGrid) () Clears the entire grid"
	},

	"Dump_1": {
		"prefix": "Dump",
		"body": "Dump()$0",
		"description": "(cCraftingGrid) () DEBUG build: Dumps the contents of the grid to the log. RELEASE build: no action"
	},

	"SetItem_2": {
		"prefix": "SetItem",
		"body": "SetItem(${1:x number}, ${2:y number}, ${3:cItem cItem})$0",
		"description": "(cCraftingGrid) () Sets the item at the specified coords"
	},

	"SetItem_3": {
		"prefix": "SetItem",
		"body": "SetItem(${1:x number}, ${2:y number}, ${3:ItemType number}, ${4:ItemCount number}, ${5:ItemDamage number})$0",
		"description": "(cCraftingGrid) () Sets the item at the specified coords"
	},

	"GetWidth_2": {
		"prefix": "GetWidth",
		"body": "GetWidth()$0",
		"description": "(cCraftingGrid) (number) Returns the width of the grid"
	},

	"ConsumeGrid_0": {
		"prefix": "ConsumeGrid",
		"body": "ConsumeGrid(${1:CraftingGrid cCraftingGrid})$0",
		"description": "(cCraftingGrid) () Consumes items specified in CraftingGrid from the current contents. Used internally by {{cCraftingRecipe}}'s ConsumeIngredients() function, but available to plugins, too."
	},

	"GetHeight_4": {
		"prefix": "GetHeight",
		"body": "GetHeight()$0",
		"description": "(cCraftingGrid) (number) Returns the height of the grid"
	},

	"GetItem_3": {
		"prefix": "GetItem",
		"body": "GetItem(${1:x number}, ${2:y number})$0",
		"description": "(cCraftingGrid) (cItem) Returns the item at the specified coords"
	},

	"constructor_3": {
		"prefix": "constructor",
		"body": "constructor(${1:Width number}, ${2:Height number})$0",
		"description": "(cCraftingGrid) (cCraftingGrid) Creates a new CraftingGrid object. This new crafting grid is not related to any player, but may be needed for {{cCraftingRecipe}}'s ConsumeIngredients function."
	},

	"cHopperEntity_0": {
		"prefix": "cHopperEntity",
		"body": "cHopperEntity$0",
		"description": "(cHopperEntity) () The Scary Class."
	},

	"ContentsWidth_3": {
		"prefix": "ContentsWidth",
		"body": "ContentsWidth$0",
		"description": "(cHopperEntity) () Width (X) of the internal {{cItemGrid}} representing the hopper contents."
	},

	"ContentsHeight_3": {
		"prefix": "ContentsHeight",
		"body": "ContentsHeight$0",
		"description": "(cHopperEntity) () Height (Y) of the internal {{cItemGrid}} representing the hopper contents."
	},

	"TICKS_PER_TRANSFER_0": {
		"prefix": "TICKS_PER_TRANSFER",
		"body": "TICKS_PER_TRANSFER$0",
		"description": "(cHopperEntity) () Number of ticks between when the hopper transfers items."
	},

	"GetOutputBlockPos_0": {
		"prefix": "GetOutputBlockPos",
		"body": "GetOutputBlockPos(${1:BlockMeta number})$0",
		"description": "(cHopperEntity) (IsAttached boolean, BlockX number, BlockY number, BlockZ numbe) Returns whether the hopper is attached, and if so, the block coords of the block receiving the output items, based on the given meta."
	},

	"cStringCompression_0": {
		"prefix": "cStringCompression",
		"body": "cStringCompression$0",
		"description": "(cStringCompression) () The Scary Class."
	},

	"CompressStringZLIB_0": {
		"prefix": "CompressStringZLIB",
		"body": "CompressStringZLIB(${1:Data string}, ${2:factor number})$0",
		"description": "(cStringCompression) (string) Compresses data in a string using ZLIB. Factor 0 is no compression and factor 9 is maximum compression."
	},

	"CompressStringGZIP_0": {
		"prefix": "CompressStringGZIP",
		"body": "CompressStringGZIP(${1:Data string})$0",
		"description": "(cStringCompression) (string) Compresses data in a string using GZIP"
	},

	"UncompressStringZLIB_0": {
		"prefix": "UncompressStringZLIB",
		"body": "UncompressStringZLIB(${1:Data string}, ${2:UncompressedLength number})$0",
		"description": "(cStringCompression) (string) Uncompresses Data using ZLIB"
	},

	"InflateString_0": {
		"prefix": "InflateString",
		"body": "InflateString(${1:Data string})$0",
		"description": "(cStringCompression) (string) Uncompresses a string using Inflate"
	},

	"UncompressStringGZIP_0": {
		"prefix": "UncompressStringGZIP",
		"body": "UncompressStringGZIP(${1:Data string})$0",
		"description": "(cStringCompression) (string) Uncompress a string using GZIP"
	},

	"cServer_0": {
		"prefix": "cServer",
		"body": "cServer$0",
		"description": "(cServer) () The Scary Class."
	},

	"UnregisterForgeMod_0": {
		"prefix": "UnregisterForgeMod",
		"body": "UnregisterForgeMod(${1:ModName string}, ${2:ProtocolVersionNumber number})$0",
		"description": "(cServer) () Remove a Forge mod name/version from the server ping list."
	},

	"ShouldAuthenticate_0": {
		"prefix": "ShouldAuthenticate",
		"body": "ShouldAuthenticate()$0",
		"description": "(cServer) (boolean) Returns true iff the server is set to authenticate players ('online mode')."
	},

	"SetMaxPlayers_0": {
		"prefix": "SetMaxPlayers",
		"body": "SetMaxPlayers(${1:MaxPlayers number})$0",
		"description": "(cServer) () Sets the max amount of players who can join."
	},

	"GetShutdownMessage_0": {
		"prefix": "GetShutdownMessage",
		"body": "GetShutdownMessage()$0",
		"description": "(cServer) (string) Returns the shutdown message set in the settings.ini."
	},

	"RegisterForgeMod_0": {
		"prefix": "RegisterForgeMod",
		"body": "RegisterForgeMod(${1:ModName string}, ${2:ModVersion string}, ${3:ProtocolVersionNumber number})$0",
		"description": "(cServer) () Add a Forge mod name/version to the server ping list."
	},

	"IsHardcore_0": {
		"prefix": "IsHardcore",
		"body": "IsHardcore()$0",
		"description": "(cServer) (boolean) Returns true if the server is hardcore (players get banned on death)."
	},

	"IsPlayerInQueue_0": {
		"prefix": "IsPlayerInQueue",
		"body": "IsPlayerInQueue(${1:Username string})$0",
		"description": "(cServer) (boolean) Returns true if the specified player is queued to be transferred to a World."
	},

	"DoesAllowMultiLogin_0": {
		"prefix": "DoesAllowMultiLogin",
		"body": "DoesAllowMultiLogin()$0",
		"description": "(cServer) (boolean) Returns true if players can log in multiple times from the same account (normally used for debugging), false if only one player per name is allowed."
	},

	"GetMaxPlayers_0": {
		"prefix": "GetMaxPlayers",
		"body": "GetMaxPlayers()$0",
		"description": "(cServer) (number) Returns the max amount of players who can join the server."
	},

	"GetNumPlayers_0": {
		"prefix": "GetNumPlayers",
		"body": "GetNumPlayers()$0",
		"description": "(cServer) (number) Returns the amount of players online."
	},

	"GetServerID_0": {
		"prefix": "GetServerID",
		"body": "GetServerID()$0",
		"description": "(cServer) (string) Returns the ID of the server?"
	},

	"GetDescription_0": {
		"prefix": "GetDescription",
		"body": "GetDescription()$0",
		"description": "(cServer) (string) Returns the server description set in the settings.ini."
	},

	"cChatColor_0": {
		"prefix": "cChatColor",
		"body": "cChatColor$0",
		"description": "(cChatColor) () The Scary Class."
	},

	"Navy_0": {
		"prefix": "Navy",
		"body": "Navy$0",
		"description": "(cChatColor) () "
	},

	"Color_0": {
		"prefix": "Color",
		"body": "Color$0",
		"description": "(cChatColor) () The first character of the color-code-sequence, §"
	},

	"Strikethrough_0": {
		"prefix": "Strikethrough",
		"body": "Strikethrough$0",
		"description": "(cChatColor) () "
	},

	"DarkPurple_0": {
		"prefix": "DarkPurple",
		"body": "DarkPurple$0",
		"description": "(cChatColor) () "
	},

	"LightGreen_0": {
		"prefix": "LightGreen",
		"body": "LightGreen$0",
		"description": "(cChatColor) () "
	},

	"Italic_0": {
		"prefix": "Italic",
		"body": "Italic$0",
		"description": "(cChatColor) () "
	},

	"Gold_0": {
		"prefix": "Gold",
		"body": "Gold$0",
		"description": "(cChatColor) () "
	},

	"Bold_0": {
		"prefix": "Bold",
		"body": "Bold$0",
		"description": "(cChatColor) () "
	},

	"Random_0": {
		"prefix": "Random",
		"body": "Random$0",
		"description": "(cChatColor) () Random letters and symbols animate instead of the text"
	},

	"Red_0": {
		"prefix": "Red",
		"body": "Red$0",
		"description": "(cChatColor) () "
	},

	"Blue_0": {
		"prefix": "Blue",
		"body": "Blue$0",
		"description": "(cChatColor) () "
	},

	"LightBlue_0": {
		"prefix": "LightBlue",
		"body": "LightBlue$0",
		"description": "(cChatColor) () "
	},

	"White_0": {
		"prefix": "White",
		"body": "White$0",
		"description": "(cChatColor) () "
	},

	"Underlined_0": {
		"prefix": "Underlined",
		"body": "Underlined$0",
		"description": "(cChatColor) () "
	},

	"LightGray_0": {
		"prefix": "LightGray",
		"body": "LightGray$0",
		"description": "(cChatColor) () "
	},

	"Rose_0": {
		"prefix": "Rose",
		"body": "Rose$0",
		"description": "(cChatColor) () "
	},

	"Purple_0": {
		"prefix": "Purple",
		"body": "Purple$0",
		"description": "(cChatColor) () "
	},

	"LightPurple_0": {
		"prefix": "LightPurple",
		"body": "LightPurple$0",
		"description": "(cChatColor) () "
	},

	"Black_0": {
		"prefix": "Black",
		"body": "Black$0",
		"description": "(cChatColor) () "
	},

	"Green_0": {
		"prefix": "Green",
		"body": "Green$0",
		"description": "(cChatColor) () "
	},

	"Plain_0": {
		"prefix": "Plain",
		"body": "Plain$0",
		"description": "(cChatColor) () Resets all formatting to normal"
	},

	"Yellow_0": {
		"prefix": "Yellow",
		"body": "Yellow$0",
		"description": "(cChatColor) () "
	},

	"Delimiter_0": {
		"prefix": "Delimiter",
		"body": "Delimiter$0",
		"description": "(cChatColor) () The first character of the color-code-sequence, §"
	},

	"Gray_0": {
		"prefix": "Gray",
		"body": "Gray$0",
		"description": "(cChatColor) () "
	},

	"cFallingBlock_0": {
		"prefix": "cFallingBlock",
		"body": "cFallingBlock$0",
		"description": "(cFallingBlock) () The Scary Class."
	},

	"GetBlockType_1": {
		"prefix": "GetBlockType",
		"body": "GetBlockType()$0",
		"description": "(cFallingBlock) (BlockType numbe) Returns the block type of the falling block."
	},

	"GetBlockMeta_3": {
		"prefix": "GetBlockMeta",
		"body": "GetBlockMeta()$0",
		"description": "(cFallingBlock) (BlockMeta numbe) Returns the block meta of the falling block."
	},

	"cRoot_0": {
		"prefix": "cRoot",
		"body": "cRoot$0",
		"description": "(cRoot) () The Scary Class."
	},

	"DoWithPlayerByUUID_1": {
		"prefix": "DoWithPlayerByUUID",
		"body": "DoWithPlayerByUUID(${1:PlayerUUID cUUID}, ${2:CallbackFunction function})$0",
		"description": "(cRoot) (boolean) If there is the player with the uuid, calls the CallbackFunction with the {{cPlayer}} parameter representing the player. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cPlayer|Player}})</pre> The function returns false if the player was not found, or whatever bool value the callback returned if the player was found."
	},

	"BroadcastChatSuccess_1": {
		"prefix": "BroadcastChatSuccess",
		"body": "BroadcastChatSuccess(${1:MessageText string})$0",
		"description": "(cRoot) () Broadcasts the specified message to all players, with its message type set to mtSuccess. Use for success messages."
	},

	"BroadcastChatWarning_1": {
		"prefix": "BroadcastChatWarning",
		"body": "BroadcastChatWarning(${1:MessageText string})$0",
		"description": "(cRoot) () Broadcasts the specified message to all players, with its message type set to mtWarning. Use for concerning events, such as plugin reload etc."
	},

	"GetBuildID_0": {
		"prefix": "GetBuildID",
		"body": "GetBuildID()$0",
		"description": "(cRoot) (string) For official builds (Travis CI / Jenkins) it returns the unique ID of the build, as recognized by the build system. For unofficial local builds, returns the string 'Unknown'."
	},

	"BroadcastChatLeave_0": {
		"prefix": "BroadcastChatLeave",
		"body": "BroadcastChatLeave(${1:MessageText string})$0",
		"description": "(cRoot) () Broadcasts the specified message to all players, with its message type set to mtLeave. Use for players leaving the server."
	},

	"GetServerUpTime_0": {
		"prefix": "GetServerUpTime",
		"body": "GetServerUpTime()$0",
		"description": "(cRoot) (number) Returns the uptime of the server in seconds."
	},

	"GetWorld_1": {
		"prefix": "GetWorld",
		"body": "GetWorld(${1:WorldName string})$0",
		"description": "(cRoot) (cWorld) Returns the cWorld object of the given world. It returns nil if there is no world with the given name."
	},

	"GetServer_0": {
		"prefix": "GetServer",
		"body": "GetServer()$0",
		"description": "(cRoot) (cServer) Returns the cServer object."
	},

	"QueueExecuteConsoleCommand_0": {
		"prefix": "QueueExecuteConsoleCommand",
		"body": "QueueExecuteConsoleCommand(${1:Message string})$0",
		"description": "(cRoot) () Queues a console command for execution through the cServer class. The command will be executed in the tick thread. The command's output will be sent to console."
	},

	"GetCraftingRecipes_0": {
		"prefix": "GetCraftingRecipes",
		"body": "GetCraftingRecipes()$0",
		"description": "(cRoot) (cCraftingRecipe) Returns the CraftingRecipes object"
	},

	"BroadcastChat_1": {
		"prefix": "BroadcastChat",
		"body": "BroadcastChat(${1:MessageText string}, ${2:MessageType eMessageType})$0",
		"description": "(cRoot) () Broadcasts a message to all players, with its message type set to MessageType (default: mtCustom)."
	},

	"BroadcastChat_2": {
		"prefix": "BroadcastChat",
		"body": "BroadcastChat(${1:CompositeChat cCompositeChat})$0",
		"description": "(cRoot) () Broadcasts a {{cCompositeChat|composite chat message}} to all players."
	},

	"GetFurnaceFuelBurnTime_0": {
		"prefix": "GetFurnaceFuelBurnTime",
		"body": "GetFurnaceFuelBurnTime(${1:Fuel cItem})$0",
		"description": "(cRoot) (number) Returns the number of ticks for how long the item would fuel a furnace. Returns zero if not a fuel."
	},

	"GetWebAdmin_0": {
		"prefix": "GetWebAdmin",
		"body": "GetWebAdmin()$0",
		"description": "(cRoot) (cWebAdmin) Returns the cWebAdmin object."
	},

	"BroadcastChatFailure_1": {
		"prefix": "BroadcastChatFailure",
		"body": "BroadcastChatFailure(${1:MessageText string})$0",
		"description": "(cRoot) () Broadcasts the specified message to all players, with its message type set to mtFailure. Use for a command that failed to run because of insufficient permissions, etc."
	},

	"GetBrewingRecipe_0": {
		"prefix": "GetBrewingRecipe",
		"body": "GetBrewingRecipe(${1:Bottle cItem}, ${2:Ingredient cItem})$0",
		"description": "(cRoot) (cItem) Returns the result item, if a recipe has been found to brew the Ingredient into Bottle. If no recipe is found, returns no value."
	},

	"BroadcastChatDeath_1": {
		"prefix": "BroadcastChatDeath",
		"body": "BroadcastChatDeath(${1:MessageText string})$0",
		"description": "(cRoot) () Broadcasts the specified message to all players, with its message type set to mtDeath. Use for when a player has died."
	},

	"BroadcastChatJoin_0": {
		"prefix": "BroadcastChatJoin",
		"body": "BroadcastChatJoin(${1:MessageText string})$0",
		"description": "(cRoot) () Broadcasts the specified message to all players, with its message type set to mtJoin. Use for players joining the server."
	},

	"FindAndDoWithPlayer_1": {
		"prefix": "FindAndDoWithPlayer",
		"body": "FindAndDoWithPlayer(${1:PlayerName string}, ${2:CallbackFunction function})$0",
		"description": "(cRoot) (boolean) Calls the given callback function for the player with the name best matching the name string provided.<br>This function is case-insensitive and will match partial names.<br>Returns false if player not found or there is ambiguity, true otherwise. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cPlayer|Player}})</pre>"
	},

	"BroadcastChatInfo_1": {
		"prefix": "BroadcastChatInfo",
		"body": "BroadcastChatInfo(${1:MessageText string})$0",
		"description": "(cRoot) () Broadcasts the specified message to all players, with its message type set to mtInfo. Use for informational messages, such as command usage."
	},

	"BroadcastChatFatal_1": {
		"prefix": "BroadcastChatFatal",
		"body": "BroadcastChatFatal(${1:MessageText string})$0",
		"description": "(cRoot) () Broadcasts the specified message to all players, with its message type set to mtFatal. Use for a plugin that crashed, or similar."
	},

	"SetSavingEnabled_1": {
		"prefix": "SetSavingEnabled",
		"body": "SetSavingEnabled(${1:SavingEnabled boolean})$0",
		"description": "(cRoot) () Sets whether saving chunk data is enabled for all worlds. If disabled, dirty chunks will stay in memory forever, which can cause performance and stability issues."
	},

	"GetBuildDateTime_0": {
		"prefix": "GetBuildDateTime",
		"body": "GetBuildDateTime()$0",
		"description": "(cRoot) (string) For official builds (Travic CI / Jenkins) it returns the date and time of the build. For unofficial local builds, returns the approximate datetime of the commit (since the true one cannot be determined), formatted as 'approx: &lt;DateTime-iso8601&gt;'."
	},

	"GetFurnaceRecipe_0": {
		"prefix": "GetFurnaceRecipe",
		"body": "GetFurnaceRecipe(${1:InItem cItem})$0",
		"description": "(cRoot) (OutItem cItem, NumTicks number, InItem cIte) Returns the furnace recipe for smelting the specified input. If a recipe is found, returns the smelted result, the number of ticks required for the smelting operation, and the input consumed (note that Cuberite supports smelting M items into N items and different smelting rates). If no recipe is found, returns no value."
	},

	"GetVirtualRAMUsage_0": {
		"prefix": "GetVirtualRAMUsage",
		"body": "GetVirtualRAMUsage()$0",
		"description": "(cRoot) (number) Returns the amount of virtual RAM that the entire Cuberite process is using, in KiB. Negative if the OS doesn't support this query."
	},

	"GetTotalChunkCount_0": {
		"prefix": "GetTotalChunkCount",
		"body": "GetTotalChunkCount()$0",
		"description": "(cRoot) (number) Returns the amount of loaded chunks."
	},

	"SaveAllChunks_0": {
		"prefix": "SaveAllChunks",
		"body": "SaveAllChunks()$0",
		"description": "(cRoot) () Saves all the chunks in all the worlds. Note that the saving is queued on each world's tick thread and this functions returns before the chunks are actually saved."
	},

	"ForEachPlayer_1": {
		"prefix": "ForEachPlayer",
		"body": "ForEachPlayer(${1:CallbackFunction function})$0",
		"description": "(cRoot) () Calls the given callback function for each player. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cPlayer|cPlayer}})</pre>"
	},

	"GetBuildCommitID_0": {
		"prefix": "GetBuildCommitID",
		"body": "GetBuildCommitID()$0",
		"description": "(cRoot) (string) For official builds (Travis CI / Jenkins) it returns the exact commit hash used for the build. For unofficial local builds, returns the approximate commit hash (since the true one cannot be determined), formatted as 'approx: &lt;CommitHash&gt;'."
	},

	"GetPhysicalRAMUsage_0": {
		"prefix": "GetPhysicalRAMUsage",
		"body": "GetPhysicalRAMUsage()$0",
		"description": "(cRoot) (number) Returns the amount of physical RAM that the entire Cuberite process is using, in KiB. Negative if the OS doesn't support this query."
	},

	"GetProtocolVersionTextFromInt_0": {
		"prefix": "GetProtocolVersionTextFromInt",
		"body": "GetProtocolVersionTextFromInt(${1:ProtocolVersionNumber number})$0",
		"description": "(cRoot) (string) Returns the Minecraft client version from the given Protocol version number. If there is no version found, it returns 'Unknown protocol (Number)'"
	},

	"GetDefaultWorld_0": {
		"prefix": "GetDefaultWorld",
		"body": "GetDefaultWorld()$0",
		"description": "(cRoot) (cWorld) Returns the world object from the default world."
	},

	"ForEachWorld_0": {
		"prefix": "ForEachWorld",
		"body": "ForEachWorld(${1:CallbackFunction function})$0",
		"description": "(cRoot) () Calls the given callback function for each world. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cWorld|cWorld}})</pre>"
	},

	"GetBuildSeriesName_0": {
		"prefix": "GetBuildSeriesName",
		"body": "GetBuildSeriesName()$0",
		"description": "(cRoot) (string) For official builds (Travis CI / Jenkins) it returns the series name of the build (for example 'Cuberite Windows x64 Master'). For unofficial local builds, returns the string 'local build'."
	},

	"GetPluginManager_0": {
		"prefix": "GetPluginManager",
		"body": "GetPluginManager()$0",
		"description": "(cRoot) (cPluginManager) Returns the cPluginManager object."
	},

	"Get_2": {
		"prefix": "Get",
		"body": "Get()$0",
		"description": "(cRoot) (cRoot) Returns the one and only cRoot object."
	},

	"cPlayer_0": {
		"prefix": "cPlayer",
		"body": "cPlayer$0",
		"description": "(cPlayer) () The Scary Class."
	},

	"MAX_HEALTH_0": {
		"prefix": "MAX_HEALTH",
		"body": "MAX_HEALTH$0",
		"description": "(cPlayer) () The maximum health value"
	},

	"MAX_FOOD_LEVEL_0": {
		"prefix": "MAX_FOOD_LEVEL",
		"body": "MAX_FOOD_LEVEL$0",
		"description": "(cPlayer) () The maximum food level value. When the food level is at this value, the player cannot eat."
	},

	"EATING_TICKS_0": {
		"prefix": "EATING_TICKS",
		"body": "EATING_TICKS$0",
		"description": "(cPlayer) () Number of ticks required for consuming an item."
	},

	"GetMaxSpeed_0": {
		"prefix": "GetMaxSpeed",
		"body": "GetMaxSpeed()$0",
		"description": "(cPlayer) (number) Returns the player's current maximum speed, relative to the game default speed. Takes into account the sprinting / flying status."
	},

	"SetDraggingItem_0": {
		"prefix": "SetDraggingItem",
		"body": "SetDraggingItem(${1:Item cItem})$0",
		"description": "(cPlayer) () Sets the item that the player is dragging in a UI window. If no UI window is open, this function does nothing."
	},

	"GetFoodTickTimer_0": {
		"prefix": "GetFoodTickTimer",
		"body": "GetFoodTickTimer()$0",
		"description": "(cPlayer) (number) Returns the number of ticks past the last food-based heal or damage action; when this timer reaches 80, a new heal / damage is applied."
	},

	"SetSkinParts_0": {
		"prefix": "SetSkinParts",
		"body": "SetSkinParts(${1:Parts number})$0",
		"description": "(cPlayer) () Sets the skin part flags of the player.  The value should be a bitwise OR of several {{Globals#eSkinPart|eSkinPart}} constants."
	},

	"SetFoodTickTimer_0": {
		"prefix": "SetFoodTickTimer",
		"body": "SetFoodTickTimer(${1:FoodTickTimer number})$0",
		"description": "(cPlayer) () Sets the number of ticks past the last food-based heal or damage action; when this timer reaches 80, a new heal / damage is applied."
	},

	"CanMobsTarget_0": {
		"prefix": "CanMobsTarget",
		"body": "CanMobsTarget()$0",
		"description": "(cPlayer) (boolean) Returns if the player can be targeted by mobs."
	},

	"GetColor_1": {
		"prefix": "GetColor",
		"body": "GetColor()$0",
		"description": "(cPlayer) (string) Returns the full color code to be used for this player's messages (based on their rank). Prefix player messages with this code."
	},

	"SendBlocksAround_0": {
		"prefix": "SendBlocksAround",
		"body": "SendBlocksAround(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:BlockRange number})$0",
		"description": "(cPlayer) () Sends all the world's blocks in BlockRange from the specified coords to the player, as a BlockChange packet. Range defaults to 1 (only one block sent)."
	},

	"Freeze_0": {
		"prefix": "Freeze",
		"body": "Freeze(${1:Location Vector3d})$0",
		"description": "(cPlayer) () Teleports the player to 'Location' and prevents them from moving, locking them in place until unfreeze() is called"
	},

	"IsGameModeSpectator_1": {
		"prefix": "IsGameModeSpectator",
		"body": "IsGameModeSpectator()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is in the gmSpectator gamemode, or has their gamemode unset and the world is a gmSpectator world."
	},

	"GetFoodExhaustionLevel_0": {
		"prefix": "GetFoodExhaustionLevel",
		"body": "GetFoodExhaustionLevel()$0",
		"description": "(cPlayer) (number) Returns the food exhaustion level"
	},

	"GetSkinParts_0": {
		"prefix": "GetSkinParts",
		"body": "GetSkinParts()$0",
		"description": "(cPlayer) (number) Returns the player's current set of skin part flags.  This is a bitwise OR of various {{Globals#eSkinPart|eSkinPart}} constants.  Note that HasSkinPart may be easier to use in most situations."
	},

	"IsEating_0": {
		"prefix": "IsEating",
		"body": "IsEating()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is currently eating the item in their hand."
	},

	"SetCanFly_0": {
		"prefix": "SetCanFly",
		"body": "SetCanFly(${1:CanFly boolean})$0",
		"description": "(cPlayer) () Sets if the player can fly or not."
	},

	"GetUUID_0": {
		"prefix": "GetUUID",
		"body": "GetUUID()$0",
		"description": "(cPlayer) (string) Returns the (short) UUID that the player is using. Could be empty string for players that don't have a Mojang account assigned to them (in the future, bots for example)."
	},

	"SendMessageFatal_0": {
		"prefix": "SendMessageFatal",
		"body": "SendMessageFatal(${1:Message string})$0",
		"description": "(cPlayer) () Prepends Red [FATAL] / colours entire text (depending on ShouldUseChatPrefixes()) and sends message to player. For something serious, such as a plugin crash, etc."
	},

	"GetPlayerListName_0": {
		"prefix": "GetPlayerListName",
		"body": "GetPlayerListName()$0",
		"description": "(cPlayer) (string) Returns the name that is used in the playerlist."
	},

	"SendMessageWarning_0": {
		"prefix": "SendMessageWarning",
		"body": "SendMessageWarning(${1:Message string})$0",
		"description": "(cPlayer) () Prepends Rose [WARN] / colours entire text (depending on ShouldUseChatPrefixes()) and sends message to player. Denotes that something concerning, such as plugin reload, is about to happen."
	},

	"CloseWindow_0": {
		"prefix": "CloseWindow",
		"body": "CloseWindow(${1:CanRefuse boolean})$0",
		"description": "(cPlayer) () Closes the currently open UI window. If CanRefuse is true (default), the window may refuse the closing."
	},

	"SetFlying_0": {
		"prefix": "SetFlying",
		"body": "SetFlying(${1:IsFlying boolean})$0",
		"description": "(cPlayer) () Sets if the player is flying or not."
	},

	"GetThrowStartPos_0": {
		"prefix": "GetThrowStartPos",
		"body": "GetThrowStartPos()$0",
		"description": "(cPlayer) (Vector3d) Returns the position where the projectiles should start when thrown by this player."
	},

	"GetIP_0": {
		"prefix": "GetIP",
		"body": "GetIP()$0",
		"description": "(cPlayer) (string) Returns the IP address of the player, if available. Returns an empty string if there's no IP to report."
	},

	"LoadRank_0": {
		"prefix": "LoadRank",
		"body": "LoadRank()$0",
		"description": "(cPlayer) () Reloads the player's rank, message visuals and permissions from the {{cRankManager}}, based on the player's current rank."
	},

	"SendAboveActionBarMessage_0": {
		"prefix": "SendAboveActionBarMessage",
		"body": "SendAboveActionBarMessage(${1:Message string})$0",
		"description": "(cPlayer) () Sends the specified message to the player (shows above action bar)."
	},

	"Unfreeze_0": {
		"prefix": "Unfreeze",
		"body": "Unfreeze()$0",
		"description": "(cPlayer) () Allows the player to move again, canceling the effects of Freeze()"
	},

	"PermissionMatches_0": {
		"prefix": "PermissionMatches",
		"body": "PermissionMatches(${1:Permission string}, ${2:Template string})$0",
		"description": "(cPlayer) (boolean) Returns true if the specified permission matches the specified template. The template may contain asterisk as a wildcard for any word."
	},

	"SetSprint_0": {
		"prefix": "SetSprint",
		"body": "SetSprint(${1:IsSprinting boolean})$0",
		"description": "(cPlayer) () Sets whether the player is sprinting or not."
	},

	"SetGameMode_0": {
		"prefix": "SetGameMode",
		"body": "SetGameMode(${1:NewGameMode eGameMode})$0",
		"description": "(cPlayer) () Sets the gamemode for the player. The new gamemode overrides the world's default gamemode, unless it is set to gmInherit."
	},

	"IsSatiated_0": {
		"prefix": "IsSatiated",
		"body": "IsSatiated()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is satiated (cannot eat)."
	},

	"XpForLevel_0": {
		"prefix": "XpForLevel",
		"body": "XpForLevel(${1:XPLevel number})$0",
		"description": "(cPlayer) (number) Returns the total amount of XP needed for the specified XP level. Inverse of CalcLevelFromXp()."
	},

	"IsFishing_0": {
		"prefix": "IsFishing",
		"body": "IsFishing()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is currently fishing"
	},

	"GetEyePosition_0": {
		"prefix": "GetEyePosition",
		"body": "GetEyePosition()$0",
		"description": "(cPlayer) (EyePositionVector Vector3) Returns the position of the player's eyes, as a {{Vector3d}}"
	},

	"GetNormalMaxSpeed_0": {
		"prefix": "GetNormalMaxSpeed",
		"body": "GetNormalMaxSpeed()$0",
		"description": "(cPlayer) (number) Returns the player's maximum walking speed, relative to the game default speed. Defaults to 1, but plugins may modify it for faster or slower walking."
	},

	"GetXpLifetimeTotal_0": {
		"prefix": "GetXpLifetimeTotal",
		"body": "GetXpLifetimeTotal()$0",
		"description": "(cPlayer) (number) Returns the amount of XP that has been accumulated throughout the player's lifetime."
	},

	"GetCustomName_1": {
		"prefix": "GetCustomName",
		"body": "GetCustomName()$0",
		"description": "(cPlayer) (string) Returns the custom name of this player. If the player hasn't a custom name, it will return an empty string."
	},

	"CanFly_0": {
		"prefix": "CanFly",
		"body": "CanFly()$0",
		"description": "(cPlayer) (boolean) Returns if the player is able to fly."
	},

	"TossPickup_0": {
		"prefix": "TossPickup",
		"body": "TossPickup(${1:Item cItem})$0",
		"description": "(cPlayer) () Tosses a pickup newly created from the specified item."
	},

	"TossHeldItem_0": {
		"prefix": "TossHeldItem",
		"body": "TossHeldItem(${1:Amount number})$0",
		"description": "(cPlayer) () Tosses the item held by the cursor, when the player is in a UI window. Amount defaults to 1."
	},

	"GetGameMode_1": {
		"prefix": "GetGameMode",
		"body": "GetGameMode()$0",
		"description": "(cPlayer) (GameMode eGameMod) Returns the player's gamemode. The player may have their gamemode unassigned, in which case they inherit the gamemode from the current {{cWorld|world}}.<br /> <b>NOTE:</b> Instead of comparing the value returned by this function to the gmXXX constants, use the IsGameModeXXX() functions. These functions handle the gamemode inheritance automatically."
	},

	"TossEquippedItem_0": {
		"prefix": "TossEquippedItem",
		"body": "TossEquippedItem(${1:Amount number})$0",
		"description": "(cPlayer) () Tosses the item that the player has selected in their hotbar. Amount defaults to 1."
	},

	"IsFrozen_0": {
		"prefix": "IsFrozen",
		"body": "IsFrozen()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is frozen. See Freeze()"
	},

	"SendMessagePrivateMsg_0": {
		"prefix": "SendMessagePrivateMsg",
		"body": "SendMessagePrivateMsg(${1:Message string}, ${2:SenderName string})$0",
		"description": "(cPlayer) () Prepends Light Blue [MSG: *SenderName*] / prepends SenderName and colours entire text (depending on ShouldUseChatPrefixes()) and sends message to player. For private messaging."
	},

	"SetVisible_0": {
		"prefix": "SetVisible",
		"body": "SetVisible(${1:IsVisible boolean})$0",
		"description": "(cPlayer) () Sets the player visibility to other players"
	},

	"SetTeam_0": {
		"prefix": "SetTeam",
		"body": "SetTeam(${1:Team cTeam})$0",
		"description": "(cPlayer) () Moves the player to the specified team."
	},

	"SetMainHand_0": {
		"prefix": "SetMainHand",
		"body": "SetMainHand(${1:Hand eMainHand})$0",
		"description": "(cPlayer) () Sets the main hand of the player."
	},

	"SetSprintingMaxSpeed_0": {
		"prefix": "SetSprintingMaxSpeed",
		"body": "SetSprintingMaxSpeed(${1:SprintingMaxSpeed number})$0",
		"description": "(cPlayer) () Sets the sprinting maximum speed, relative to the game default speed. The default value is 1.3. Sends the updated speed to the client, if appropriate."
	},

	"SendMessageRaw_0": {
		"prefix": "SendMessageRaw",
		"body": "SendMessageRaw(${1:Json string}, ${2:eChatType number})$0",
		"description": "(cPlayer) () Sends the specified json string to the player. The optional value eChatType (default ctChatBox) can be ctChatBox, ctSystem or ctAboveActionBar. You can use {{cJson}} to build a json string."
	},

	"SetNormalMaxSpeed_0": {
		"prefix": "SetNormalMaxSpeed",
		"body": "SetNormalMaxSpeed(${1:NormalMaxSpeed number})$0",
		"description": "(cPlayer) () Sets the normal (walking) maximum speed, relative to the game default speed. The default value is 1. Sends the updated speed to the client, if appropriate."
	},

	"GetEyeHeight_0": {
		"prefix": "GetEyeHeight",
		"body": "GetEyeHeight()$0",
		"description": "(cPlayer) (number) Returns the height of the player's eyes, in absolute coords"
	},

	"GetEquippedItem_1": {
		"prefix": "GetEquippedItem",
		"body": "GetEquippedItem()$0",
		"description": "(cPlayer) (cItem) Returns the item that the player is currently holding; empty item if holding nothing."
	},

	"SetName_1": {
		"prefix": "SetName",
		"body": "SetName(${1:Name string})$0",
		"description": "(cPlayer) () Sets the player name. This rename will NOT be visible to any players already in the server who are close enough to see this player."
	},

	"SetIsFishing_0": {
		"prefix": "SetIsFishing",
		"body": "SetIsFishing(${1:IsFishing boolean}, ${2:FloaterEntityID number})$0",
		"description": "(cPlayer) () Sets the 'IsFishing' flag for the player. The floater entity ID is expected for the true variant, it can be omitted when IsFishing is false. FIXME: Undefined behavior when multiple fishing rods are used simultanously"
	},

	"SetFoodSaturationLevel_0": {
		"prefix": "SetFoodSaturationLevel",
		"body": "SetFoodSaturationLevel(${1:FoodSaturationLevel number})$0",
		"description": "(cPlayer) () Sets the food saturation (overcharge of the food level)."
	},

	"GetRestrictions_0": {
		"prefix": "GetRestrictions",
		"body": "GetRestrictions()$0",
		"description": "(cPlayer) (table) Returns an array-table of all the restrictions that the player has assigned to them."
	},

	"SetCustomName_1": {
		"prefix": "SetCustomName",
		"body": "SetCustomName(${1:CustomName string})$0",
		"description": "(cPlayer) () Sets the custom name for this player. If you want to disable the custom name, simply set an empty string. The custom name will be used in the tab-list, in the player nametag and in the tab-completion."
	},

	"HasCustomName_1": {
		"prefix": "HasCustomName",
		"body": "HasCustomName()$0",
		"description": "(cPlayer) (boolean) Returns true if the player has a custom name."
	},

	"GetInventory_0": {
		"prefix": "GetInventory",
		"body": "GetInventory()$0",
		"description": "(cPlayer) (Inventory cInventor) Returns the player's inventory"
	},

	"GetStance_0": {
		"prefix": "GetStance",
		"body": "GetStance()$0",
		"description": "(cPlayer) (number) Returns the player's stance (Y-pos of player's eyes)"
	},

	"GetXpLevel_0": {
		"prefix": "GetXpLevel",
		"body": "GetXpLevel()$0",
		"description": "(cPlayer) (number) Returns the current XP level (based on current XP amount)."
	},

	"Feed_0": {
		"prefix": "Feed",
		"body": "Feed(${1:AddFood number}, ${2:AddSaturation number})$0",
		"description": "(cPlayer) (boolean) Tries to add the specified amounts to food level and food saturation level (only positive amounts expected). Returns true if player was hungry and the food was consumed, false if too satiated."
	},

	"HasSkinPart_0": {
		"prefix": "HasSkinPart",
		"body": "HasSkinPart(${1:Part eSkinPart})$0",
		"description": "(cPlayer) (boolean) Returns true if the player has the specified skin part enabled"
	},

	"SetFoodExhaustionLevel_0": {
		"prefix": "SetFoodExhaustionLevel",
		"body": "SetFoodExhaustionLevel(${1:ExhaustionLevel number})$0",
		"description": "(cPlayer) () Sets the food exhaustion to the specified level."
	},

	"IsInBed_0": {
		"prefix": "IsInBed",
		"body": "IsInBed()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is currently lying in a bed."
	},

	"SetCurrentExperience_0": {
		"prefix": "SetCurrentExperience",
		"body": "SetCurrentExperience(${1:XPAmount number})$0",
		"description": "(cPlayer) (boolean) Sets the current amount of experience (and indirectly, the XP level)."
	},

	"SetCrouch_0": {
		"prefix": "SetCrouch",
		"body": "SetCrouch(${1:IsCrouched boolean})$0",
		"description": "(cPlayer) () Sets the crouch state, broadcasts the change to other players."
	},

	"GetPrefix_0": {
		"prefix": "GetPrefix",
		"body": "GetPrefix()$0",
		"description": "(cPlayer) (string) Returns the prefix to player names for messages (based on their rank), may contain @ format codes."
	},

	"SetBedPos_0": {
		"prefix": "SetBedPos",
		"body": "SetBedPos(${1:Position Vector3i}, ${2:World cWorld})$0",
		"description": "(cPlayer) () Sets the position and world of the player's respawn point, which is also known as the bed position. The player will respawn at this position and world upon death. If the world is not specified, it is set to the player's current world."
	},

	"GetName_5": {
		"prefix": "GetName",
		"body": "GetName()$0",
		"description": "(cPlayer) (string) Returns the player's name"
	},

	"OpenWindow_0": {
		"prefix": "OpenWindow",
		"body": "OpenWindow(${1:Window cWindow})$0",
		"description": "(cPlayer) () Opens the specified UI window for the player."
	},

	"Respawn_0": {
		"prefix": "Respawn",
		"body": "Respawn()$0",
		"description": "(cPlayer) () Restores the health, extinguishes fire, makes visible and sends the Respawn packet."
	},

	"CalcLevelFromXp_0": {
		"prefix": "CalcLevelFromXp",
		"body": "CalcLevelFromXp(${1:XPAmount number})$0",
		"description": "(cPlayer) (number) Returns the level which is reached with the specified amount of XP. Inverse of XpForLevel()."
	},

	"SendMessageFailure_0": {
		"prefix": "SendMessageFailure",
		"body": "SendMessageFailure(${1:Message string})$0",
		"description": "(cPlayer) () Prepends Rose [INFO] / colours entire text (depending on ShouldUseChatPrefixes()) and sends message to player. For a command that failed to run because of insufficient permissions, etc."
	},

	"SendMessageSuccess_0": {
		"prefix": "SendMessageSuccess",
		"body": "SendMessageSuccess(${1:Message string})$0",
		"description": "(cPlayer) () Prepends Green [INFO] / colours entire text (depending on ShouldUseChatPrefixes()) and sends message to player. Success notification."
	},

	"SendMessageInfo_0": {
		"prefix": "SendMessageInfo",
		"body": "SendMessageInfo(${1:Message string})$0",
		"description": "(cPlayer) () Prepends Yellow [INFO] / colours entire text (depending on ShouldUseChatPrefixes()) and sends message to player. Informational message, such as command usage, etc."
	},

	"GetMainHand_0": {
		"prefix": "GetMainHand",
		"body": "GetMainHand()$0",
		"description": "(cPlayer) (eMainHand) Returns the player's main hand."
	},

	"SendRotation_0": {
		"prefix": "SendRotation",
		"body": "SendRotation(${1:YawDegrees number}, ${2:PitchDegrees number})$0",
		"description": "(cPlayer) () Sends the specified rotation to the player, forcing them to look that way"
	},

	"GetClientHandle_0": {
		"prefix": "GetClientHandle",
		"body": "GetClientHandle()$0",
		"description": "(cPlayer) (cClientHandle) Returns the client handle representing the player's connection. May be nil (AI players)."
	},

	"GetFoodSaturationLevel_0": {
		"prefix": "GetFoodSaturationLevel",
		"body": "GetFoodSaturationLevel()$0",
		"description": "(cPlayer) (number) Returns the food saturation (overcharge of the food level, is depleted before food level)"
	},

	"IsGameModeAdventure_1": {
		"prefix": "IsGameModeAdventure",
		"body": "IsGameModeAdventure()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is in the gmAdventure gamemode, or has their gamemode unset and the world is a gmAdventure world."
	},

	"DeltaExperience_0": {
		"prefix": "DeltaExperience",
		"body": "DeltaExperience(${1:DeltaXP number})$0",
		"description": "(cPlayer) (number) Adds or removes XP from the current XP amount. Won't allow XP to go negative. Returns the new experience, -1 on error (XP overflow)."
	},

	"SendSystemMessage_0": {
		"prefix": "SendSystemMessage",
		"body": "SendSystemMessage(${1:Message string})$0",
		"description": "(cPlayer) () Sends the specified message to the player."
	},

	"GetFloaterID_0": {
		"prefix": "GetFloaterID",
		"body": "GetFloaterID()$0",
		"description": "(cPlayer) (number) Returns the Entity ID of the fishing hook floater that belongs to the player. Returns -1 if no floater is associated with the player. FIXME: Undefined behavior when the player has used multiple fishing rods simultanously."
	},

	"IsVisible_0": {
		"prefix": "IsVisible",
		"body": "IsVisible()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is visible to other players"
	},

	"SetFlyingMaxSpeed_0": {
		"prefix": "SetFlyingMaxSpeed",
		"body": "SetFlyingMaxSpeed(${1:FlyingMaxSpeed number})$0",
		"description": "(cPlayer) () Sets the flying maximum speed, relative to the game default speed. The default value is 1. Sends the updated speed to the client."
	},

	"IsGameModeSurvival_1": {
		"prefix": "IsGameModeSurvival",
		"body": "IsGameModeSurvival()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is in the gmSurvival gamemode, or has their gamemode unset and the world is a gmSurvival world."
	},

	"IsGameModeCreative_1": {
		"prefix": "IsGameModeCreative",
		"body": "IsGameModeCreative()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is in the gmCreative gamemode, or has their gamemode unset and the world is a gmCreative world."
	},

	"PlaceBlock_0": {
		"prefix": "PlaceBlock",
		"body": "PlaceBlock(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:BlockType number}, ${5:BlockMeta number})$0",
		"description": "(cPlayer) (boolean) Places a block while impersonating the player. The {{OnPlayerPlacingBlock|HOOK_PLAYER_PLACING_BLOCK}} hook is called before the placement, and if it succeeds, the block is placed and the {{OnPlayerPlacedBlock|HOOK_PLAYER_PLACED_BLOCK}} hook is called. Returns true iff the block is successfully placed. Assumes that the block is in a currently loaded chunk."
	},

	"GetFlyingMaxSpeed_0": {
		"prefix": "GetFlyingMaxSpeed",
		"body": "GetFlyingMaxSpeed()$0",
		"description": "(cPlayer) (number) Returns the maximum flying speed, relative to the default game flying speed. Defaults to 1, but plugins may modify it for faster or slower flying."
	},

	"IsFlying_0": {
		"prefix": "IsFlying",
		"body": "IsFlying()$0",
		"description": "(cPlayer) (boolean) Returns true if the player is flying."
	},

	"SetFoodLevel_0": {
		"prefix": "SetFoodLevel",
		"body": "SetFoodLevel(${1:FoodLevel number})$0",
		"description": "(cPlayer) () Sets the food level (number of half-drumsticks on-screen)"
	},

	"SendMessage_0": {
		"prefix": "SendMessage",
		"body": "SendMessage(${1:Message string})$0",
		"description": "(cPlayer) () Sends the specified message to the player."
	},

	"IsFireproof_0": {
		"prefix": "IsFireproof",
		"body": "IsFireproof()$0",
		"description": "(cPlayer) (boolean) Returns true if a player is fireproof. This is when the flag has been explicitly set, or the player is in creative or spectator mode."
	},

	"HasPermission_0": {
		"prefix": "HasPermission",
		"body": "HasPermission(${1:PermissionString string})$0",
		"description": "(cPlayer) (boolean) Returns true if the player has the specified permission"
	},

	"ForceSetSpeed_0": {
		"prefix": "ForceSetSpeed",
		"body": "ForceSetSpeed(${1:Direction Vector3d})$0",
		"description": "(cPlayer) () Forces the player to move to the given direction."
	},

	"GetXpPercentage_0": {
		"prefix": "GetXpPercentage",
		"body": "GetXpPercentage()$0",
		"description": "(cPlayer) (number) Returns the percentage of the experience bar - the amount of XP towards the next XP level. Between 0 and 1."
	},

	"GetWindow_0": {
		"prefix": "GetWindow",
		"body": "GetWindow()$0",
		"description": "(cPlayer) (cWindow) Returns the currently open UI window. If the player doesn't have any UI window open, returns the inventory window."
	},

	"GetThrowSpeed_0": {
		"prefix": "GetThrowSpeed",
		"body": "GetThrowSpeed(${1:SpeedCoeff number})$0",
		"description": "(cPlayer) (Vector3d) Returns the speed vector for an object thrown with the specified speed coeff. Basically returns the normalized look vector multiplied by the coeff, with a slight random variation."
	},

	"GetTeam_0": {
		"prefix": "GetTeam",
		"body": "GetTeam()$0",
		"description": "(cPlayer) (cTeam) Returns the team that the player belongs to, or nil if none."
	},

	"GetEffectiveGameMode_0": {
		"prefix": "GetEffectiveGameMode",
		"body": "GetEffectiveGameMode()$0",
		"description": "(cPlayer) (GameMode eGameMod) (OBSOLETE) Returns the current resolved game mode of the player. If the player is set to inherit the world's gamemode, returns that instead. See also GetGameMode() and IsGameModeXXX() functions. Note that this function is the same as GetGameMode(), use that function instead."
	},

	"GetLastBedPos_0": {
		"prefix": "GetLastBedPos",
		"body": "GetLastBedPos()$0",
		"description": "(cPlayer) (Vector3i) Returns the position of the last bed the player has slept in, or the world's spawn if no such position was recorded."
	},

	"GetPermissions_0": {
		"prefix": "GetPermissions",
		"body": "GetPermissions()$0",
		"description": "(cPlayer) (table) Returns an array-table of all permissions (strings) that the player has assigned to them through their rank."
	},

	"GetFoodLevel_0": {
		"prefix": "GetFoodLevel",
		"body": "GetFoodLevel()$0",
		"description": "(cPlayer) (number) Returns the food level (number of half-drumsticks on-screen)"
	},

	"Heal_0": {
		"prefix": "Heal",
		"body": "Heal(${1:HitPoints number})$0",
		"description": "(cPlayer) () Heals the player by the specified amount of HPs. Only positive amounts are expected. Sends a health update to the client."
	},

	"GetSprintingMaxSpeed_0": {
		"prefix": "GetSprintingMaxSpeed",
		"body": "GetSprintingMaxSpeed()$0",
		"description": "(cPlayer) (number) Returns the player's maximum sprinting speed, relative to the game default speed. Defaults to 1.3, but plugins may modify it for faster or slower sprinting."
	},

	"GetCurrentXp_0": {
		"prefix": "GetCurrentXp",
		"body": "GetCurrentXp()$0",
		"description": "(cPlayer) (number) Returns the current amount of XP"
	},

	"CloseWindowIfID_0": {
		"prefix": "CloseWindowIfID",
		"body": "CloseWindowIfID(${1:WindowID number}, ${2:CanRefuse boolean})$0",
		"description": "(cPlayer) () Closes the currently open UI window if its ID matches the given ID. If CanRefuse is true (default), the window may refuse the closing."
	},

	"GetSuffix_0": {
		"prefix": "GetSuffix",
		"body": "GetSuffix()$0",
		"description": "(cPlayer) (string) Returns the suffix to player names for messages (based on their rank), may contain @ format codes."
	},

	"AddFoodExhaustion_0": {
		"prefix": "AddFoodExhaustion",
		"body": "AddFoodExhaustion(${1:Exhaustion number})$0",
		"description": "(cPlayer) () Adds the specified number to the food exhaustion. Only positive numbers expected."
	},

	"GetDraggingItem_0": {
		"prefix": "GetDraggingItem",
		"body": "GetDraggingItem()$0",
		"description": "(cPlayer) (cItem) Returns the item the player is dragging in a UI window."
	},

	"cPickup_0": {
		"prefix": "cPickup",
		"body": "cPickup$0",
		"description": "(cPickup) () The Scary Class."
	},

	"IsPlayerCreated_0": {
		"prefix": "IsPlayerCreated",
		"body": "IsPlayerCreated()$0",
		"description": "(cPickup) (boolean) Returns true if the pickup was created by a player"
	},

	"SetAge_2": {
		"prefix": "SetAge",
		"body": "SetAge(${1:AgeTicks number})$0",
		"description": "(cPickup) () Sets the pickup's age, in ticks."
	},

	"IsCollected_0": {
		"prefix": "IsCollected",
		"body": "IsCollected()$0",
		"description": "(cPickup) (boolean) Returns true if this pickup has already been collected (is waiting to be destroyed)"
	},

	"GetAge_2": {
		"prefix": "GetAge",
		"body": "GetAge()$0",
		"description": "(cPickup) (number) Returns the number of ticks that the pickup has existed."
	},

	"CollectedBy_0": {
		"prefix": "CollectedBy",
		"body": "CollectedBy(${1:Player cPlayer})$0",
		"description": "(cPickup) (WasCollected boolea) Tries to make the player collect the pickup. Returns true if the pickup was collected, at least partially."
	},

	"GetLifetime_0": {
		"prefix": "GetLifetime",
		"body": "GetLifetime()$0",
		"description": "(cPickup) (number) Returns the total length of this pickup's lifespan, in ticks."
	},

	"SetCanCombine_0": {
		"prefix": "SetCanCombine",
		"body": "SetCanCombine(${1:CanCombine boolean})$0",
		"description": "(cPickup) () Sets whether this pickup is allowed to combine with other similar pickups."
	},

	"SetLifetime_0": {
		"prefix": "SetLifetime",
		"body": "SetLifetime(${1:LifeTimeInTicks number})$0",
		"description": "(cPickup) () Sets the total lifespan of this pickup before it despawns, in ticks. Does not reset the age of the pickup, use SetAge(0). If new lifetime is less than the current age, pickup will despawn."
	},

	"GetItem_4": {
		"prefix": "GetItem",
		"body": "GetItem()$0",
		"description": "(cPickup) (cItem) Returns the item represented by this pickup"
	},

	"CanCombine_0": {
		"prefix": "CanCombine",
		"body": "CanCombine()$0",
		"description": "(cPickup) (boolean) Returns whether this pickup is allowed to combine with other similar pickups."
	},

	"cBlockEntityWithItems_0": {
		"prefix": "cBlockEntityWithItems",
		"body": "cBlockEntityWithItems$0",
		"description": "(cBlockEntityWithItems) () The Scary Class."
	},

	"GetContents_1": {
		"prefix": "GetContents",
		"body": "GetContents()$0",
		"description": "(cBlockEntityWithItems) (cItemGrid) Returns the cItemGrid object representing the items stored within this block entity"
	},

	"SetSlot_6": {
		"prefix": "SetSlot",
		"body": "SetSlot(${1:SlotNum number}, ${2:cItem cItem})$0",
		"description": "(cBlockEntityWithItems) () Sets the cItem for the specified slot number. Ignored if invalid slot number"
	},

	"SetSlot_7": {
		"prefix": "SetSlot",
		"body": "SetSlot(${1:X number}, ${2:Y number}, ${3:cItem cItem})$0",
		"description": "(cBlockEntityWithItems) () Sets the cItem for the specified slot coords. Ignored if invalid slot coords"
	},

	"GetSlot_4": {
		"prefix": "GetSlot",
		"body": "GetSlot(${1:SlotNum number})$0",
		"description": "(cBlockEntityWithItems) (cItem) Returns the cItem for the specified slot number. Returns nil for invalid slot numbers"
	},

	"GetSlot_5": {
		"prefix": "GetSlot",
		"body": "GetSlot(${1:X number}, ${2:Y number})$0",
		"description": "(cBlockEntityWithItems) (cItem) Returns the cItem for the specified slot coords. Returns nil for invalid slot coords"
	},

	"cPawn_0": {
		"prefix": "cPawn",
		"body": "cPawn$0",
		"description": "(cPawn) () The Scary Class."
	},

	"ClearEntityEffects_0": {
		"prefix": "ClearEntityEffects",
		"body": "ClearEntityEffects()$0",
		"description": "(cPawn) () Removes all currently applied entity effects"
	},

	"AddEntityEffect_0": {
		"prefix": "AddEntityEffect",
		"body": "AddEntityEffect(${1:EffectType cEntityEffect#eType}, ${2:EffectDurationTicks number}, ${3:EffectIntensity number}, ${4:DistanceModifier number})$0",
		"description": "(cPawn) () Applies an entity effect. Checks with plugins if they allow the addition. EffectIntensity is the level of the effect (0 = Potion I, 1 = Potion II, etc). DistanceModifier is the scalar multiplied to the potion duration (only applies to splash potions)."
	},

	"HasEntityEffect_0": {
		"prefix": "HasEntityEffect",
		"body": "HasEntityEffect(${1:EffectType cEntityEffect#eType})$0",
		"description": "(cPawn) (boolean) Returns true, if the supplied entity effect type is currently applied"
	},

	"RemoveEntityEffect_0": {
		"prefix": "RemoveEntityEffect",
		"body": "RemoveEntityEffect(${1:EffectType cEntityEffect#eType})$0",
		"description": "(cPawn) () Removes a currently applied entity effect"
	},

	"cMojangAPI_0": {
		"prefix": "cMojangAPI",
		"body": "cMojangAPI$0",
		"description": "(cMojangAPI) () The Scary Class."
	},

	"MakeUUIDDashed_0": {
		"prefix": "MakeUUIDDashed",
		"body": "MakeUUIDDashed(${1:UUID cUUID})$0",
		"description": "(cMojangAPI) (DashedUUID strin) Converts the UUID to a dashed format ('01234567-8901-2345-6789-012345678901'). An alias for cUUID:ToLongString()"
	},

	"GetPlayerNameFromUUID_0": {
		"prefix": "GetPlayerNameFromUUID",
		"body": "GetPlayerNameFromUUID(${1:UUID cUUID}, ${2:UseOnlyCached boolean})$0",
		"description": "(cMojangAPI) (PlayerName strin) Returns the playername that corresponds to the given UUID, or an empty string on error. If UseOnlyCached is false (the default), queries the Mojang servers if the UUID is not in the cache. The UUID can be either short or dashed. <br /><b>WARNING</b>: Do NOT use this function with UseOnlyCached set to false while the server is running. Only use it when the server is starting up (inside the Initialize() method), otherwise you will lag the server severely."
	},

	"AddPlayerNameToUUIDMapping_0": {
		"prefix": "AddPlayerNameToUUIDMapping",
		"body": "AddPlayerNameToUUIDMapping(${1:PlayerName string}, ${2:UUID cUUID})$0",
		"description": "(cMojangAPI) () Adds the specified PlayerName-to-UUID mapping into the cache, with current timestamp."
	},

	"GetUUIDsFromPlayerNames_0": {
		"prefix": "GetUUIDsFromPlayerNames",
		"body": "GetUUIDsFromPlayerNames(${1:PlayerNames string}, ${2:UseOnlyCached boolean})$0",
		"description": "(cMojangAPI) (table) Returns a table that contains the map, 'PlayerName' -> '(short) UUID', for all valid playernames in the input array-table. PlayerNames not recognized will not be set in the returned map. If UseOnlyCached is false (the default), queries the Mojang servers for the results that are not in the cache. <br /><b>WARNING</b>: Do NOT use this function with UseOnlyCached set to false while the server is running. Only use it when the server is starting up (inside the Initialize() method), otherwise you will lag the server severely."
	},

	"MakeUUIDShort_0": {
		"prefix": "MakeUUIDShort",
		"body": "MakeUUIDShort(${1:UUID cUUID})$0",
		"description": "(cMojangAPI) (ShortUUID strin) Converts the UUID to a short format (without dashes, '01234567890123456789012345678901'). An alias for cUUID:ToShortString()"
	},

	"GetUUIDFromPlayerName_0": {
		"prefix": "GetUUIDFromPlayerName",
		"body": "GetUUIDFromPlayerName(${1:PlayerName string}, ${2:UseOnlyCached boolean})$0",
		"description": "(cMojangAPI) (UUID strin) Returns the (short) UUID that corresponds to the given playername, or an empty string on error. If UseOnlyCached is false (the default), queries the Mojang servers if the playername is not in the cache. <br /><b>WARNING</b>: Do NOT use this function with UseOnlyCached set to false while the server is running. Only use it when the server is starting up (inside the Initialize() method), otherwise you will lag the server severely."
	},

	"cMapManager_0": {
		"prefix": "cMapManager",
		"body": "cMapManager$0",
		"description": "(cMapManager) () The Scary Class."
	},

	"GetNumMaps_0": {
		"prefix": "GetNumMaps",
		"body": "GetNumMaps()$0",
		"description": "(cMapManager) (number) Returns the number of registered maps."
	},

	"DoWithMap_0": {
		"prefix": "DoWithMap",
		"body": "DoWithMap(${1:MapID number}, ${2:CallbackFunction function})$0",
		"description": "(cMapManager) (boolean) If a map with the specified ID exists, calls the CallbackFunction for that map. The CallbackFunction has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cMap|Map}})</pre> Returns true if the map was found and the callback called, false if map not found."
	},

	"cItem_0": {
		"prefix": "cItem",
		"body": "cItem$0",
		"description": "(cItem) () The Scary Class."
	},

	"m_ItemType_0": {
		"prefix": "m_ItemType",
		"body": "m_ItemType$0",
		"description": "(cItem) () The item type. One of E_ITEM_ or E_BLOCK_ constants"
	},

	"m_ItemDamage_0": {
		"prefix": "m_ItemDamage",
		"body": "m_ItemDamage$0",
		"description": "(cItem) () The damage of the item. Zero means no damage. Maximum damage can be queried with GetMaxDamage()"
	},

	"m_CustomName_0": {
		"prefix": "m_CustomName",
		"body": "m_CustomName$0",
		"description": "(cItem) () The custom name for an item."
	},

	"m_Enchantments_0": {
		"prefix": "m_Enchantments",
		"body": "m_Enchantments$0",
		"description": "(cItem) () The enchantments of the item."
	},

	"m_RepairCost_0": {
		"prefix": "m_RepairCost",
		"body": "m_RepairCost$0",
		"description": "(cItem) () The repair cost of the item. The anvil need this value"
	},

	"m_ItemCount_0": {
		"prefix": "m_ItemCount",
		"body": "m_ItemCount$0",
		"description": "(cItem) () Number of items in this stack"
	},

	"m_LoreTable_0": {
		"prefix": "m_LoreTable",
		"body": "m_LoreTable$0",
		"description": "(cItem) () The lore for an item. Represented as an array table of lines."
	},

	"IsEqual_0": {
		"prefix": "IsEqual",
		"body": "IsEqual(${1:OtherItem cItem})$0",
		"description": "(cItem) (boolean) Returns true if the item in the parameter is the same as the one stored in the object (type, damage, lore, name and enchantments)"
	},

	"DamageItem_3": {
		"prefix": "DamageItem",
		"body": "DamageItem(${1:Amount number})$0",
		"description": "(cItem) (HasReachedMaxDamage boolea) Adds the specified damage. Returns true when damage reaches max value and the item should be destroyed (but doesn't destroy the item)"
	},

	"IsFullStack_0": {
		"prefix": "IsFullStack",
		"body": "IsFullStack()$0",
		"description": "(cItem) (boolean) Returns true if the item is stacked up to its maximum stacking"
	},

	"IsEnchantable_0": {
		"prefix": "IsEnchantable",
		"body": "IsEnchantable(${1:ItemType number}, ${2:FromBook boolean})$0",
		"description": "(cItem) (boolean) Returns true if the specified item type is enchantable. If FromBook is true, the function is used in the anvil inventory with book enchantments. So it checks the 'only book enchantments' too. Example: You can only enchant a hoe with a book."
	},

	"AddEnchantmentsFromItem_0": {
		"prefix": "AddEnchantmentsFromItem",
		"body": "AddEnchantmentsFromItem(${1:Additive cItem})$0",
		"description": "(cItem) (LevelCost numbe) Adds the enchantments from the specified item to this item, returning the cost as if this were an anvil."
	},

	"GetMaxStackSize_0": {
		"prefix": "GetMaxStackSize",
		"body": "GetMaxStackSize()$0",
		"description": "(cItem) (number) Returns the maximum stack size for this item."
	},

	"IsDamageable_0": {
		"prefix": "IsDamageable",
		"body": "IsDamageable()$0",
		"description": "(cItem) (boolean) Returns true if this item does account for its damage"
	},

	"IsBothNameAndLoreEmpty_0": {
		"prefix": "IsBothNameAndLoreEmpty",
		"body": "IsBothNameAndLoreEmpty()$0",
		"description": "(cItem) (boolean) Returns if both the custom name and lore are not set."
	},

	"GetEnchantability_0": {
		"prefix": "GetEnchantability",
		"body": "GetEnchantability()$0",
		"description": "(cItem) (number) Returns the enchantability of the item. Returns zero if the item doesn't have enchantability."
	},

	"Empty_0": {
		"prefix": "Empty",
		"body": "Empty()$0",
		"description": "(cItem) () Resets the instance to an empty item"
	},

	"Clear_7": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cItem) () Resets the instance to an empty item"
	},

	"CopyOne_0": {
		"prefix": "CopyOne",
		"body": "CopyOne()$0",
		"description": "(cItem) (cItem) Creates a copy of this object, with its count set to 1"
	},

	"AddCount_0": {
		"prefix": "AddCount",
		"body": "AddCount(${1:AmountToAdd number})$0",
		"description": "(cItem) (cItem) Adds the specified amount to the item count. Returns self (useful for chaining)."
	},

	"AddEnchantment_0": {
		"prefix": "AddEnchantment",
		"body": "AddEnchantment(${1:Enchantment ID number}, ${2:Level number}, ${3:FromBook boolean})$0",
		"description": "(cItem) (number) Adds the given enchantment at the given level to this item, following anvil enchantment combining rules. Returns the XP level cost of the addition. FromBook specifies whether to use the XP multiplier for books or the multiplier used for other items, if true it uses the multiplier for books."
	},

	"cItem_0": {
		"prefix": "cItem",
		"body": "cItem()$0",
		"description": "(cItem) (cItem) Creates a new empty cItem object"
	},

	"cItem_1": {
		"prefix": "cItem",
		"body": "cItem(${1:ItemType number}, ${2:Count number}, ${3:Damage number}, ${4:EnchantmentString string}, ${5:CustomName string}, ${6:Lore table})$0",
		"description": "(cItem) (cItem) Creates a new cItem object of the specified type, count (1 by default), damage (0 by default), enchantments (non-enchanted by default), CustomName (empty by default) and Lore (string, empty by default)"
	},

	"cItem_2": {
		"prefix": "cItem",
		"body": "cItem(${1:cItem cItem})$0",
		"description": "(cItem) (cItem) Creates an exact copy of the cItem object in the parameter"
	},

	"IsSameType_0": {
		"prefix": "IsSameType",
		"body": "IsSameType(${1:OtherItem cItem})$0",
		"description": "(cItem) (boolean) Returns true if the item in the parameter is of the same ItemType as the one stored in the object. This is true even if the two items have different enchantments"
	},

	"GetMaxDamage_0": {
		"prefix": "GetMaxDamage",
		"body": "GetMaxDamage()$0",
		"description": "(cItem) (number) Returns the maximum value for damage that this item can get before breaking; zero if damage is not accounted for for this item type"
	},

	"EnchantByXPLevels_0": {
		"prefix": "EnchantByXPLevels",
		"body": "EnchantByXPLevels(${1:NumXPLevels number})$0",
		"description": "(cItem) (HasEnchanted boolea) Randomly enchants the item using the specified number of XP levels. Returns true if the item was enchanted, false if not (not enchantable / too many enchantments already)."
	},

	"IsEmpty_1": {
		"prefix": "IsEmpty",
		"body": "IsEmpty()$0",
		"description": "(cItem) (boolean) Returns true if this object represents an empty item (zero count or invalid ItemType)"
	},

	"IsLoreEmpty_0": {
		"prefix": "IsLoreEmpty",
		"body": "IsLoreEmpty()$0",
		"description": "(cItem) (boolean) Returns if the lore of the cItem is empty."
	},

	"IsCustomNameEmpty_0": {
		"prefix": "IsCustomNameEmpty",
		"body": "IsCustomNameEmpty()$0",
		"description": "(cItem) (boolean) Returns if the custom name is empty."
	},

	"cIniFile_0": {
		"prefix": "cIniFile",
		"body": "cIniFile$0",
		"description": "(cIniFile) () The Scary Class."
	},

	"noID_0": {
		"prefix": "noID",
		"body": "noID$0",
		"description": "(cIniFile) () "
	},

	"DeleteKeyComments_0": {
		"prefix": "DeleteKeyComments",
		"body": "DeleteKeyComments(${1:KeyID number})$0",
		"description": "(cIniFile) (IsSuccess boolea) Deletes all comments for the specified key. Returns true if successful."
	},

	"DeleteKeyComments_1": {
		"prefix": "DeleteKeyComments",
		"body": "DeleteKeyComments(${1:KeyName string})$0",
		"description": "(cIniFile) (IsSuccess boolea) Deletes all comments for the specified key. Returns true if successful."
	},

	"AddKeyComment_0": {
		"prefix": "AddKeyComment",
		"body": "AddKeyComment(${1:KeyID number}, ${2:Comment string})$0",
		"description": "(cIniFile) () Adds a comment to be stored in the file under the specified key"
	},

	"AddKeyComment_1": {
		"prefix": "AddKeyComment",
		"body": "AddKeyComment(${1:KeyName string}, ${2:Comment string})$0",
		"description": "(cIniFile) () Adds a comment to be stored in the file under the specified key"
	},

	"DeleteValue_0": {
		"prefix": "DeleteValue",
		"body": "DeleteValue(${1:KeyName string}, ${2:ValueName string})$0",
		"description": "(cIniFile) (IsSuccess boolea) Deletes the specified value. Returns true if successful."
	},

	"GetNumKeyComments_0": {
		"prefix": "GetNumKeyComments",
		"body": "GetNumKeyComments(${1:KeyID number})$0",
		"description": "(cIniFile) (number) Returns the number of comments under the specified key"
	},

	"GetNumKeyComments_1": {
		"prefix": "GetNumKeyComments",
		"body": "GetNumKeyComments(${1:KeyName string})$0",
		"description": "(cIniFile) (number) Returns the number of comments under the specified key"
	},

	"FindKey_0": {
		"prefix": "FindKey",
		"body": "FindKey(${1:KeyName string})$0",
		"description": "(cIniFile) (number) Returns the KeyID for the specified key name, or the noID constant if the key doesn't exist."
	},

	"GetNumHeaderComments_0": {
		"prefix": "GetNumHeaderComments",
		"body": "GetNumHeaderComments()$0",
		"description": "(cIniFile) (number) Retuns the number of header comments."
	},

	"DeleteHeaderComments_0": {
		"prefix": "DeleteHeaderComments",
		"body": "DeleteHeaderComments()$0",
		"description": "(cIniFile) () Deletes all headers comments."
	},

	"Clear_8": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cIniFile) () Removes all the in-memory data. Note that , like all the other operations, this doesn't affect any file data."
	},

	"AddValue_0": {
		"prefix": "AddValue",
		"body": "AddValue(${1:KeyName string}, ${2:ValueName string}, ${3:Value string})$0",
		"description": "(cIniFile) () Adds a new value of the specified name to the specified key. If another value of the same name exists in the key, both are kept (nonstandard INI file)"
	},

	"GetKeyComment_0": {
		"prefix": "GetKeyComment",
		"body": "GetKeyComment(${1:KeyID number}, ${2:CommentID number})$0",
		"description": "(cIniFile) (string) Returns the specified key comment, or an empty string if such a comment doesn't exist"
	},

	"GetKeyComment_1": {
		"prefix": "GetKeyComment",
		"body": "GetKeyComment(${1:KeyName string}, ${2:CommentID number})$0",
		"description": "(cIniFile) (string) Returns the specified key comment, or an empty string if such a comment doesn't exist"
	},

	"DeleteValueByID_0": {
		"prefix": "DeleteValueByID",
		"body": "DeleteValueByID(${1:KeyID number}, ${2:ValueID number})$0",
		"description": "(cIniFile) (IsSuccess boolea) Deletes the specified value. Returns true if successful."
	},

	"Flush_0": {
		"prefix": "Flush",
		"body": "Flush()$0",
		"description": "(cIniFile) (boolean) Writes the data stored in the object to the file that was last associated with the object (ReadFile() or WriteFile()). Returns true on success, false on failure."
	},

	"constructor_4": {
		"prefix": "constructor",
		"body": "constructor()$0",
		"description": "(cIniFile) (cIniFile) Creates a new empty cIniFile object."
	},

	"AddValueI_0": {
		"prefix": "AddValueI",
		"body": "AddValueI(${1:KeyName string}, ${2:ValueName string}, ${3:Value number})$0",
		"description": "(cIniFile) () Adds a new integer value of the specified name to the specified key. If another value of the same name exists in the key, both are kept (nonstandard INI file)"
	},

	"AddValueF_0": {
		"prefix": "AddValueF",
		"body": "AddValueF(${1:KeyName string}, ${2:ValueName string}, ${3:Value number})$0",
		"description": "(cIniFile) () Adds a new float value of the specified name to the specified key. If another value of the same name exists in the key, both are kept (nonstandard INI file)"
	},

	"GetValueSetI_0": {
		"prefix": "GetValueSetI",
		"body": "GetValueSetI(${1:KeyName string}, ${2:ValueName string}, ${3:DefaultValue number})$0",
		"description": "(cIniFile) (number) Returns the value of the specified name under the specified key, as an integer. If the value doesn't exist, creates it with the specified default (zero if not given)."
	},

	"AddHeaderComment_0": {
		"prefix": "AddHeaderComment",
		"body": "AddHeaderComment(${1:Comment string})$0",
		"description": "(cIniFile) () Adds a comment to be stored in the file header."
	},

	"GetNumKeys_0": {
		"prefix": "GetNumKeys",
		"body": "GetNumKeys()$0",
		"description": "(cIniFile) (number) Returns the total number of keys. This is the range for the KeyID (0 .. GetNumKeys() - 1)"
	},

	"GetValueB_0": {
		"prefix": "GetValueB",
		"body": "GetValueB(${1:KeyName string}, ${2:ValueName string}, ${3:DefaultValue boolean})$0",
		"description": "(cIniFile) (boolean) Returns the value of the specified name under the specified key, as a bool. Returns DefaultValue (false if not given) if the value doesn't exist."
	},

	"SetValueF_0": {
		"prefix": "SetValueF",
		"body": "SetValueF(${1:KeyName string}, ${2:ValueName string}, ${3:NewValue number}, ${4:CreateIfNotExists boolean})$0",
		"description": "(cIniFile) (IsSuccess boolea) Overwrites the specified value with a new floating-point number value. If CreateIfNotExists is true (default) and the value doesn't exist, it is first created. Returns true if the value was successfully set, false if not (didn't exists, CreateIfNotExists false)."
	},

	"GetValueName_0": {
		"prefix": "GetValueName",
		"body": "GetValueName(${1:KeyID number}, ${2:ValueID number})$0",
		"description": "(cIniFile) (string) Returns the name of the value specified by its ID. Inverse for FindValue()."
	},

	"GetValueName_1": {
		"prefix": "GetValueName",
		"body": "GetValueName(${1:KeyName string}, ${2:ValueID number})$0",
		"description": "(cIniFile) (string) Returns the name of the value specified by its ID. Inverse for FindValue()."
	},

	"FindValue_0": {
		"prefix": "FindValue",
		"body": "FindValue(${1:KeyID number}, ${2:ValueName string})$0",
		"description": "(cIniFile) (ValueID numbe) Returns the ValueID for the specified value name, or the noID constant if the specified key doesn't contain a value of that name."
	},

	"DeleteKey_0": {
		"prefix": "DeleteKey",
		"body": "DeleteKey(${1:KeyName string})$0",
		"description": "(cIniFile) (IsSuccess boolea) Deletes the specified key, and all values in that key. Returns true if successful."
	},

	"AddValueB_0": {
		"prefix": "AddValueB",
		"body": "AddValueB(${1:KeyName string}, ${2:ValueName string}, ${3:Value boolean})$0",
		"description": "(cIniFile) () Adds a new bool value of the specified name to the specified key. If another value of the same name exists in the key, both are kept (nonstandard INI file)"
	},

	"ReadFile_0": {
		"prefix": "ReadFile",
		"body": "ReadFile(${1:FileName string}, ${2:AllowExampleFallback boolean})$0",
		"description": "(cIniFile) (IsSuccess boolea) Reads the values from the specified file. Previous in-memory contents are lost. If the file cannot be opened, and AllowExample is true, another file, 'filename.example.ini', is loaded and then saved as 'filename.ini'. Returns true if successful, false if not."
	},

	"GetHeaderComment_0": {
		"prefix": "GetHeaderComment",
		"body": "GetHeaderComment(${1:CommentID number})$0",
		"description": "(cIniFile) (string) Returns the specified header comment, or an empty string if such comment doesn't exist"
	},

	"HasValue_0": {
		"prefix": "HasValue",
		"body": "HasValue(${1:KeyName string}, ${2:ValueName string})$0",
		"description": "(cIniFile) (boolean) Returns true if the specified value is present."
	},

	"CaseInsensitive_0": {
		"prefix": "CaseInsensitive",
		"body": "CaseInsensitive()$0",
		"description": "(cIniFile) () Sets key names' and value names' comparisons to case insensitive (default)."
	},

	"GetValueSetF_0": {
		"prefix": "GetValueSetF",
		"body": "GetValueSetF(${1:KeyName string}, ${2:ValueName string}, ${3:DefaultValue number})$0",
		"description": "(cIniFile) (number) Returns the value of the specified name under the specified key, as a floating-point number. If the value doesn't exist, creates it with the specified default (zero if not given)."
	},

	"GetValueSetB_0": {
		"prefix": "GetValueSetB",
		"body": "GetValueSetB(${1:KeyName string}, ${2:ValueName string}, ${3:DefaultValue boolean})$0",
		"description": "(cIniFile) (boolean) Returns the value of the specified name under the specified key, as a bool. If the value doesn't exist, creates it with the specified default (false if not given)."
	},

	"GetValueSet_0": {
		"prefix": "GetValueSet",
		"body": "GetValueSet(${1:KeyName string}, ${2:ValueName string}, ${3:DefaultValue string})$0",
		"description": "(cIniFile) (string) Returns the value of the specified name under the specified key. If the value doesn't exist, creates it with the specified default (empty string if not given)."
	},

	"GetValue_0": {
		"prefix": "GetValue",
		"body": "GetValue(${1:KeyName string}, ${2:ValueName string}, ${3:DefaultValue string})$0",
		"description": "(cIniFile) (string) Returns the value of the specified name under the specified key. Returns DefaultValue (empty string if not given) if the value doesn't exist."
	},

	"GetValue_1": {
		"prefix": "GetValue",
		"body": "GetValue(${1:KeyID number}, ${2:ValueID number}, ${3:DefaultValue string})$0",
		"description": "(cIniFile) (string) Returns the value of the specified name under the specified key. Returns DefaultValue (empty string if not given) if the value doesn't exist."
	},

	"CaseSensitive_0": {
		"prefix": "CaseSensitive",
		"body": "CaseSensitive()$0",
		"description": "(cIniFile) () Sets key names and value names comparisons to case sensitive."
	},

	"SetValueI_0": {
		"prefix": "SetValueI",
		"body": "SetValueI(${1:KeyName string}, ${2:ValueName string}, ${3:NewValue number}, ${4:CreateIfNotExists boolean})$0",
		"description": "(cIniFile) (IsSuccess boolea) Overwrites the specified value with a new integer value. If CreateIfNotExists is true (default) and the value doesn't exist, it is first created. Returns true if the value was successfully set, false if not (didn't exists, CreateIfNotExists false)."
	},

	"GetValueF_0": {
		"prefix": "GetValueF",
		"body": "GetValueF(${1:KeyName string}, ${2:ValueName string}, ${3:DefaultValue number})$0",
		"description": "(cIniFile) (number) Returns the value of the specified name under the specified key, as a floating-point number. Returns DefaultValue (zero if not given) if the value doesn't exist."
	},

	"AddKeyName_0": {
		"prefix": "AddKeyName",
		"body": "AddKeyName(${1:KeyName string})$0",
		"description": "(cIniFile) (number) Adds a new key of the specified name. Returns the KeyID of the new key."
	},

	"GetNumValues_0": {
		"prefix": "GetNumValues",
		"body": "GetNumValues(${1:KeyID number})$0",
		"description": "(cIniFile) (number) Returns the number of values stored under the specified key."
	},

	"GetNumValues_1": {
		"prefix": "GetNumValues",
		"body": "GetNumValues(${1:KeyName string})$0",
		"description": "(cIniFile) (number) Returns the number of values stored under the specified key."
	},

	"GetValueI_0": {
		"prefix": "GetValueI",
		"body": "GetValueI(${1:KeyName string}, ${2:ValueName string}, ${3:DefaultValue number})$0",
		"description": "(cIniFile) (number) Returns the value of the specified name under the specified key, as an integer. Returns DefaultValue (zero if not given) if the value doesn't exist."
	},

	"WriteFile_0": {
		"prefix": "WriteFile",
		"body": "WriteFile(${1:FileName string})$0",
		"description": "(cIniFile) (IsSuccess boolea) Writes the current in-memory data into the specified file. Returns true if successful, false if not."
	},

	"GetKeyName_0": {
		"prefix": "GetKeyName",
		"body": "GetKeyName(${1:KeyID number})$0",
		"description": "(cIniFile) (string) Returns the key name for the specified key ID. Inverse for FindKey()."
	},

	"DeleteHeaderComment_0": {
		"prefix": "DeleteHeaderComment",
		"body": "DeleteHeaderComment(${1:CommentID number})$0",
		"description": "(cIniFile) (IsSuccess boolea) Deletes the specified header comment. Returns true if successful."
	},

	"SetValueB_0": {
		"prefix": "SetValueB",
		"body": "SetValueB(${1:KeyName string}, ${2:ValueName string}, ${3:NewValue boolean}, ${4:CreateIfNotExists boolean})$0",
		"description": "(cIniFile) (IsSuccess boolea) Overwrites the specified value with a new bool value. If CreateIfNotExists is true (default) and the value doesn't exist, it is first created. Returns true if the value was successfully set, false if not (didn't exists, CreateIfNotExists false)."
	},

	"DeleteKeyComment_0": {
		"prefix": "DeleteKeyComment",
		"body": "DeleteKeyComment(${1:KeyID number}, ${2:CommentID number})$0",
		"description": "(cIniFile) (IsSuccess boolea) Deletes the specified key comment. Returns true if successful."
	},

	"DeleteKeyComment_1": {
		"prefix": "DeleteKeyComment",
		"body": "DeleteKeyComment(${1:KeyName string}, ${2:CommentID number})$0",
		"description": "(cIniFile) (IsSuccess boolea) Deletes the specified key comment. Returns true if successful."
	},

	"SetValue_0": {
		"prefix": "SetValue",
		"body": "SetValue(${1:KeyID number}, ${2:ValueID number}, ${3:NewValue string})$0",
		"description": "(cIniFile) (IsSuccess boolea) Overwrites the specified value with a new value. If the specified value doesn't exist, returns false (doesn't add)."
	},

	"SetValue_1": {
		"prefix": "SetValue",
		"body": "SetValue(${1:KeyName string}, ${2:ValueName string}, ${3:NewValue string}, ${4:CreateIfNotExists boolean})$0",
		"description": "(cIniFile) (IsSuccess boolea) Overwrites the specified value with a new value. If CreateIfNotExists is true (default) and the value doesn't exist, it is first created. Returns true if the value was successfully set, false if not (didn't exists, CreateIfNotExists false)."
	},

	"HTTPFormData_0": {
		"prefix": "HTTPFormData",
		"body": "HTTPFormData$0",
		"description": "(HTTPFormData) () The Scary Class."
	},

	"Value_0": {
		"prefix": "Value",
		"body": "Value$0",
		"description": "(HTTPFormData) () Value of the form element. Contains the raw data as sent by the browser."
	},

	"Type_0": {
		"prefix": "Type",
		"body": "Type$0",
		"description": "(HTTPFormData) () Type of the data (usually empty)"
	},

	"Name_0": {
		"prefix": "Name",
		"body": "Name$0",
		"description": "(HTTPFormData) () Name of the form element"
	},

	"cServerHandle_0": {
		"prefix": "cServerHandle",
		"body": "cServerHandle$0",
		"description": "(cServerHandle) () The Scary Class."
	},

	"IsListening_0": {
		"prefix": "IsListening",
		"body": "IsListening()$0",
		"description": "(cServerHandle) (boolean) Returns true if the socket is listening."
	},

	"Close_1": {
		"prefix": "Close",
		"body": "Close()$0",
		"description": "(cServerHandle) () Closes the listening socket. No more connections will be accepted, and all current connections will be closed."
	},

	"cArrowEntity_0": {
		"prefix": "cArrowEntity",
		"body": "cArrowEntity$0",
		"description": "(cArrowEntity) () The Scary Class."
	},

	"GetBlockHit_0": {
		"prefix": "GetBlockHit",
		"body": "GetBlockHit()$0",
		"description": "(cArrowEntity) (Vector3i) Returns the coords of the block into which the arrow is stuck. Undefined if the arrow is still moving."
	},

	"SetPickupState_0": {
		"prefix": "SetPickupState",
		"body": "SetPickupState(${1:PickupState cArrowEntity#ePickupState})$0",
		"description": "(cArrowEntity) () Sets the pickup state (one of the psXXX constants, above)"
	},

	"GetDamageCoeff_0": {
		"prefix": "GetDamageCoeff",
		"body": "GetDamageCoeff()$0",
		"description": "(cArrowEntity) (number) Returns the damage coefficient stored within the arrow. The damage dealt by this arrow is multiplied by this coeff"
	},

	"CanPickup_0": {
		"prefix": "CanPickup",
		"body": "CanPickup(${1:Player cPlayer})$0",
		"description": "(cArrowEntity) (boolean) Returns true if the specified player can pick the arrow when it's on the ground"
	},

	"SetIsCritical_0": {
		"prefix": "SetIsCritical",
		"body": "SetIsCritical(${1:IsCritical boolean})$0",
		"description": "(cArrowEntity) () Sets the IsCritical flag on the arrow. Critical arrow deal additional damage"
	},

	"GetPickupState_0": {
		"prefix": "GetPickupState",
		"body": "GetPickupState()$0",
		"description": "(cArrowEntity) (cArrowEntity#ePickupState) Returns the pickup state (one of the psXXX constants, above)"
	},

	"SetDamageCoeff_0": {
		"prefix": "SetDamageCoeff",
		"body": "SetDamageCoeff(${1:DamageCoeff number})$0",
		"description": "(cArrowEntity) () Sets the damage coefficient. The damage dealt by this arrow is multiplied by this coeff"
	},

	"IsCritical_0": {
		"prefix": "IsCritical",
		"body": "IsCritical()$0",
		"description": "(cArrowEntity) (boolean) Returns true if the arrow should deal critical damage. Based on the bow charge when the arrow was shot."
	},

	"psInCreative_0": {
		"prefix": "psInCreative",
		"body": "psInCreative$0",
		"description": "(cArrowEntity) () The arrow can be picked up only by players in creative gamemode"
	},

	"psInSurvivalOrCreative_0": {
		"prefix": "psInSurvivalOrCreative",
		"body": "psInSurvivalOrCreative$0",
		"description": "(cArrowEntity) () The arrow can be picked up by players in survival or creative gamemode"
	},

	"psNoPickup_0": {
		"prefix": "psNoPickup",
		"body": "psNoPickup$0",
		"description": "(cArrowEntity) () The arrow cannot be picked up at all"
	},

	"cDropSpenserEntity_0": {
		"prefix": "cDropSpenserEntity",
		"body": "cDropSpenserEntity$0",
		"description": "(cDropSpenserEntity) () The Scary Class."
	},

	"ContentsWidth_4": {
		"prefix": "ContentsWidth",
		"body": "ContentsWidth$0",
		"description": "(cDropSpenserEntity) () Width (X) of the {{cItemGrid}} representing the contents"
	},

	"ContentsHeight_4": {
		"prefix": "ContentsHeight",
		"body": "ContentsHeight$0",
		"description": "(cDropSpenserEntity) () Height (Y) of the {{cItemGrid}} representing the contents"
	},

	"AddDropSpenserDir_0": {
		"prefix": "AddDropSpenserDir",
		"body": "AddDropSpenserDir(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:BlockMeta number})$0",
		"description": "(cDropSpenserEntity) (BlockX number, BlockY number, BlockZ numbe) Adjusts the block coords to where the dropspenser items materialize"
	},

	"Activate_0": {
		"prefix": "Activate",
		"body": "Activate()$0",
		"description": "(cDropSpenserEntity) () Sets the block entity to dropspense an item in the next tick"
	},

	"cEntity_0": {
		"prefix": "cEntity",
		"body": "cEntity$0",
		"description": "(cEntity) () The Scary Class."
	},

	"INVALID_ID_0": {
		"prefix": "INVALID_ID",
		"body": "INVALID_ID$0",
		"description": "(cEntity) () Special value of an entity ID, indicating a failure. Used primarily in functions that create entities when the entity cannot be created."
	},

	"etEntity_0": {
		"prefix": "etEntity",
		"body": "etEntity$0",
		"description": "(cEntity) () No further specialization available"
	},

	"etTNT_0": {
		"prefix": "etTNT",
		"body": "etTNT$0",
		"description": "(cEntity) () The entity is a {{cTNTEntity}}"
	},

	"etMinecart_0": {
		"prefix": "etMinecart",
		"body": "etMinecart$0",
		"description": "(cEntity) () The entity is a {{cMinecart}} descendant"
	},

	"etFloater_0": {
		"prefix": "etFloater",
		"body": "etFloater$0",
		"description": "(cEntity) () The entity is a fishing rod floater"
	},

	"etBoat_0": {
		"prefix": "etBoat",
		"body": "etBoat$0",
		"description": "(cEntity) () The entity is a {{cBoat}}"
	},

	"etLeashKnot_0": {
		"prefix": "etLeashKnot",
		"body": "etLeashKnot$0",
		"description": "(cEntity) () The entity is a leash knot"
	},

	"etFallingBlock_0": {
		"prefix": "etFallingBlock",
		"body": "etFallingBlock$0",
		"description": "(cEntity) () The entity is a {{cFallingBlock}}"
	},

	"etProjectile_0": {
		"prefix": "etProjectile",
		"body": "etProjectile$0",
		"description": "(cEntity) () The entity is a {{cProjectileEntity}} descendant"
	},

	"etExpOrb_0": {
		"prefix": "etExpOrb",
		"body": "etExpOrb$0",
		"description": "(cEntity) () The entity is a {{cExpOrb}}"
	},

	"etPickup_0": {
		"prefix": "etPickup",
		"body": "etPickup$0",
		"description": "(cEntity) () The entity is a {{cPickup}}"
	},

	"etPlayer_0": {
		"prefix": "etPlayer",
		"body": "etPlayer$0",
		"description": "(cEntity) () The entity is a {{cPlayer}}"
	},

	"etMonster_0": {
		"prefix": "etMonster",
		"body": "etMonster$0",
		"description": "(cEntity) () The entity is a {{cMonster}} descendant"
	},

	"etPainting_0": {
		"prefix": "etPainting",
		"body": "etPainting$0",
		"description": "(cEntity) () The entity is a {{cPainting}}"
	},

	"etMob_0": {
		"prefix": "etMob",
		"body": "etMob$0",
		"description": "(cEntity) () The entity is a {{cMonster}} descendant"
	},

	"etEnderCrystal_0": {
		"prefix": "etEnderCrystal",
		"body": "etEnderCrystal$0",
		"description": "(cEntity) () "
	},

	"etItemFrame_0": {
		"prefix": "etItemFrame",
		"body": "etItemFrame$0",
		"description": "(cEntity) () The entity is an item frame"
	},

	"IsTNT_0": {
		"prefix": "IsTNT",
		"body": "IsTNT()$0",
		"description": "(cEntity) (boolean) Returns true if the entity represents a {{cTNTEntity|TNT entity}}"
	},

	"SetHealth_0": {
		"prefix": "SetHealth",
		"body": "SetHealth(${1:Hitpoints number})$0",
		"description": "(cEntity) () Sets the entity's health to the specified amount of hitpoints. Doesn't broadcast any hurt animation. Doesn't kill the entity if health drops below zero. Use the TakeDamage() function instead for taking damage."
	},

	"SetHeadYaw_0": {
		"prefix": "SetHeadYaw",
		"body": "SetHeadYaw(${1:HeadPitch number})$0",
		"description": "(cEntity) () Sets the head pitch (FIXME: Rename to SetHeadPitch() )."
	},

	"IsDestroyed_0": {
		"prefix": "IsDestroyed",
		"body": "IsDestroyed()$0",
		"description": "(cEntity) (boolean) (<b>DEPRECATED</b>) Please use cEntity:IsTicking()."
	},

	"GetHealth_0": {
		"prefix": "GetHealth",
		"body": "GetHealth()$0",
		"description": "(cEntity) (number) Returns the current health of the entity."
	},

	"GetUniqueID_0": {
		"prefix": "GetUniqueID",
		"body": "GetUniqueID()$0",
		"description": "(cEntity) (number) Returns the ID that uniquely identifies the entity within the running server. Note that this ID is not persisted to the data files."
	},

	"StartBurning_0": {
		"prefix": "StartBurning",
		"body": "StartBurning(${1:NumTicks number})$0",
		"description": "(cEntity) () Sets the entity on fire for the specified number of ticks. If entity is on fire already, makes it burn for either NumTicks or the number of ticks left from the previous fire, whichever is larger."
	},

	"IsCrouched_0": {
		"prefix": "IsCrouched",
		"body": "IsCrouched()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is crouched. Always false for entities that don't support crouching."
	},

	"GetSpeedY_0": {
		"prefix": "GetSpeedY",
		"body": "GetSpeedY()$0",
		"description": "(cEntity) (number) Returns the Y-part of the speed vector"
	},

	"AddSpeed_0": {
		"prefix": "AddSpeed",
		"body": "AddSpeed(${1:AddX number}, ${2:AddY number}, ${3:AddZ number})$0",
		"description": "(cEntity) () Adds the specified amount of speed in each axis direction."
	},

	"AddSpeed_1": {
		"prefix": "AddSpeed",
		"body": "AddSpeed(${1:Add Vector3d})$0",
		"description": "(cEntity) () Adds the specified amount of speed in each axis direction."
	},

	"Killed_0": {
		"prefix": "Killed",
		"body": "Killed(${1:Victim cEntity})$0",
		"description": "(cEntity) () This entity has killed another entity (the Victim). For players, adds the scoreboard statistics about the kill."
	},

	"AddSpeedZ_0": {
		"prefix": "AddSpeedZ",
		"body": "AddSpeedZ(${1:AddZ number})$0",
		"description": "(cEntity) () Adds the specified amount of speed in the Z axis direction."
	},

	"GetWorld_2": {
		"prefix": "GetWorld",
		"body": "GetWorld()$0",
		"description": "(cEntity) (cWorld) Returns the world where the entity resides"
	},

	"IsFallingBlock_0": {
		"prefix": "IsFallingBlock",
		"body": "IsFallingBlock()$0",
		"description": "(cEntity) (boolean) Returns true if the entity represents a {{cFallingBlock}} entity."
	},

	"GetChunkX_1": {
		"prefix": "GetChunkX",
		"body": "GetChunkX()$0",
		"description": "(cEntity) (number) Returns the X-coord of the chunk in which the entity is placed"
	},

	"IsProjectile_0": {
		"prefix": "IsProjectile",
		"body": "IsProjectile()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is a {{cProjectileEntity}} descendant."
	},

	"GetChunkZ_1": {
		"prefix": "GetChunkZ",
		"body": "GetChunkZ()$0",
		"description": "(cEntity) (number) Returns the Z-coord of the chunk in which the entity is placed"
	},

	"AddPosX_0": {
		"prefix": "AddPosX",
		"body": "AddPosX(${1:OffsetX number})$0",
		"description": "(cEntity) () Moves the entity by the specified amount in the X axis direction"
	},

	"GetHeadYaw_0": {
		"prefix": "GetHeadYaw",
		"body": "GetHeadYaw()$0",
		"description": "(cEntity) (number) Returns the pitch of the entity's head (FIXME: Rename to GetHeadPitch() )."
	},

	"GetEquippedLeggings_1": {
		"prefix": "GetEquippedLeggings",
		"body": "GetEquippedLeggings()$0",
		"description": "(cEntity) (cItem) Returns the leggings that the entity has equipped. Returns an empty cItem if no leggings equipped or not applicable."
	},

	"SetPitch_0": {
		"prefix": "SetPitch",
		"body": "SetPitch(${1:Pitch number})$0",
		"description": "(cEntity) () Sets the pitch (nose-down rotation) of the entity"
	},

	"IsSprinting_0": {
		"prefix": "IsSprinting",
		"body": "IsSprinting()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is sprinting. Entities that cannot sprint return always false"
	},

	"IsInWater_0": {
		"prefix": "IsInWater",
		"body": "IsInWater()$0",
		"description": "(cEntity) (boolean) Returns true if any part of the entity is in a water block"
	},

	"TeleportToCoords_0": {
		"prefix": "TeleportToCoords",
		"body": "TeleportToCoords(${1:PosX number}, ${2:PosY number}, ${3:PosZ number})$0",
		"description": "(cEntity) () Teleports the entity to the specified coords. Asks plugins if the teleport is allowed."
	},

	"TakeDamage_0": {
		"prefix": "TakeDamage",
		"body": "TakeDamage(${1:AttackerEntity cEntity})$0",
		"description": "(cEntity) () Causes this entity to take damage that AttackerEntity would inflict. Includes their weapon and this entity's armor."
	},

	"TakeDamage_1": {
		"prefix": "TakeDamage",
		"body": "TakeDamage(${1:DamageType eDamageType}, ${2:AttackerEntity cEntity}, ${3:RawDamage number}, ${4:KnockbackAmount number})$0",
		"description": "(cEntity) () Causes this entity to take damage of the specified type, from the specified attacker (may be nil). The final damage is calculated from RawDamage using the currently equipped armor."
	},

	"TakeDamage_2": {
		"prefix": "TakeDamage",
		"body": "TakeDamage(${1:DamageType eDamageType}, ${2:AttackerEntity cEntity}, ${3:RawDamage number}, ${4:FinalDamage number}, ${5:KnockbackAmount number})$0",
		"description": "(cEntity) () Causes this entity to take damage of the specified type, from the specified attacker (may be nil). The values are wrapped into a {{TakeDamageInfo}} structure and applied directly."
	},

	"StopBurning_0": {
		"prefix": "StopBurning",
		"body": "StopBurning()$0",
		"description": "(cEntity) () Extinguishes the entity fire, cancels all fire timers."
	},

	"SteerVehicle_0": {
		"prefix": "SteerVehicle",
		"body": "SteerVehicle(${1:ForwardAmount number}, ${2:SidewaysAmount number})$0",
		"description": "(cEntity) () Applies the specified steering to the vehicle this entity is attached to. Ignored if not attached to any entity."
	},

	"SetYawFromSpeed_0": {
		"prefix": "SetYawFromSpeed",
		"body": "SetYawFromSpeed()$0",
		"description": "(cEntity) () Sets the entity's yaw to match its current speed (entity looking forwards as it moves)."
	},

	"SetPosY_0": {
		"prefix": "SetPosY",
		"body": "SetPosY(${1:PosY number})$0",
		"description": "(cEntity) () Sets the Y-coord of the entity's pivot"
	},

	"GetEquippedBoots_1": {
		"prefix": "GetEquippedBoots",
		"body": "GetEquippedBoots()$0",
		"description": "(cEntity) (cItem) Returns the boots that the entity has equipped. Returns an empty cItem if no boots equipped or not applicable."
	},

	"GetPitch_0": {
		"prefix": "GetPitch",
		"body": "GetPitch()$0",
		"description": "(cEntity) (number) Returns the pitch (nose-down rotation) of the entity. Measured in degrees, normal values range from -90 to +90. +90 means looking down, 0 means looking straight ahead, -90 means looking up."
	},

	"IsSwimming_0": {
		"prefix": "IsSwimming",
		"body": "IsSwimming()$0",
		"description": "(cEntity) (boolean) Returns true if any part of the entity is in a water block. Note, this function is only updated with mobs or players. <b>Currently deprecated in favour of IsInWater()</b>"
	},

	"SetSpeedZ_0": {
		"prefix": "SetSpeedZ",
		"body": "SetSpeedZ(${1:SpeedZ number})$0",
		"description": "(cEntity) () Sets the Z component of the entity speed"
	},

	"SetSpeedY_0": {
		"prefix": "SetSpeedY",
		"body": "SetSpeedY(${1:SpeedY number})$0",
		"description": "(cEntity) () Sets the Y component of the entity speed"
	},

	"AddSpeedY_0": {
		"prefix": "AddSpeedY",
		"body": "AddSpeedY(${1:AddY number})$0",
		"description": "(cEntity) () Adds the specified amount of speed in the Y axis direction."
	},

	"SetSpeedX_0": {
		"prefix": "SetSpeedX",
		"body": "SetSpeedX(${1:SpeedX number})$0",
		"description": "(cEntity) () Sets the X component of the entity speed"
	},

	"ApplyArmorDamage_0": {
		"prefix": "ApplyArmorDamage",
		"body": "ApplyArmorDamage(${1:DamageBlocked number})$0",
		"description": "(cEntity) () Lowers armor durability, as if the armor blocked the given amount of damage."
	},

	"GetPosZ_0": {
		"prefix": "GetPosZ",
		"body": "GetPosZ()$0",
		"description": "(cEntity) (number) Returns the Z-coord of the entity's pivot"
	},

	"AddPosition_0": {
		"prefix": "AddPosition",
		"body": "AddPosition(${1:OffsetX number}, ${2:OffsetY number}, ${3:OffsetZ number})$0",
		"description": "(cEntity) () Moves the entity by the specified amount in each axis direction"
	},

	"AddPosition_1": {
		"prefix": "AddPosition",
		"body": "AddPosition(${1:Offset Vector3d})$0",
		"description": "(cEntity) () Moves the entity by the specified amount in each direction"
	},

	"SetRoll_0": {
		"prefix": "SetRoll",
		"body": "SetRoll(${1:Roll number})$0",
		"description": "(cEntity) () Sets the roll (sideways rotation) of the entity. Currently unused."
	},

	"IsOnGround_0": {
		"prefix": "IsOnGround",
		"body": "IsOnGround()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is on ground (not falling, not jumping, not flying)"
	},

	"IsPickup_0": {
		"prefix": "IsPickup",
		"body": "IsPickup()$0",
		"description": "(cEntity) (boolean) Returns true if the entity represents a {{cPickup|pickup}}."
	},

	"IsFloater_0": {
		"prefix": "IsFloater",
		"body": "IsFloater()$0",
		"description": "(cEntity) (boolean) Returns true if the entity represents a fishing rod floater"
	},

	"IsOnFire_0": {
		"prefix": "IsOnFire",
		"body": "IsOnFire()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is on fire"
	},

	"IsMob_0": {
		"prefix": "IsMob",
		"body": "IsMob()$0",
		"description": "(cEntity) (boolean) Returns true if the entity represents any {{cMonster|mob}}."
	},

	"IsEnderCrystal_0": {
		"prefix": "IsEnderCrystal",
		"body": "IsEnderCrystal()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is an ender crystal."
	},

	"GetParentClass_0": {
		"prefix": "GetParentClass",
		"body": "GetParentClass()$0",
		"description": "(cEntity) (string) Returns the name of the direct parent class for this entity"
	},

	"GetTicksAlive_0": {
		"prefix": "GetTicksAlive",
		"body": "GetTicksAlive()$0",
		"description": "(cEntity) (number) Returns the number of ticks that this entity has been alive for."
	},

	"SetMaxHealth_0": {
		"prefix": "SetMaxHealth",
		"body": "SetMaxHealth(${1:MaxHitpoints number})$0",
		"description": "(cEntity) () Sets the maximum hitpoints of the entity. If current health is above MaxHitpoints, it is capped to MaxHitpoints."
	},

	"ArmorCoversAgainst_0": {
		"prefix": "ArmorCoversAgainst",
		"body": "ArmorCoversAgainst(${1:DamageType eDamageType})$0",
		"description": "(cEntity) (boolean) Returns whether armor will protect against the specified damage type"
	},

	"SetMass_0": {
		"prefix": "SetMass",
		"body": "SetMass(${1:Mass number})$0",
		"description": "(cEntity) () Sets the mass of the entity. Currently unused."
	},

	"SetIsFireproof_0": {
		"prefix": "SetIsFireproof",
		"body": "SetIsFireproof(${1:IsFireproof boolean})$0",
		"description": "(cEntity) () Sets whether the entity receives damage from being on fire."
	},

	"IsInvisible_0": {
		"prefix": "IsInvisible",
		"body": "IsInvisible()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is invisible"
	},

	"GetEquippedChestplate_1": {
		"prefix": "GetEquippedChestplate",
		"body": "GetEquippedChestplate()$0",
		"description": "(cEntity) (cItem) Returns the chestplate that the entity has equipped. Returns an empty cItem if no chestplate equipped or not applicable."
	},

	"IsMinecart_1": {
		"prefix": "IsMinecart",
		"body": "IsMinecart()$0",
		"description": "(cEntity) (boolean) Returns true if the entity represents a {{cMinecart|minecart}}"
	},

	"DoesPreventBlockPlacement_0": {
		"prefix": "DoesPreventBlockPlacement",
		"body": "DoesPreventBlockPlacement()$0",
		"description": "(cEntity) (boolean) Returns true if this entity doesn't allow blocks to be placed intersecting the entity."
	},

	"GetSpeedZ_0": {
		"prefix": "GetSpeedZ",
		"body": "GetSpeedZ()$0",
		"description": "(cEntity) (number) Returns the Z-part of the speed vector"
	},

	"GetYaw_0": {
		"prefix": "GetYaw",
		"body": "GetYaw()$0",
		"description": "(cEntity) (number) Returns the yaw (direction) of the entity. Measured in degrees, values range from -180 to +180. 0 means ZP, 90 means XM, -180 means ZM, -90 means XP."
	},

	"IsBoat_0": {
		"prefix": "IsBoat",
		"body": "IsBoat()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is a {{cBoat|boat}}."
	},

	"GetMass_0": {
		"prefix": "GetMass",
		"body": "GetMass()$0",
		"description": "(cEntity) (number) Returns the mass of the entity. Currently unused."
	},

	"GetEquippedWeapon_0": {
		"prefix": "GetEquippedWeapon",
		"body": "GetEquippedWeapon()$0",
		"description": "(cEntity) (cItem) Returns the weapon that the entity has equipped. Returns an empty cItem if no weapon equipped or not applicable."
	},

	"ScheduleMoveToWorld_0": {
		"prefix": "ScheduleMoveToWorld",
		"body": "ScheduleMoveToWorld(${1:World cWorld}, ${2:NewPosition Vector3d}, ${3:ShouldSetPortalCooldown boolean}, ${4:ShouldSendRespawn boolean})$0",
		"description": "(cEntity) () Schedules a MoveToWorld call to occur on the next Tick of the entity. If ShouldSetPortalCooldown is false (default), doesn't set any portal cooldown, if it is true, the default portal cooldown is applied to the entity. If ShouldSendRespawn is false (default), no respawn packet is sent, if it is true then a respawn packet is sent to the client."
	},

	"GetAirLevel_0": {
		"prefix": "GetAirLevel",
		"body": "GetAirLevel()$0",
		"description": "(cEntity) (number) Returns the air level (number of ticks of air left). Note, this function is only updated with mobs or players."
	},

	"SetGravity_0": {
		"prefix": "SetGravity",
		"body": "SetGravity(${1:Gravity number})$0",
		"description": "(cEntity) () Sets the number that is used as the gravity for physics simulation. 1G (9.78) by default."
	},

	"GetEquippedHelmet_1": {
		"prefix": "GetEquippedHelmet",
		"body": "GetEquippedHelmet()$0",
		"description": "(cEntity) (cItem) Returns the helmet that the entity has equipped. Returns an empty cItem if no helmet equipped or not applicable."
	},

	"MoveToWorld_0": {
		"prefix": "MoveToWorld",
		"body": "MoveToWorld(${1:World cWorld}, ${2:ShouldSendRespawn boolean})$0",
		"description": "(cEntity) (boolean) Removes the entity from this world and starts moving it to the specified world's spawn point. Note that to avoid deadlocks, the move is asynchronous - the entity is moved into a queue and will be moved from that queue into the destination world at some (unpredictable) time in the future. ShouldSendRespawn is used only for players, it specifies whether the player should be sent a Respawn packet upon leaving the world (The client handles respawns only between different dimensions). <b>OBSOLETE</b>, use ScheduleMoveToWorld() instead."
	},

	"MoveToWorld_1": {
		"prefix": "MoveToWorld",
		"body": "MoveToWorld(${1:WorldName string}, ${2:ShouldSendRespawn boolean})$0",
		"description": "(cEntity) (boolean) Removes the entity from this world and starts moving it to the specified world's spawn point. Note that to avoid deadlocks, the move is asynchronous - the entity is moved into a queue and will be moved from that queue into the destination world at some (unpredictable) time in the future. ShouldSendRespawn is used only for players, it specifies whether the player should be sent a Respawn packet upon leaving the world (The client handles respawns only between different dimensions). <b>OBSOLETE</b>, use ScheduleMoveToWorld() instead."
	},

	"MoveToWorld_2": {
		"prefix": "MoveToWorld",
		"body": "MoveToWorld(${1:World cWorld}, ${2:ShouldSendRespawn boolean}, ${3:Position Vector3d})$0",
		"description": "(cEntity) (boolean) Removes the entity from this world and starts moving it to the specified world. Note that to avoid deadlocks, the move is asynchronous - the entity is moved into a queue and will be moved from that queue into the destination world at some (unpredictable) time in the future. ShouldSendRespawn is used only for players, it specifies whether the player should be sent a Respawn packet upon leaving the world (The client handles respawns only between different dimensions). The Position parameter specifies the location that the entity should be placed in, in the new world. <b>OBSOLETE</b>, use ScheduleMoveToWorld() instead."
	},

	"GetPosY_0": {
		"prefix": "GetPosY",
		"body": "GetPosY()$0",
		"description": "(cEntity) (number) Returns the Y-coord of the entity's pivot"
	},

	"GetClassStatic_0": {
		"prefix": "GetClassStatic",
		"body": "GetClassStatic()$0",
		"description": "(cEntity) (string) Returns the entity classname that this class implements. Each descendant overrides this function."
	},

	"Destroy_0": {
		"prefix": "Destroy",
		"body": "Destroy(${1:ShouldBroadcast boolean})$0",
		"description": "(cEntity) () Schedules the entity to be destroyed; if ShouldBroadcast is not present or set to true, broadcasts the DestroyEntity packet"
	},

	"SetYaw_0": {
		"prefix": "SetYaw",
		"body": "SetYaw(${1:Yaw number})$0",
		"description": "(cEntity) () Sets the yaw (direction) of the entity."
	},

	"IsSubmerged_0": {
		"prefix": "IsSubmerged",
		"body": "IsSubmerged()$0",
		"description": "(cEntity) (boolean) Returns true if the entity's head is in a water block <b>Currently deprecated in favour of IsHeadInWater()</b>"
	},

	"IsRiding_0": {
		"prefix": "IsRiding",
		"body": "IsRiding()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is attached to (riding) another entity."
	},

	"IsRclking_0": {
		"prefix": "IsRclking",
		"body": "IsRclking()$0",
		"description": "(cEntity) (boolean) Currently unimplemented"
	},

	"IsPlayer_0": {
		"prefix": "IsPlayer",
		"body": "IsPlayer()$0",
		"description": "(cEntity) (boolean) Returns true if the entity represents a {{cPlayer|player}}"
	},

	"IsLeashKnot_0": {
		"prefix": "IsLeashKnot",
		"body": "IsLeashKnot()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is a leash knot."
	},

	"SetPosX_0": {
		"prefix": "SetPosX",
		"body": "SetPosX(${1:PosX number})$0",
		"description": "(cEntity) () Sets the X-coord of the entity's pivot"
	},

	"SetPitchFromSpeed_0": {
		"prefix": "SetPitchFromSpeed",
		"body": "SetPitchFromSpeed()$0",
		"description": "(cEntity) () Sets the entity pitch to match its speed (entity looking forwards as it moves)"
	},

	"GetClass_0": {
		"prefix": "GetClass",
		"body": "GetClass()$0",
		"description": "(cEntity) (string) Returns the classname of the entity, such as 'cSpider' or 'cPickup'"
	},

	"GetEnchantmentBlastKnockbackReduction_0": {
		"prefix": "GetEnchantmentBlastKnockbackReduction",
		"body": "GetEnchantmentBlastKnockbackReduction()$0",
		"description": "(cEntity) (number) Returns explosion knock back reduction percent from blast protection level."
	},

	"GetPosX_0": {
		"prefix": "GetPosX",
		"body": "GetPosX()$0",
		"description": "(cEntity) (number) Returns the X-coord of the entity's pivot"
	},

	"SetPosZ_0": {
		"prefix": "SetPosZ",
		"body": "SetPosZ(${1:PosZ number})$0",
		"description": "(cEntity) () Sets the Z-coord of the entity's pivot"
	},

	"IsPawn_0": {
		"prefix": "IsPawn",
		"body": "IsPawn()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is a {{cPawn}} descendant."
	},

	"GetEntityType_0": {
		"prefix": "GetEntityType",
		"body": "GetEntityType()$0",
		"description": "(cEntity) (EntityType cEntity#eEntityTyp) Returns the type of the entity, one of the {{cEntity#eEntityType|etXXX}} constants. Note that to check specific entity type, you should use one of the IsXXX functions instead of comparing the value returned by this call."
	},

	"IsItemFrame_0": {
		"prefix": "IsItemFrame",
		"body": "IsItemFrame()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is an item frame."
	},

	"GetWidth_3": {
		"prefix": "GetWidth",
		"body": "GetWidth()$0",
		"description": "(cEntity) (number) Returns the width (X and Z size) of the entity."
	},

	"GetEnchantmentCoverAgainst_0": {
		"prefix": "GetEnchantmentCoverAgainst",
		"body": "GetEnchantmentCoverAgainst(${1:AttackerEntity cEntity}, ${2:DamageType eDamageType}, ${3:RawDamage number})$0",
		"description": "(cEntity) (number) Returns the number of hitpoints out of RawDamage that the enchantments on the currently equipped armor would cover. See {{TakeDamageInfo}} for more information on attack damage."
	},

	"GetRawDamageAgainst_0": {
		"prefix": "GetRawDamageAgainst",
		"body": "GetRawDamageAgainst(${1:ReceiverEntity cEntity})$0",
		"description": "(cEntity) (number) Returns the raw damage that this entity's equipment would cause when attacking the ReceiverEntity. This includes this entity's weapon {{cEnchantments|enchantments}}, but excludes the receiver's armor or potion effects. See {{TakeDamageInfo}} for more information on attack damage."
	},

	"TeleportToEntity_0": {
		"prefix": "TeleportToEntity",
		"body": "TeleportToEntity(${1:DestEntity cEntity})$0",
		"description": "(cEntity) () Teleports this entity to the specified destination entity. Asks plugins if the teleport is allowed."
	},

	"IsInLava_0": {
		"prefix": "IsInLava",
		"body": "IsInLava()$0",
		"description": "(cEntity) (boolean) Returns true if any part of the entity is in a lava block"
	},

	"AddPosY_0": {
		"prefix": "AddPosY",
		"body": "AddPosY(${1:OffsetY number})$0",
		"description": "(cEntity) () Moves the entity by the specified amount in the Y axis direction"
	},

	"IsInFire_0": {
		"prefix": "IsInFire",
		"body": "IsInFire()$0",
		"description": "(cEntity) (boolean) Returns true if any part of the entity is in a fire block"
	},

	"GetInvulnerableTicks_0": {
		"prefix": "GetInvulnerableTicks",
		"body": "GetInvulnerableTicks()$0",
		"description": "(cEntity) (number) Returns the number of ticks that this entity will be invulnerable for. This is used for after-hit recovery - the entities are invulnerable for half a second after being hit."
	},

	"SetPosition_1": {
		"prefix": "SetPosition",
		"body": "SetPosition(${1:PosX number}, ${2:PosY number}, ${3:PosZ number})$0",
		"description": "(cEntity) () Sets all three coords of the entity's pivot"
	},

	"SetPosition_2": {
		"prefix": "SetPosition",
		"body": "SetPosition(${1:Vector3d Vector3d})$0",
		"description": "(cEntity) () Sets all three coords of the entity's pivot"
	},

	"HandleSpeedFromAttachee_0": {
		"prefix": "HandleSpeedFromAttachee",
		"body": "HandleSpeedFromAttachee(${1:ForwardAmount number}, ${2:SidewaysAmount number})$0",
		"description": "(cEntity) () Updates the entity's speed based on the attachee exerting the specified force forward and sideways. Used for entities being driven by other entities attached to them - usually players driving minecarts and boats."
	},

	"IsExpOrb_0": {
		"prefix": "IsExpOrb",
		"body": "IsExpOrb()$0",
		"description": "(cEntity) (boolean) Returns true if the entity represents an experience orb"
	},

	"SetInvulnerableTicks_0": {
		"prefix": "SetInvulnerableTicks",
		"body": "SetInvulnerableTicks(${1:NumTicks number})$0",
		"description": "(cEntity) () Sets the amount of ticks for which the entity will not receive any damage from other entities."
	},

	"GetOffHandEquipedItem_0": {
		"prefix": "GetOffHandEquipedItem",
		"body": "GetOffHandEquipedItem()$0",
		"description": "(cEntity) (cItem) Returns the item that the entity has equipped on off-hand. Returns an empty cItem if no item equipped or not applicable."
	},

	"GetHeight_5": {
		"prefix": "GetHeight",
		"body": "GetHeight()$0",
		"description": "(cEntity) (number) Returns the height (Y size) of the entity"
	},

	"IsFireproof_1": {
		"prefix": "IsFireproof",
		"body": "IsFireproof()$0",
		"description": "(cEntity) (boolean) Returns true if the entity takes no damage from being on fire."
	},

	"GetLookVector_0": {
		"prefix": "GetLookVector",
		"body": "GetLookVector()$0",
		"description": "(cEntity) (Vector3f) Returns the vector that defines the direction in which the entity is looking"
	},

	"IsHeadInWater_0": {
		"prefix": "IsHeadInWater",
		"body": "IsHeadInWater()$0",
		"description": "(cEntity) (boolean) Returns true if the entity's head is in a water block"
	},

	"AddPosZ_0": {
		"prefix": "AddPosZ",
		"body": "AddPosZ(${1:OffsetZ number})$0",
		"description": "(cEntity) () Moves the entity by the specified amount in the Z axis direction"
	},

	"GetSpeedX_0": {
		"prefix": "GetSpeedX",
		"body": "GetSpeedX()$0",
		"description": "(cEntity) (number) Returns the X-part of the speed vector"
	},

	"GetSpeed_0": {
		"prefix": "GetSpeed",
		"body": "GetSpeed()$0",
		"description": "(cEntity) (Vector3d) Returns the complete speed vector of the entity"
	},

	"GetArmorCoverAgainst_0": {
		"prefix": "GetArmorCoverAgainst",
		"body": "GetArmorCoverAgainst(${1:AttackerEntity cEntity}, ${2:DamageType eDamageType}, ${3:RawDamage number})$0",
		"description": "(cEntity) (number) Returns the number of hitpoints out of RawDamage that the currently equipped armor would cover. See {{TakeDamageInfo}} for more information on attack damage."
	},

	"SetSpeed_0": {
		"prefix": "SetSpeed",
		"body": "SetSpeed(${1:SpeedX number}, ${2:SpeedY number}, ${3:SpeedZ number})$0",
		"description": "(cEntity) () Sets the current speed of the entity"
	},

	"SetSpeed_1": {
		"prefix": "SetSpeed",
		"body": "SetSpeed(${1:Speed Vector3d})$0",
		"description": "(cEntity) () Sets the current speed of the entity"
	},

	"AddSpeedX_0": {
		"prefix": "AddSpeedX",
		"body": "AddSpeedX(${1:AddX number})$0",
		"description": "(cEntity) () Adds the specified amount of speed in the X axis direction."
	},

	"GetRoll_0": {
		"prefix": "GetRoll",
		"body": "GetRoll()$0",
		"description": "(cEntity) (number) Returns the roll (sideways rotation) of the entity. Currently unused."
	},

	"IsTicking_0": {
		"prefix": "IsTicking",
		"body": "IsTicking()$0",
		"description": "(cEntity) (boolean) Returns true if the entity is valid and ticking. Returns false if the entity is not ticking and is about to leave its current world either via teleportation or destruction. If this returns false, you must stop using the cEntity pointer you have."
	},

	"Heal_1": {
		"prefix": "Heal",
		"body": "Heal(${1:Hitpoints number})$0",
		"description": "(cEntity) () Heals the specified number of hitpoints. Hitpoints is expected to be a positive number."
	},

	"GetMaxHealth_0": {
		"prefix": "GetMaxHealth",
		"body": "GetMaxHealth()$0",
		"description": "(cEntity) (number) Returns the maximum number of hitpoints this entity is allowed to have."
	},

	"GetKnockbackAmountAgainst_0": {
		"prefix": "GetKnockbackAmountAgainst",
		"body": "GetKnockbackAmountAgainst(${1:ReceiverEntity cEntity})$0",
		"description": "(cEntity) (number) Returns the amount of knockback that the currently equipped items would cause when attacking the ReceiverEntity."
	},

	"GetPosition_0": {
		"prefix": "GetPosition",
		"body": "GetPosition()$0",
		"description": "(cEntity) (Vector3d) Returns the entity's pivot position as a 3D vector"
	},

	"GetGravity_0": {
		"prefix": "GetGravity",
		"body": "GetGravity()$0",
		"description": "(cEntity) (number) Returns the number that is used as the gravity for physics simulation. 1G (9.78) by default."
	},

	"IsA_0": {
		"prefix": "IsA",
		"body": "IsA(${1:ClassName string})$0",
		"description": "(cEntity) (boolean) Returns true if the entity class is a descendant of the specified class name, or the specified class itself"
	},

	"IsPainting_0": {
		"prefix": "IsPainting",
		"body": "IsPainting()$0",
		"description": "(cEntity) (boolean) Returns if this entity is a painting."
	},

	"cTeam_0": {
		"prefix": "cTeam",
		"body": "cTeam$0",
		"description": "(cTeam) () The Scary Class."
	},

	"SetSuffix_0": {
		"prefix": "SetSuffix",
		"body": "SetSuffix(${1:Suffix string})$0",
		"description": "(cTeam) () Sets the suffix appended to the names of the members of this team."
	},

	"SetCanSeeFriendlyInvisible_0": {
		"prefix": "SetCanSeeFriendlyInvisible",
		"body": "SetCanSeeFriendlyInvisible(${1:CanSeeFriendlyInvisible boolean})$0",
		"description": "(cTeam) () Set whether players can see invisible teammates."
	},

	"AddPlayer_0": {
		"prefix": "AddPlayer",
		"body": "AddPlayer(${1:PlayerName string})$0",
		"description": "(cTeam) (boolean) Adds a player to this team. Returns true if the operation was successful."
	},

	"GetName_6": {
		"prefix": "GetName",
		"body": "GetName()$0",
		"description": "(cTeam) (string) Returns the internal name of the team."
	},

	"GetPrefix_1": {
		"prefix": "GetPrefix",
		"body": "GetPrefix()$0",
		"description": "(cTeam) (string) Returns the prefix prepended to the names of the members of this team."
	},

	"SetDisplayName_1": {
		"prefix": "SetDisplayName",
		"body": "SetDisplayName(${1:DisplayName string})$0",
		"description": "(cTeam) () Sets the display name of this team. (i.e. what will be shown to the players)"
	},

	"AllowsFriendlyFire_0": {
		"prefix": "AllowsFriendlyFire",
		"body": "AllowsFriendlyFire()$0",
		"description": "(cTeam) (boolean) Returns whether team friendly fire is allowed."
	},

	"GetDisplayName_1": {
		"prefix": "GetDisplayName",
		"body": "GetDisplayName()$0",
		"description": "(cTeam) (string) Returns the display name of the team."
	},

	"SetPrefix_0": {
		"prefix": "SetPrefix",
		"body": "SetPrefix(${1:Prefix string})$0",
		"description": "(cTeam) () Sets the prefix prepended to the names of the members of this team."
	},

	"SetFriendlyFire_0": {
		"prefix": "SetFriendlyFire",
		"body": "SetFriendlyFire(${1:AllowFriendlyFire boolean})$0",
		"description": "(cTeam) () Sets whether team friendly fire is allowed."
	},

	"CanSeeFriendlyInvisible_0": {
		"prefix": "CanSeeFriendlyInvisible",
		"body": "CanSeeFriendlyInvisible()$0",
		"description": "(cTeam) (boolean) Returns whether players can see invisible teammates."
	},

	"HasPlayer_0": {
		"prefix": "HasPlayer",
		"body": "HasPlayer(${1:PlayerName string})$0",
		"description": "(cTeam) (boolean) Returns whether the specified player is a member of this team."
	},

	"RemovePlayer_0": {
		"prefix": "RemovePlayer",
		"body": "RemovePlayer(${1:PlayerName string})$0",
		"description": "(cTeam) (boolean) Removes the player with the specified name from this team. Returns true if the operation was successful."
	},

	"GetNumPlayers_1": {
		"prefix": "GetNumPlayers",
		"body": "GetNumPlayers()$0",
		"description": "(cTeam) (number) Returns the number of registered players."
	},

	"GetSuffix_1": {
		"prefix": "GetSuffix",
		"body": "GetSuffix()$0",
		"description": "(cTeam) (string) Returns the suffix appended to the names of the members of this team."
	},

	"Reset_1": {
		"prefix": "Reset",
		"body": "Reset()$0",
		"description": "(cTeam) () Removes all players from this team."
	},

	"cCommandBlockEntity_0": {
		"prefix": "cCommandBlockEntity",
		"body": "cCommandBlockEntity$0",
		"description": "(cCommandBlockEntity) () The Scary Class."
	},

	"Activate_1": {
		"prefix": "Activate",
		"body": "Activate()$0",
		"description": "(cCommandBlockEntity) () Sets the command block to execute a command in the next tick"
	},

	"GetCommand_0": {
		"prefix": "GetCommand",
		"body": "GetCommand()$0",
		"description": "(cCommandBlockEntity) (string) Retrieves stored command"
	},

	"SetCommand_0": {
		"prefix": "SetCommand",
		"body": "SetCommand(${1:Command string})$0",
		"description": "(cCommandBlockEntity) () Sets the command"
	},

	"GetLastOutput_0": {
		"prefix": "GetLastOutput",
		"body": "GetLastOutput()$0",
		"description": "(cCommandBlockEntity) (string) Retrieves the last line of output generated by the command block"
	},

	"GetResult_1": {
		"prefix": "GetResult",
		"body": "GetResult()$0",
		"description": "(cCommandBlockEntity) (number) Retrieves the result (signal strength) of the last operation"
	},

	"cNoteEntity_0": {
		"prefix": "cNoteEntity",
		"body": "cNoteEntity$0",
		"description": "(cNoteEntity) () The Scary Class."
	},

	"SetPitch_1": {
		"prefix": "SetPitch",
		"body": "SetPitch(${1:Pitch number})$0",
		"description": "(cNoteEntity) () Sets a new pitch for the block."
	},

	"IncrementPitch_0": {
		"prefix": "IncrementPitch",
		"body": "IncrementPitch()$0",
		"description": "(cNoteEntity) () Adds 1 to the current pitch. Wraps around to 0 when the pitch cannot go any higher."
	},

	"GetPitch_1": {
		"prefix": "GetPitch",
		"body": "GetPitch()$0",
		"description": "(cNoteEntity) (number) Returns the current pitch set for the block"
	},

	"MakeSound_0": {
		"prefix": "MakeSound",
		"body": "MakeSound()$0",
		"description": "(cNoteEntity) () Plays the sound for all {{cClientHandle|clients}} near this block."
	},

	"cColor_0": {
		"prefix": "cColor",
		"body": "cColor$0",
		"description": "(cColor) () The Scary Class."
	},

	"COLOR_NONE_0": {
		"prefix": "COLOR_NONE",
		"body": "COLOR_NONE$0",
		"description": "(cColor) () A constant denoting the color is invalid (note: use IsValid)"
	},

	"COLOR_MIN_0": {
		"prefix": "COLOR_MIN",
		"body": "COLOR_MIN$0",
		"description": "(cColor) () The minimum value for a color component"
	},

	"COLOR_LIMIT_0": {
		"prefix": "COLOR_LIMIT",
		"body": "COLOR_LIMIT$0",
		"description": "(cColor) () The upper bound (exclusive) for a color component"
	},

	"COLOR_MAX_0": {
		"prefix": "COLOR_MAX",
		"body": "COLOR_MAX$0",
		"description": "(cColor) () The maximum value for a color component"
	},

	"Clear_9": {
		"prefix": "Clear",
		"body": "Clear()$0",
		"description": "(cColor) () Resets the color to uninitialized."
	},

	"IsValid_0": {
		"prefix": "IsValid",
		"body": "IsValid()$0",
		"description": "(cColor) (boolean) True if the color is valid, false if the color has not been set yet."
	},

	"SetGreen_0": {
		"prefix": "SetGreen",
		"body": "SetGreen(${1:Green number})$0",
		"description": "(cColor) () Sets the color's green component. Must be between 0 and 255, inclusive."
	},

	"cColor_0": {
		"prefix": "cColor",
		"body": "cColor()$0",
		"description": "(cColor) (cColor) Creates an uninitialized cColor. Each component must be between 0 and 255, inclusive."
	},

	"cColor_1": {
		"prefix": "cColor",
		"body": "cColor(${1:Red number}, ${2:Green number}, ${3:Blue number})$0",
		"description": "(cColor) (cColor) Creates the specified cColor. All components must be between 0 and 255, inclusive."
	},

	"GetGreen_0": {
		"prefix": "GetGreen",
		"body": "GetGreen()$0",
		"description": "(cColor) (Green numbe) Returns the color's green component."
	},

	"SetBlue_0": {
		"prefix": "SetBlue",
		"body": "SetBlue(${1:Blue number})$0",
		"description": "(cColor) () Sets the color's blue component. Must be between 0 and 255, inclusive."
	},

	"GetColor_2": {
		"prefix": "GetColor",
		"body": "GetColor()$0",
		"description": "(cColor) (Red number, Green number, Blue numbe) Returns the color's red, green, and blue components, respectively."
	},

	"SetRed_0": {
		"prefix": "SetRed",
		"body": "SetRed(${1:Red number})$0",
		"description": "(cColor) () Sets the color's red component. Must be between 0 and 255, inclusive."
	},

	"SetColor_1": {
		"prefix": "SetColor",
		"body": "SetColor(${1:Red number}, ${2:Green number}, ${3:Blue number})$0",
		"description": "(cColor) () Sets the color's red, green, and blue components. Values range from 0 to 255."
	},

	"GetBlue_0": {
		"prefix": "GetBlue",
		"body": "GetBlue()$0",
		"description": "(cColor) (Blue numbe) Returns the color's blue component."
	},

	"GetRed_0": {
		"prefix": "GetRed",
		"body": "GetRed()$0",
		"description": "(cColor) (Red numbe) Returns the color's red component."
	},

	"cBlockEntity_0": {
		"prefix": "cBlockEntity",
		"body": "cBlockEntity$0",
		"description": "(cBlockEntity) () The Scary Class."
	},

	"GetPosZ_1": {
		"prefix": "GetPosZ",
		"body": "GetPosZ()$0",
		"description": "(cBlockEntity) (number) Returns the block Z-coord of the block entity's block"
	},

	"GetWorld_3": {
		"prefix": "GetWorld",
		"body": "GetWorld()$0",
		"description": "(cBlockEntity) (cWorld) Returns the world to which the block entity belongs"
	},

	"GetChunkX_2": {
		"prefix": "GetChunkX",
		"body": "GetChunkX()$0",
		"description": "(cBlockEntity) (number) Returns the chunk X-coord of the block entity's chunk"
	},

	"GetPos_0": {
		"prefix": "GetPos",
		"body": "GetPos()$0",
		"description": "(cBlockEntity) (Vector3i) Returns the name of the parent class, or empty string if no parent class."
	},

	"GetChunkZ_2": {
		"prefix": "GetChunkZ",
		"body": "GetChunkZ()$0",
		"description": "(cBlockEntity) (number) Returns the chunk Z-coord of the block entity's chunk"
	},

	"GetBlockType_2": {
		"prefix": "GetBlockType",
		"body": "GetBlockType()$0",
		"description": "(cBlockEntity) (BLOCKTYPE numbe) Returns the blocktype which is represented by this blockentity. This is the primary means of type-identification"
	},

	"GetPosX_1": {
		"prefix": "GetPosX",
		"body": "GetPosX()$0",
		"description": "(cBlockEntity) (number) Returns the block X-coord of the block entity's block"
	},

	"GetRelZ_0": {
		"prefix": "GetRelZ",
		"body": "GetRelZ()$0",
		"description": "(cBlockEntity) (number) Returns the relative Z coord of the block entity's block within the chunk"
	},

	"GetRelX_0": {
		"prefix": "GetRelX",
		"body": "GetRelX()$0",
		"description": "(cBlockEntity) (number) Returns the relative X coord of the block entity's block within the chunk"
	},

	"GetRelPos_0": {
		"prefix": "GetRelPos",
		"body": "GetRelPos()$0",
		"description": "(cBlockEntity) (Vector3i) Returns the relative coords of the block entity's block within its chunk"
	},

	"GetPosY_1": {
		"prefix": "GetPosY",
		"body": "GetPosY()$0",
		"description": "(cBlockEntity) (number) Returns the block Y-coord of the block entity's block"
	},

	"cClientHandle_0": {
		"prefix": "cClientHandle",
		"body": "cClientHandle$0",
		"description": "(cClientHandle) () The Scary Class."
	},

	"MAX_VIEW_DISTANCE_0": {
		"prefix": "MAX_VIEW_DISTANCE",
		"body": "MAX_VIEW_DISTANCE$0",
		"description": "(cClientHandle) () The maximum value of the view distance"
	},

	"MIN_VIEW_DISTANCE_0": {
		"prefix": "MIN_VIEW_DISTANCE",
		"body": "MIN_VIEW_DISTANCE$0",
		"description": "(cClientHandle) () The minimum value of the view distance"
	},

	"GetIPString_0": {
		"prefix": "GetIPString",
		"body": "GetIPString()$0",
		"description": "(cClientHandle) (string) Returns the IP address of the connection, as a string. Only the address part is returned, without the port number."
	},

	"SendSetSubTitle_0": {
		"prefix": "SendSetSubTitle",
		"body": "SendSetSubTitle(${1:SubTitle cCompositeChat})$0",
		"description": "(cClientHandle) () Sends the subtitle to the client. Doesn't make the client display it yet, use SendTitleTimes() to show both the title and the subtitle."
	},

	"GetUniqueID_1": {
		"prefix": "GetUniqueID",
		"body": "GetUniqueID()$0",
		"description": "(cClientHandle) (number) Returns the UniqueID of the client used to identify the client in the server"
	},

	"SendSetRawTitle_0": {
		"prefix": "SendSetRawTitle",
		"body": "SendSetRawTitle(${1:Title string})$0",
		"description": "(cClientHandle) () Sends the raw title to the client. Doesn't make the client display it yet, use SendTitleTimes() to show both the title and the subtitle."
	},

	"SendTitleTimes_0": {
		"prefix": "SendTitleTimes",
		"body": "SendTitleTimes(${1:FadeInTicks number}, ${2:DisplayTicks number}, ${3:FadeOutTicks number})$0",
		"description": "(cClientHandle) () Sends the request to display the title and subtitle, previously set with SendSetTitle, SendSetRawTitle, SendSetSubTitle and SendSetRawSubTitle, to the client."
	},

	"GetViewDistance_0": {
		"prefix": "GetViewDistance",
		"body": "GetViewDistance()$0",
		"description": "(cClientHandle) (number) Returns the viewdistance (number of chunks loaded for the player in each direction)"
	},

	"GetPing_0": {
		"prefix": "GetPing",
		"body": "GetPing()$0",
		"description": "(cClientHandle) (number) Returns the ping time, in ms"
	},

	"GetLocale_0": {
		"prefix": "GetLocale",
		"body": "GetLocale()$0",
		"description": "(cClientHandle) (Locale strin) Returns the locale string that the client sends as part of the protocol handshake. Can be used to provide localized strings."
	},

	"GetPlayer_0": {
		"prefix": "GetPlayer",
		"body": "GetPlayer()$0",
		"description": "(cClientHandle) (cPlayer) Returns the player object connected to this client. Note that this may be nil, for example if the player object is not yet spawned."
	},

	"GetUUID_1": {
		"prefix": "GetUUID",
		"body": "GetUUID()$0",
		"description": "(cClientHandle) (string) Returns the authentication-based UUID of the client. This UUID should be used to identify the player when persisting any player-related data. Returns a 32-char UUID (no dashes)"
	},

	"SetLocale_0": {
		"prefix": "SetLocale",
		"body": "SetLocale(${1:Locale string})$0",
		"description": "(cClientHandle) () Sets the locale that Cuberite keeps on record. Initially the locale is initialized in protocol handshake, this function allows plugins to override the stored value (but only server-side and only until the user disconnects)."
	},

	"GetUsername_0": {
		"prefix": "GetUsername",
		"body": "GetUsername()$0",
		"description": "(cClientHandle) (string) Returns the username that the client has provided"
	},

	"SendResetTitle_0": {
		"prefix": "SendResetTitle",
		"body": "SendResetTitle()$0",
		"description": "(cClientHandle) () Resets and hides the title but not the subtitle."
	},

	"GetRequestedViewDistance_0": {
		"prefix": "GetRequestedViewDistance",
		"body": "GetRequestedViewDistance()$0",
		"description": "(cClientHandle) (number) Returns the view distance that the player request, not the used view distance."
	},

	"GetClientBrand_0": {
		"prefix": "GetClientBrand",
		"body": "GetClientBrand()$0",
		"description": "(cClientHandle) (string) Returns the brand that the client has sent in their MC|Brand plugin message."
	},

	"SendHideTitle_0": {
		"prefix": "SendHideTitle",
		"body": "SendHideTitle()$0",
		"description": "(cClientHandle) () Hides the title. This makes the title and subtitle disappear, but if you call SendTitleTimes() the same title and subtitle will appear again."
	},

	"SendTimeUpdate_0": {
		"prefix": "SendTimeUpdate",
		"body": "SendTimeUpdate(${1:WorldAge number}, ${2:TimeOfDay number}, ${3:DoDaylightCycle boolean})$0",
		"description": "(cClientHandle) () Sends the specified time update to the client. WorldAge is the total age of the world, in ticks. TimeOfDay is the current day's time, in ticks (0 - 24000). DoDaylightCycle is a bool that specifies whether the client should automatically move the sun (true) or keep it in the same place (false)."
	},

	"GenerateOfflineUUID_0": {
		"prefix": "GenerateOfflineUUID",
		"body": "GenerateOfflineUUID(${1:Username string})$0",
		"description": "(cClientHandle) (string) Generates an UUID based on the player name provided. This is used for the offline (non-auth) mode, when there's no UUID source. Each username generates a unique and constant UUID, so that when the player reconnects with the same name, their UUID is the same. Returns a 32-char UUID (no dashes)."
	},

	"SendSetTitle_0": {
		"prefix": "SendSetTitle",
		"body": "SendSetTitle(${1:Title cCompositeChat})$0",
		"description": "(cClientHandle) () Sends the title to the client. Doesn't make the client display it yet, use SendTitleTimes() to show both the title and the subtitle."
	},

	"SetClientBrand_0": {
		"prefix": "SetClientBrand",
		"body": "SetClientBrand(${1:ClientBrand string})$0",
		"description": "(cClientHandle) () Sets the value of the client's brand. Normally this value is received from the client by a MC|Brand plugin message, this function lets plugins overwrite the value."
	},

	"HasPluginChannel_0": {
		"prefix": "HasPluginChannel",
		"body": "HasPluginChannel(${1:ChannelName string})$0",
		"description": "(cClientHandle) (boolean) Returns true if the client has registered to receive messages on the specified plugin channel."
	},

	"SendSoundEffect_0": {
		"prefix": "SendSoundEffect",
		"body": "SendSoundEffect(${1:SoundName string}, ${2:X number}, ${3:Y number}, ${4:Z number}, ${5:Volume number}, ${6:Pitch number})$0",
		"description": "(cClientHandle) () Sends a sound effect request to the client. The sound is played at the specified coords, with the specified volume (a float, 1.0 is full volume, can be more) and pitch (0-255, 63 is 100%) (DEPRECATED, use vector-parametered version instead)"
	},

	"SendSetRawSubTitle_0": {
		"prefix": "SendSetRawSubTitle",
		"body": "SendSetRawSubTitle(${1:SubTitle string})$0",
		"description": "(cClientHandle) () Sends the raw subtitle to the client. Doesn't make the client display it yet, use SendTitleTimes() to show both the title and the subtitle."
	},

	"SendBlockChange_0": {
		"prefix": "SendBlockChange",
		"body": "SendBlockChange(${1:BlockX number}, ${2:BlockY number}, ${3:BlockZ number}, ${4:BlockType number}, ${5:BlockMeta number})$0",
		"description": "(cClientHandle) () Sends a BlockChange packet to the client. This can be used to create fake blocks only for that player."
	},

	"GetForgeMods_0": {
		"prefix": "GetForgeMods",
		"body": "GetForgeMods()$0",
		"description": "(cClientHandle) (table) Returns the Forge mods installed on the client."
	},

	"GetProtocolVersion_0": {
		"prefix": "GetProtocolVersion",
		"body": "GetProtocolVersion()$0",
		"description": "(cClientHandle) (number) Returns the protocol version number of the protocol that the client is talking. Returns zero if the protocol version is not (yet) known."
	},

	"SendEntityAnimation_0": {
		"prefix": "SendEntityAnimation",
		"body": "SendEntityAnimation(${1:Entity cEntity}, ${2:AnimationNumber number})$0",
		"description": "(cClientHandle) () Sends the specified animation of the specified entity to the client. The AnimationNumber is protocol-specific."
	},

	"SetViewDistance_0": {
		"prefix": "SetViewDistance",
		"body": "SetViewDistance(${1:ViewDistance number})$0",
		"description": "(cClientHandle) () Sets the viewdistance (number of chunks loaded for the player in each direction)"
	},

	"SetUsername_0": {
		"prefix": "SetUsername",
		"body": "SetUsername(${1:Name string})$0",
		"description": "(cClientHandle) () Sets the username"
	},

	"Kick_0": {
		"prefix": "Kick",
		"body": "Kick(${1:Reason string})$0",
		"description": "(cClientHandle) () Kicks the user with the specified reason"
	},

	"SendPluginMessage_0": {
		"prefix": "SendPluginMessage",
		"body": "SendPluginMessage(${1:Channel string}, ${2:Message string})$0",
		"description": "(cClientHandle) () Sends the plugin message on the specified channel."
	},

	"IsUUIDOnline_0": {
		"prefix": "IsUUIDOnline",
		"body": "IsUUIDOnline(${1:UUID cUUID})$0",
		"description": "(cClientHandle) (boolean) Returns true if the UUID is generated by online auth, false if it is an offline-generated UUID. We use Version-3 UUIDs for offline UUIDs, online UUIDs are Version-4, thus we can tell them apart. Accepts both 32-char and 36-char UUIDs (with and without dashes)."
	},

	"IsForgeClient_0": {
		"prefix": "IsForgeClient",
		"body": "IsForgeClient()$0",
		"description": "(cClientHandle) (boolean) Returns true if the client is modded with Forge."
	},

	"HTTPTemplateRequest_0": {
		"prefix": "HTTPTemplateRequest",
		"body": "HTTPTemplateRequest$0",
		"description": "(HTTPTemplateRequest) () The Scary Class."
	},

	"Request_0": {
		"prefix": "Request",
		"body": "Request$0",
		"description": "(HTTPTemplateRequest) () The request for which the template is being built."
	},

	"cScoreboard_0": {
		"prefix": "cScoreboard",
		"body": "cScoreboard$0",
		"description": "(cScoreboard) () The Scary Class."
	},

	"dsCount_0": {
		"prefix": "dsCount",
		"body": "dsCount$0",
		"description": "(cScoreboard) () "
	},

	"dsList_0": {
		"prefix": "dsList",
		"body": "dsList$0",
		"description": "(cScoreboard) () "
	},

	"dsSidebar_0": {
		"prefix": "dsSidebar",
		"body": "dsSidebar$0",
		"description": "(cScoreboard) () "
	},

	"dsName_0": {
		"prefix": "dsName",
		"body": "dsName$0",
		"description": "(cScoreboard) () "
	},

	"ForEachTeam_0": {
		"prefix": "ForEachTeam",
		"body": "ForEachTeam(${1:CallbackFunction function})$0",
		"description": "(cScoreboard) (boolean) Calls the specified callback for each team in the scoreboard. Returns true if all teams have been processed (including when there are zero teams), or false if the callback function has aborted the enumeration by returning true. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cObjective|Objective}})</pre> The callback should return false or no value to continue with the next team, or true to abort the enumeration."
	},

	"ForEachObjective_0": {
		"prefix": "ForEachObjective",
		"body": "ForEachObjective(${1:CallbackFunction function})$0",
		"description": "(cScoreboard) (boolean) Calls the specified callback for each objective in the scoreboard. Returns true if all objectives have been processed (including when there are zero objectives), or false if the callback function has aborted the enumeration by returning true. The callback function has the following signature: <pre class='prettyprint lang-lua'>function Callback({{cObjective|Objective}})</pre> The callback should return false or no value to continue with the next objective, or true to abort the enumeration."
	},

	"GetNumObjectives_0": {
		"prefix": "GetNumObjectives",
		"body": "GetNumObjectives()$0",
		"description": "(cScoreboard) (number) Returns the nuber of registered objectives."
	},

	"GetTeam_1": {
		"prefix": "GetTeam",
		"body": "GetTeam(${1:TeamName string})$0",
		"description": "(cScoreboard) (cTeam) Returns the team with the specified name."
	},

	"SetDisplay_0": {
		"prefix": "SetDisplay",
		"body": "SetDisplay(${1:Name string}, ${2:DisplaySlot <unknown>})$0",
		"description": "(cScoreboard) () Updates the currently displayed objective."
	},

	"RegisterObjective_0": {
		"prefix": "RegisterObjective",
		"body": "RegisterObjective(${1:Name string}, ${2:DisplayName string}, ${3:Type <unknown>})$0",
		"description": "(cScoreboard) (cObjective) Registers a new scoreboard objective. Returns the {{cObjective}} instance, nil on error."
	},

	"AddPlayerScore_0": {
		"prefix": "AddPlayerScore",
		"body": "AddPlayerScore(${1:Name string}, ${2:Type <unknown>}, ${3:Value <unknown>})$0",
		"description": "(cScoreboard) () Adds a value to all player scores of the specified objective type."
	},

	"RemoveObjective_0": {
		"prefix": "RemoveObjective",
		"body": "RemoveObjective(${1:Name string})$0",
		"description": "(cScoreboard) (boolean) Removes the objective with the specified name. Returns true if operation was successful."
	},

	"GetObjectiveIn_0": {
		"prefix": "GetObjectiveIn",
		"body": "GetObjectiveIn(${1:DisplaySlot <unknown>})$0",
		"description": "(cScoreboard) (cObjective) Returns the objective in the specified display slot. Can be nil."
	},

	"GetTeamNames_0": {
		"prefix": "GetTeamNames",
		"body": "GetTeamNames()$0",
		"description": "(cScoreboard) (table) Returns the names of all teams, as an array-table of strings"
	},

	"RegisterTeam_0": {
		"prefix": "RegisterTeam",
		"body": "RegisterTeam(${1:Name string}, ${2:DisplayName string}, ${3:Prefix <unknown>}, ${4:Suffix <unknown>})$0",
		"description": "(cScoreboard) (cTeam) Registers a new team. Returns the {{cTeam}} instance, nil on error."
	},

	"GetNumTeams_0": {
		"prefix": "GetNumTeams",
		"body": "GetNumTeams()$0",
		"description": "(cScoreboard) (number) Returns the number of registered teams."
	},

	"GetObjective_0": {
		"prefix": "GetObjective",
		"body": "GetObjective(${1:string string})$0",
		"description": "(cScoreboard) (cObjective) Returns the objective with the specified name."
	},

	"RemoveTeam_0": {
		"prefix": "RemoveTeam",
		"body": "RemoveTeam(${1:TeamName string})$0",
		"description": "(cScoreboard) (boolean) Removes the team with the specified name. Returns true if operation was successful."
	},

	"cUrlClient_0": {
		"prefix": "cUrlClient",
		"body": "cUrlClient$0",
		"description": "(cUrlClient) () The Scary Class."
	},

	"Post_0": {
		"prefix": "Post",
		"body": "Post(${1:URL string}, ${2:Callbacks table}, ${3:Headers table}, ${4:RequestBody string}, ${5:Options table})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrMsg strin) Starts a HTTP POST request. Alias for Request('POST', ...). Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"Post_1": {
		"prefix": "Post",
		"body": "Post(${1:URL string}, ${2:Callbacks function})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrMsg strin) Starts a HTTP POST request. Alias for Request('POST', ...). Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"Delete_2": {
		"prefix": "Delete",
		"body": "Delete(${1:URL string}, ${2:Callbacks table}, ${3:Headers table}, ${4:RequestBody string}, ${5:Options table})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrorMessagge strin) Starts a HTTP DELETE request. Alias for Request('DELETE', ...). Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"Delete_3": {
		"prefix": "Delete",
		"body": "Delete(${1:URL string}, ${2:Callbacks function})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrorMessagge strin) Starts a HTTP DELETE request. Alias for Request('DELETE', ...). Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"Put_0": {
		"prefix": "Put",
		"body": "Put(${1:URL string}, ${2:Callbacks table}, ${3:Headers table}, ${4:RequestBody string}, ${5:Options table})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrMsg strin) Starts a HTTP PUT request. Alias for Request('PUT', ...). Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"Put_1": {
		"prefix": "Put",
		"body": "Put(${1:URL string}, ${2:Callbacks function})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrMsg strin) Starts a HTTP PUT request. Alias for Request('PUT', ...). Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"Request_1": {
		"prefix": "Request",
		"body": "Request(${1:Method string}, ${2:URL string}, ${3:Callbacks table}, ${4:Headers table}, ${5:RequestBody string}, ${6:Options table})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrMsg strin) Starts a request with the specified Method. Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"Get_3": {
		"prefix": "Get",
		"body": "Get(${1:URL string}, ${2:Callbacks table}, ${3:Headers table}, ${4:RequestBody string}, ${5:Options table})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrMsg strin) Starts a HTTP GET request. Alias for Request('GET', ...). Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"Get_4": {
		"prefix": "Get",
		"body": "Get(${1:URL string}, ${2:Callbacks function})$0",
		"description": "(cUrlClient) (IsSuccess boolean, ErrMsg strin) Starts a HTTP GET request. Alias for Request('GET', ...). Returns true on succes, false and error message on immediate failure (unparsable URL etc.)."
	},

	"cBlockInfo_0": {
		"prefix": "cBlockInfo",
		"body": "cBlockInfo$0",
		"description": "(cBlockInfo) () The Scary Class."
	},

	"m_IsSolid_0": {
		"prefix": "m_IsSolid",
		"body": "m_IsSolid$0",
		"description": "(cBlockInfo) () Is this block solid (player cannot walk through)? <b>OBSOLETE</b>, use cBlockInfo:IsSolid() instead."
	},

	"m_SpreadLightFalloff_0": {
		"prefix": "m_SpreadLightFalloff",
		"body": "m_SpreadLightFalloff$0",
		"description": "(cBlockInfo) () How much light do the blocks consume? <b>OBSOLETE</b>, use cBlockInfo:GetSpreadLightFalloff() instead."
	},

	"m_OneHitDig_0": {
		"prefix": "m_OneHitDig",
		"body": "m_OneHitDig$0",
		"description": "(cBlockInfo) () Is a block destroyed after a single hit? <b>OBSOLETE</b>, use cBlockInfo:IsOneHitDig() instead."
	},

	"m_FullyOccupiesVoxel_0": {
		"prefix": "m_FullyOccupiesVoxel",
		"body": "m_FullyOccupiesVoxel$0",
		"description": "(cBlockInfo) () Does this block fully occupy its voxel - is it a 'full' block? <b>OBSOLETE</b>, use cBlockInfo:FullyOccupiesVoxel() instead."
	},

	"m_Hardness_0": {
		"prefix": "m_Hardness",
		"body": "m_Hardness$0",
		"description": "(cBlockInfo) () The greater the value the longer the player needs to break the block. <b>OBSOLETE</b>, use cBlockInfo:GetHardness() instead."
	},

	"m_Transparent_0": {
		"prefix": "m_Transparent",
		"body": "m_Transparent$0",
		"description": "(cBlockInfo) () Is a block completely transparent? (light doesn't get decreased(?)). <b>OBSOLETE</b>, use cBlockInfo:IsTransparent() instead."
	},

	"m_LightValue_0": {
		"prefix": "m_LightValue",
		"body": "m_LightValue$0",
		"description": "(cBlockInfo) () How much light do the blocks emit on their own? <b>OBSOLETE</b>, use cBlockInfo:GetLightValue() instead."
	},

	"m_PistonBreakable_0": {
		"prefix": "m_PistonBreakable",
		"body": "m_PistonBreakable$0",
		"description": "(cBlockInfo) () Can a piston break this block? <b>OBSOLETE</b>, use cBlockInfo:IsPistonBreakable instead."
	},

	"m_BlockHeight_0": {
		"prefix": "m_BlockHeight",
		"body": "m_BlockHeight$0",
		"description": "(cBlockInfo) () The height of the block, a value between 0.0 and 1.0. <b>OBSOLETE</b>, use cBlockInfo:GetBlockHeight() instead."
	},

	"m_IsSnowable_0": {
		"prefix": "m_IsSnowable",
		"body": "m_IsSnowable$0",
		"description": "(cBlockInfo) () Can this block hold snow atop? <b>OBSOLETE</b>, use cBlockInfo:IsSnowable() instead"
	},

	"m_CanBeTerraformed_0": {
		"prefix": "m_CanBeTerraformed",
		"body": "m_CanBeTerraformed$0",
		"description": "(cBlockInfo) () Is this block suited to be terraformed? <b>OBSOLETE</b>, use cBlockInfo:CanBeTerraformed() instead."
	},

	"IsUseableBySpectator_0": {
		"prefix": "IsUseableBySpectator",
		"body": "IsUseableBySpectator(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns whether a spectator can interact with the specified block."
	},

	"FullyOccupiesVoxel_0": {
		"prefix": "FullyOccupiesVoxel",
		"body": "FullyOccupiesVoxel(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns whether the specified block fully occupies its voxel."
	},

	"IsOneHitDig_0": {
		"prefix": "IsOneHitDig",
		"body": "IsOneHitDig(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns true if the specified block type will be destroyed after a single hit."
	},

	"GetSpreadLightFalloff_0": {
		"prefix": "GetSpreadLightFalloff",
		"body": "GetSpreadLightFalloff(${1:BlockType number})$0",
		"description": "(cBlockInfo) (number) Returns how much light the specified block type consumes."
	},

	"GetBlockHeight_0": {
		"prefix": "GetBlockHeight",
		"body": "GetBlockHeight(${1:BlockType number})$0",
		"description": "(cBlockInfo) (number) Returns the block's hitbox height."
	},

	"CanBeTerraformed_0": {
		"prefix": "CanBeTerraformed",
		"body": "CanBeTerraformed(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns true if the block is suitable to be changed by a generator"
	},

	"IsRainBlocker_0": {
		"prefix": "IsRainBlocker",
		"body": "IsRainBlocker(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns true if the specified block type blocks rain from passing through."
	},

	"IsTransparent_0": {
		"prefix": "IsTransparent",
		"body": "IsTransparent(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns whether the specified block is transparent."
	},

	"IsSnowable_0": {
		"prefix": "IsSnowable",
		"body": "IsSnowable(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns whether the specified block type can hold snow atop."
	},

	"IsSolid_0": {
		"prefix": "IsSolid",
		"body": "IsSolid(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns whether the specified block type is solid."
	},

	"IsSkylightDispersant_0": {
		"prefix": "IsSkylightDispersant",
		"body": "IsSkylightDispersant(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns true if skylight is impeded by passage through a block of the specified type."
	},

	"IsPistonBreakable_0": {
		"prefix": "IsPistonBreakable",
		"body": "IsPistonBreakable(${1:BlockType number})$0",
		"description": "(cBlockInfo) (boolean) Returns true if a piston can break the specified block type."
	},

	"GetLightValue_0": {
		"prefix": "GetLightValue",
		"body": "GetLightValue(${1:BlockType number})$0",
		"description": "(cBlockInfo) (number) Returns how much light the specified block emits on its own."
	},

	"GetPlaceSound_0": {
		"prefix": "GetPlaceSound",
		"body": "GetPlaceSound(${1:BlockType number})$0",
		"description": "(cBlockInfo) (string) (<b>DEPRECATED</b>) Not used by cuberite internally and always returns an empty string."
	},

	"GetHardness_0": {
		"prefix": "GetHardness",
		"body": "GetHardness(${1:BlockType number})$0",
		"description": "(cBlockInfo) (number) Returns the block's hardness. The bigger the harder the block."
	},

	"Get_5": {
		"prefix": "Get",
		"body": "Get(${1:BlockType number})$0",
		"description": "(cBlockInfo) (cBlockInfo) Returns the {{cBlockInfo}} structure for the specified block type. <b>OBSOLETE</b>, use static functions instead"
	},

	"cWebAdmin_0": {
		"prefix": "cWebAdmin",
		"body": "cWebAdmin$0",
		"description": "(cWebAdmin) () The Scary Class."
	},

	"GetPage_0": {
		"prefix": "GetPage",
		"body": "GetPage(${1:Request HTTPRequest})$0",
		"description": "(cWebAdmin) (table) Returns the (inner HTML) page contents for the specified request. Calls the appropriate WebTab handler registered via AddWebTab() and returns the information from that plugin wrapped in a table with the following structure:<br/><pre class='prettyprint lang-lua'>{<br/>  Content = '',      -- Content returned by the plugin<br/>  ContentType = '',  -- Content type returned by the plugin, or 'text/html' if none returned<br/>  UrlPath = '',      -- UrlPath decoded from the request<br/>  TabTitle = '',     -- Title of the tab that handled the request, as given to AddWebTab()<br/>  PluginName = '',   -- API name of the plugin that handled the request<br/>  PluginFolder = '', -- Folder name (= display name) of the plugin that handled the request<br/>}</pre>This function is mainly used in the webadmin template file."
	},

	"AddWebTab_0": {
		"prefix": "AddWebTab",
		"body": "AddWebTab(${1:Title string}, ${2:UrlPath string}, ${3:HandlerFn function})$0",
		"description": "(cWebAdmin) () Adds a new web tab to webadmin. The tab uses 'Title' as its display string and is identified in the URL using the UrlPath (https://server.domain.com/webadmin/{PluginName}/{UrlPath}). The HandlerFn is the callback function that is called when the admin accesses the page, it has the following signature:<br/><pre class='prettyprint lang-lua'>function ({{HTTPRequest|a_Request}}, a_UrlPath)<br/>  return Content, ContentType<br/>end</pre> URLPath must not contain a '/', the recommendation is to use only 7-bit-clean ASCII character set."
	},

	"Reload_0": {
		"prefix": "Reload",
		"body": "Reload()$0",
		"description": "(cWebAdmin) () Reloads the webadmin's config - the allowed logins, the template script and the login page. Note that reloading will not change the 'enabled' state of the server, and it will not update listening ports. Existing WebTabs will be kept registered even after the reload."
	},

	"GetURLEncodedString_0": {
		"prefix": "GetURLEncodedString",
		"body": "GetURLEncodedString(${1:Input string})$0",
		"description": "(cWebAdmin) (string) <b>OBSOLETE</b> - use {{cUrlParser}}:UrlEncode() instead.<br/>Returns the string given to it escaped by URL encoding, which makes the string suitable for transmission in an URL. Invalid characters are turned into '%xy' values."
	},

	"GetBaseURL_0": {
		"prefix": "GetBaseURL",
		"body": "GetBaseURL(${1:URL string})$0",
		"description": "(cWebAdmin) (string) Returns the string that is the path of the base webadmin ('../../../webadmin') relative to the given URL."
	},

	"GetPorts_0": {
		"prefix": "GetPorts",
		"body": "GetPorts()$0",
		"description": "(cWebAdmin) (string) Returns a comma-separated list of ports on which the webadmin is configured to listen. Note that this list does include ports that may currently be unavailable (another server was already listening on them prior to launching Cuberite)."
	},

	"GetContentTypeFromFileExt_0": {
		"prefix": "GetContentTypeFromFileExt",
		"body": "GetContentTypeFromFileExt(${1:FileExt string})$0",
		"description": "(cWebAdmin) (string) Returns the content-type that should be used for files with the specified extension (without the dot), such as 'text/plain' for the 'txt' extension. If the extension is not known, returns an empty string."
	},

	"GetAllWebTabs_0": {
		"prefix": "GetAllWebTabs",
		"body": "GetAllWebTabs()$0",
		"description": "(cWebAdmin) (table) Returns an array-table with each item describing a web tab, for all web tabs registered in the WebAdmin, for all plugins. The returned table has the following format:<br/><pre class='prettyprint lang-lua'>{<br/>  {<br/>    PluginName = 'Plugin's API name',<br/>    UrlPath = 'UrlPath given to AddWebTab',<br/>    Title = 'Title given to AddWebTab',<br/>  },<br/>  ...<br/>}"
	},

	"GetHTMLEscapedString_0": {
		"prefix": "GetHTMLEscapedString",
		"body": "GetHTMLEscapedString(${1:Input string})$0",
		"description": "(cWebAdmin) (string) Gets the HTML-escaped representation of a requested string. This is useful for user input and game data that is not guaranteed to be escaped already."
	},

	"cWitherSkullEntity_0": {
		"prefix": "cWitherSkullEntity",
		"body": "cWitherSkullEntity$0",
		"description": "(cWitherSkullEntity) () The Scary Class."
	},

	"cMobSpawnerEntity_0": {
		"prefix": "cMobSpawnerEntity",
		"body": "cMobSpawnerEntity$0",
		"description": "(cMobSpawnerEntity) () The Scary Class."
	},

	"GetSpawnDelay_1": {
		"prefix": "GetSpawnDelay",
		"body": "GetSpawnDelay()$0",
		"description": "(cMobSpawnerEntity) (number) Returns the spawn delay. This is the tick delay that is needed to spawn new monsters."
	},

	"ResetTimer_0": {
		"prefix": "ResetTimer",
		"body": "ResetTimer()$0",
		"description": "(cMobSpawnerEntity) () Sets the spawn delay to a new random value."
	},

	"SetEntity_0": {
		"prefix": "SetEntity",
		"body": "SetEntity(${1:MobType eMonsterType})$0",
		"description": "(cMobSpawnerEntity) () Sets the type of the mob that will be spawned by this mob spawner."
	},

	"SetSpawnDelay_0": {
		"prefix": "SetSpawnDelay",
		"body": "SetSpawnDelay(${1:SpawnDelayTicks number})$0",
		"description": "(cMobSpawnerEntity) () Sets the spawn delay."
	},

	"GetEntity_0": {
		"prefix": "GetEntity",
		"body": "GetEntity()$0",
		"description": "(cMobSpawnerEntity) (MobType eMonsterTyp) Returns the entity type that will be spawn by this mob spawner."
	},

	"SpawnEntity_0": {
		"prefix": "SpawnEntity",
		"body": "SpawnEntity()$0",
		"description": "(cMobSpawnerEntity) () Spawns the entity. This function automaticly change the spawn delay!"
	},

	"UpdateActiveState_0": {
		"prefix": "UpdateActiveState",
		"body": "UpdateActiveState()$0",
		"description": "(cMobSpawnerEntity) () Upate the active flag from the mob spawner. This function is called every 5 seconds from the Tick() function."
	},

	"GetNearbyMonsterNum_0": {
		"prefix": "GetNearbyMonsterNum",
		"body": "GetNearbyMonsterNum(${1:MobType eMonsterType})$0",
		"description": "(cMobSpawnerEntity) (number) Returns the amount of this monster type in a 8-block radius (Y: 4-block radius)."
	},

	"GetNearbyPlayersNum_0": {
		"prefix": "GetNearbyPlayersNum",
		"body": "GetNearbyPlayersNum()$0",
		"description": "(cMobSpawnerEntity) (number) Returns the amount of the nearby players in a 16-block radius."
	},

	"cDropperEntity_0": {
		"prefix": "cDropperEntity",
		"body": "cDropperEntity$0",
		"description": "(cDropperEntity) () The Scary Class."
	},

	"cThrownSnowballEntity_0": {
		"prefix": "cThrownSnowballEntity",
		"body": "cThrownSnowballEntity$0",
		"description": "(cThrownSnowballEntity) () The Scary Class."
	},

	"cFireworkEntity_0": {
		"prefix": "cFireworkEntity",
		"body": "cFireworkEntity$0",
		"description": "(cFireworkEntity) () The Scary Class."
	},

	"SetTicksToExplosion_0": {
		"prefix": "SetTicksToExplosion",
		"body": "SetTicksToExplosion(${1:NumTicks number})$0",
		"description": "(cFireworkEntity) () Sets the number of ticks left until the firework explodes."
	},

	"SetItem_4": {
		"prefix": "SetItem",
		"body": "SetItem(${1:FireworkItem cItem})$0",
		"description": "(cFireworkEntity) () Sets a new item to be used for the firework."
	},

	"GetItem_5": {
		"prefix": "GetItem",
		"body": "GetItem()$0",
		"description": "(cFireworkEntity) (cItem) Returns the item that has been used to create the firework rocket. The item's m_FireworkItem member contains all the firework-related data."
	},

	"GetTicksToExplosion_0": {
		"prefix": "GetTicksToExplosion",
		"body": "GetTicksToExplosion()$0",
		"description": "(cFireworkEntity) (number) Returns the number of ticks left until the firework explodes."
	},

	"cFloater_0": {
		"prefix": "cFloater",
		"body": "cFloater$0",
		"description": "(cFloater) () The Scary Class."
	},

	"GetOwnerID_0": {
		"prefix": "GetOwnerID",
		"body": "GetOwnerID()$0",
		"description": "(cFloater) (EntityID numbe) Returns the EntityID of the player who owns the floater."
	},

	"GetAttachedMobID_0": {
		"prefix": "GetAttachedMobID",
		"body": "GetAttachedMobID()$0",
		"description": "(cFloater) (EntityID numbe) Returns the EntityID of a mob that this floater is attached to. Returns -1 if not attached to any mob."
	},

	"GetBitePos_0": {
		"prefix": "GetBitePos",
		"body": "GetBitePos()$0",
		"description": "(cFloater) (Name BitePosition, Type Vector3) Returns the position of the floater just before a fish bites. If a fish hasn't bitten the floater, this function returns the position the floater was cast from."
	},

	"CanPickup_1": {
		"prefix": "CanPickup",
		"body": "CanPickup()$0",
		"description": "(cFloater) (boolean) Returns true if the floater gives an item when the player right clicks."
	},

	"cThrownEggEntity_0": {
		"prefix": "cThrownEggEntity",
		"body": "cThrownEggEntity$0",
		"description": "(cThrownEggEntity) () The Scary Class."
	},

	"cExpBottleEntity_0": {
		"prefix": "cExpBottleEntity",
		"body": "cExpBottleEntity$0",
		"description": "(cExpBottleEntity) () The Scary Class."
	},

	"cPluginLua_0": {
		"prefix": "cPluginLua",
		"body": "cPluginLua$0",
		"description": "(cPluginLua) () The Scary Class."
	},

	"AddWebTab_1": {
		"prefix": "AddWebTab",
		"body": "AddWebTab(${1:Title string}, ${2:HandlerFn function})$0",
		"description": "(cPluginLua) () <b>OBSOLETE</b> - Use {{cWebAdmin}}:AddWebTab() instead."
	},

	"cBoundingBox_0": {
		"prefix": "cBoundingBox",
		"body": "cBoundingBox$0",
		"description": "(cBoundingBox) () The Scary Class."
	},

	"Intersect_0": {
		"prefix": "Intersect",
		"body": "Intersect(${1:OtherBbox cBoundingBox})$0",
		"description": "(cBoundingBox) (boolean , Intersection cBoundingBo) Checks if the intersection between this bounding box and another one is non-empty. Returns false if the intersection is empty, true and a new cBoundingBox representing the intersection of the two boxes."
	},

	"GetMinZ_0": {
		"prefix": "GetMinZ",
		"body": "GetMinZ()$0",
		"description": "(cBoundingBox) (number) Returns the minimum Z coord of the bounding box"
	},

	"GetMax_0": {
		"prefix": "GetMax",
		"body": "GetMax()$0",
		"description": "(cBoundingBox) (Point Vector3) Returns the boundary point with the maximum coords"
	},

	"Move_5": {
		"prefix": "Move",
		"body": "Move(${1:OffsetX number}, ${2:OffsetY number}, ${3:OffsetZ number})$0",
		"description": "(cBoundingBox) () Moves the bounding box by the specified offset in each axis"
	},

	"Move_6": {
		"prefix": "Move",
		"body": "Move(${1:Offset Vector3d})$0",
		"description": "(cBoundingBox) () Moves the bounding box by the specified offset in each axis"
	},

	"GetMinY_0": {
		"prefix": "GetMinY",
		"body": "GetMinY()$0",
		"description": "(cBoundingBox) (number) Returns the minimum Y coord of the bounding box"
	},

	"GetMinX_0": {
		"prefix": "GetMinX",
		"body": "GetMinX()$0",
		"description": "(cBoundingBox) (number) Returns the minimum X coord of the bounding box"
	},

	"Expand_1": {
		"prefix": "Expand",
		"body": "Expand(${1:ExpandX number}, ${2:ExpandY number}, ${3:ExpandZ number})$0",
		"description": "(cBoundingBox) () Expands this bounding box by the specified amount in each direction (so the box becomes larger by 2 * Expand in each axis)."
	},

	"cBoundingBox_0": {
		"prefix": "cBoundingBox",
		"body": "cBoundingBox(${1:MinX number}, ${2:MaxX number}, ${3:MinY number}, ${4:MaxY number}, ${5:MinZ number}, ${6:MaxZ number})$0",
		"description": "(cBoundingBox) (cBoundingBox) Creates a new bounding box with the specified edges"
	},

	"cBoundingBox_1": {
		"prefix": "cBoundingBox",
		"body": "cBoundingBox(${1:Min Vector3d}, ${2:Max Vector3d})$0",
		"description": "(cBoundingBox) (cBoundingBox) Creates a new bounding box with the coords specified as two vectors"
	},

	"cBoundingBox_2": {
		"prefix": "cBoundingBox",
		"body": "cBoundingBox(${1:Pos Vector3d}, ${2:Radius number}, ${3:Height number})$0",
		"description": "(cBoundingBox) (cBoundingBox) Creates a new bounding box from the position given and radius (X/Z) and height. Radius is added from X/Z to calculate the maximum coords and subtracted from X/Z to get the minimum; minimum Y is set to Pos.y and maxumim Y to Pos.y plus Height. This corresponds with how {{cEntity|entities}} are represented in Minecraft."
	},

	"cBoundingBox_3": {
		"prefix": "cBoundingBox",
		"body": "cBoundingBox(${1:OtherBoundingBox cBoundingBox})$0",
		"description": "(cBoundingBox) (cBoundingBox) Creates a new copy of the given bounding box. Same result can be achieved by using a simple assignment."
	},

	"cBoundingBox_4": {
		"prefix": "cBoundingBox",
		"body": "cBoundingBox(${1:Pos Vector3d}, ${2:CubeSideLength number})$0",
		"description": "(cBoundingBox) (cBoundingBox) Creates a new bounding box as a cube with the specified side length centered around the specified point."
	},

	"Union_0": {
		"prefix": "Union",
		"body": "Union(${1:OtherBoundingBox cBoundingBox})$0",
		"description": "(cBoundingBox) (cBoundingBox) Returns the smallest bounding box that contains both OtherBoundingBox and this bounding box. Note that unlike the strict geometrical meaning of 'union', this operation actually returns a cBoundingBox."
	},

	"GetMaxZ_0": {
		"prefix": "GetMaxZ",
		"body": "GetMaxZ()$0",
		"description": "(cBoundingBox) (number) Returns the maximum Z coord of the bounding box"
	},

	"CalcLineIntersection_0": {
		"prefix": "CalcLineIntersection",
		"body": "CalcLineIntersection(${1:LineStart Vector3d}, ${2:LinePt2 Vector3d})$0",
		"description": "(cBoundingBox) (DoesIntersect boolean, LineCoeff number, Face eBlockFac) Calculates the intersection of a ray (half-line), given by two of its points, with the bounding box. Returns false if the line doesn't intersect the bounding box, or true, together with coefficient of the intersection (how much of the difference between the two ray points is needed to reach the intersection), and the face of the box which is intersected."
	},

	"CalcLineIntersection_1": {
		"prefix": "CalcLineIntersection",
		"body": "CalcLineIntersection(${1:BoxMin Vector3d}, ${2:BoxMax Vector3d}, ${3:LineStart Vector3d}, ${4:LinePt2 Vector3d})$0",
		"description": "(cBoundingBox) (DoesIntersect boolean, LineCoeff number, Face eBlockFac) Calculates the intersection of a ray (half-line), given by two of its points, with the bounding box specified as its minimum and maximum coords. Returns false if the line doesn't intersect the bounding box, or true, together with coefficient of the intersection (how much of the difference between the two ray points is needed to reach the intersection), and the face of the box which is intersected."
	},

	"IsInside_2": {
		"prefix": "IsInside",
		"body": "IsInside(${1:Point Vector3d})$0",
		"description": "(cBoundingBox) (boolean) Returns true if the specified point is inside (including on the edge) of the box."
	},

	"IsInside_3": {
		"prefix": "IsInside",
		"body": "IsInside(${1:PointX number}, ${2:PointY number}, ${3:PointZ number})$0",
		"description": "(cBoundingBox) (boolean) Returns true if the specified point is inside (including on the edge) of the box."
	},

	"IsInside_4": {
		"prefix": "IsInside",
		"body": "IsInside(${1:OtherBoundingBox cBoundingBox})$0",
		"description": "(cBoundingBox) (boolean) Returns true if OtherBoundingBox is inside of this box."
	},

	"IsInside_5": {
		"prefix": "IsInside",
		"body": "IsInside(${1:OtherBoxMin Vector3d}, ${2:OtherBoxMax Vector3d})$0",
		"description": "(cBoundingBox) (boolean) Returns true if the other bounding box, specified by its 2 corners, is inside of this box."
	},

	"IsInside_6": {
		"prefix": "IsInside",
		"body": "IsInside(${1:Min Vector3d}, ${2:Max Vector3d}, ${3:Point Vector3d})$0",
		"description": "(cBoundingBox) (boolean) Returns true if the specified point is inside the bounding box specified by its min / max corners"
	},

	"IsInside_7": {
		"prefix": "IsInside",
		"body": "IsInside(${1:Min Vector3d}, ${2:Max Vector3d}, ${3:X number}, ${4:Y number}, ${5:Z number})$0",
		"description": "(cBoundingBox) (boolean) Returns true if the specified point is inside the bounding box specified by its min / max corners"
	},

	"GetMaxX_0": {
		"prefix": "GetMaxX",
		"body": "GetMaxX()$0",
		"description": "(cBoundingBox) (number) Returns the maximum X coord of the bounding box"
	},

	"GetMin_0": {
		"prefix": "GetMin",
		"body": "GetMin()$0",
		"description": "(cBoundingBox) (Point Vector3) Returns the boundary point with the minimum coords"
	},

	"GetMaxY_0": {
		"prefix": "GetMaxY",
		"body": "GetMaxY()$0",
		"description": "(cBoundingBox) (number) Returns the maximum Y coord of the bounding box"
	},

	"DoesIntersect_1": {
		"prefix": "DoesIntersect",
		"body": "DoesIntersect(${1:OtherBoundingBox cBoundingBox})$0",
		"description": "(cBoundingBox) (boolean) Returns true if the two bounding boxes have an intersection of nonzero volume."
	},

	"cProjectileEntity_0": {
		"prefix": "cProjectileEntity",
		"body": "cProjectileEntity$0",
		"description": "(cProjectileEntity) () The Scary Class."
	},

	"GetCreatorUniqueID_0": {
		"prefix": "GetCreatorUniqueID",
		"body": "GetCreatorUniqueID()$0",
		"description": "(cProjectileEntity) (number) Returns the unique ID of the entity who created this projectile, or {{cEntity#INVALID_ID|cEntity.INVALID_ID}} if the projectile wasn't created by an entity."
	},

	"IsInGround_0": {
		"prefix": "IsInGround",
		"body": "IsInGround()$0",
		"description": "(cProjectileEntity) (boolean) Returns true if this projectile has hit the ground."
	},

	"GetCreatorName_0": {
		"prefix": "GetCreatorName",
		"body": "GetCreatorName()$0",
		"description": "(cProjectileEntity) (string) Returns the name of the player that created the projectile. Will be empty for non-player creators"
	},

	"GetCreator_0": {
		"prefix": "GetCreator",
		"body": "GetCreator()$0",
		"description": "(cProjectileEntity) (cEntity) Returns the entity who created this projectile. May return nil."
	},

	"GetProjectileKind_0": {
		"prefix": "GetProjectileKind",
		"body": "GetProjectileKind()$0",
		"description": "(cProjectileEntity) (cProjectileEntity#eKind) Returns the kind of this projectile (pkXXX constant)"
	},

	"GetMCAClassName_0": {
		"prefix": "GetMCAClassName",
		"body": "GetMCAClassName()$0",
		"description": "(cProjectileEntity) (string) Returns the string that identifies the projectile type (class name) in MCA files"
	},

	"pkArrow_0": {
		"prefix": "pkArrow",
		"body": "pkArrow$0",
		"description": "(cProjectileEntity) () The projectile is an {{cArrowEntity|arrow}}"
	},

	"pkFirework_0": {
		"prefix": "pkFirework",
		"body": "pkFirework$0",
		"description": "(cProjectileEntity) () The projectile is a (flying) {{cFireworkEntity|firework}}"
	},

	"pkEnderPearl_0": {
		"prefix": "pkEnderPearl",
		"body": "pkEnderPearl$0",
		"description": "(cProjectileEntity) () The projectile is a {{cThrownEnderPearlEntity|thrown enderpearl}}"
	},

	"pkFishingFloat_0": {
		"prefix": "pkFishingFloat",
		"body": "pkFishingFloat$0",
		"description": "(cProjectileEntity) () The projectile is a {{cFloater|fishing float}}"
	},

	"pkEgg_0": {
		"prefix": "pkEgg",
		"body": "pkEgg$0",
		"description": "(cProjectileEntity) () The projectile is a {{cThrownEggEntity|thrown egg}}"
	},

	"pkFireCharge_0": {
		"prefix": "pkFireCharge",
		"body": "pkFireCharge$0",
		"description": "(cProjectileEntity) () The projectile is a {{cFireChargeEntity|fire charge}}"
	},

	"pkSnowball_0": {
		"prefix": "pkSnowball",
		"body": "pkSnowball$0",
		"description": "(cProjectileEntity) () The projectile is a {{cThrownSnowballEntity|thrown snowball}}"
	},

	"pkExpBottle_0": {
		"prefix": "pkExpBottle",
		"body": "pkExpBottle$0",
		"description": "(cProjectileEntity) () The projectile is a {{cExpBottleEntity|thrown exp bottle}}"
	},

	"pkWitherSkull_0": {
		"prefix": "pkWitherSkull",
		"body": "pkWitherSkull$0",
		"description": "(cProjectileEntity) () The projectile is a {{cWitherSkullEntity|wither skull}}"
	},

	"pkSplashPotion_0": {
		"prefix": "pkSplashPotion",
		"body": "pkSplashPotion$0",
		"description": "(cProjectileEntity) () The projectile is a {{cSplashPotionEntity|thrown splash potion}}"
	},

	"pkGhastFireball_0": {
		"prefix": "pkGhastFireball",
		"body": "pkGhastFireball$0",
		"description": "(cProjectileEntity) () The projectile is a {{cGhastFireballEntity|ghast fireball}}"
	},

	"Vector3i_0": {
		"prefix": "Vector3i",
		"body": "Vector3i$0",
		"description": "(Vector3i) () The Scary Class."
	},

	"y_2": {
		"prefix": "y",
		"body": "y$0",
		"description": "(Vector3i) () The Y coord of the vector."
	},

	"x_2": {
		"prefix": "x",
		"body": "x$0",
		"description": "(Vector3i) () The X coord of the vector."
	},

	"z_2": {
		"prefix": "z",
		"body": "z$0",
		"description": "(Vector3i) () The Z coord of the vector."
	},

	"EPS_2": {
		"prefix": "EPS",
		"body": "EPS$0",
		"description": "(Vector3i) () The max difference between two coords for which the coords are assumed equal (in LineCoeffToXYPlane() et al). Quite useless with integer-only vector."
	},

	"NO_INTERSECTION_2": {
		"prefix": "NO_INTERSECTION",
		"body": "NO_INTERSECTION$0",
		"description": "(Vector3i) () Special return value for the LineCoeffToXYPlane() et al meaning that there's no intersection with the plane."
	},

	"operator_mul_4": {
		"prefix": "operator_mul",
		"body": "operator_mul(${1:Multiplier number})$0",
		"description": "(Vector3i) (Vector3i) Returns a new Vector3i object that has each of its coords multiplied by the specified number"
	},

	"operator_mul_5": {
		"prefix": "operator_mul",
		"body": "operator_mul(${1:PerCoordMultipliers Vector3i})$0",
		"description": "(Vector3i) (Vector3i) Returns a new Vector3i object that has each of its coords multiplied by the respective coord of the specified vector."
	},

	"LineCoeffToXZPlane_2": {
		"prefix": "LineCoeffToXZPlane",
		"body": "LineCoeffToXZPlane(${1:Vector3i Vector3i}, ${2:Y number})$0",
		"description": "(Vector3i) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified Y coord. The result satisfies the following equation: (this + Result * (Param - this)).y = Y. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"HasNonZeroLength_2": {
		"prefix": "HasNonZeroLength",
		"body": "HasNonZeroLength()$0",
		"description": "(Vector3i) (boolean) Returns true if the vector has at least one coord non-zero."
	},

	"addedZ_2": {
		"prefix": "addedZ",
		"body": "addedZ(${1:ofs number})$0",
		"description": "(Vector3i) (Vector3i) Returns a copy of the vector, moved by the specified offset on the Z axis"
	},

	"LineCoeffToXYPlane_2": {
		"prefix": "LineCoeffToXYPlane",
		"body": "LineCoeffToXYPlane(${1:Vector3i Vector3i}, ${2:Z number})$0",
		"description": "(Vector3i) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified Z coord. The result satisfies the following equation: (this + Result * (Param - this)).z = Z. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"operator_plus_2": {
		"prefix": "operator_plus",
		"body": "operator_plus(${1:Addend Vector3i})$0",
		"description": "(Vector3i) (Vector3i) Returns a new Vector3f object that holds the vector sum of this vector and the specified vector."
	},

	"Set_4": {
		"prefix": "Set",
		"body": "Set(${1:x number}, ${2:y number}, ${3:z number})$0",
		"description": "(Vector3i) () Sets all the coords of the vector at once"
	},

	"operator_sub_4": {
		"prefix": "operator_sub",
		"body": "operator_sub(${1:Subtrahend Vector3i})$0",
		"description": "(Vector3i) (Vector3i) Returns a new Vector3i object that holds the vector differrence between this vector and the specified vector."
	},

	"operator_sub_5": {
		"prefix": "operator_sub",
		"body": "operator_sub(${1:Subtrahend Vector3i})$0",
		"description": "(Vector3i) (Vector3i) Returns a new Vector3i that is a negative of this vector (all coords multiplied by -1)."
	},

	"Normalize_2": {
		"prefix": "Normalize",
		"body": "Normalize()$0",
		"description": "(Vector3i) () Normalizes this vector (makes it 1 unit long while keeping the direction). Quite useless for integer-only vectors, since the normalized vector will almost always truncate to zero vector. FIXME: Fails for zero vectors."
	},

	"Dot_2": {
		"prefix": "Dot",
		"body": "Dot(${1:Other Vector3i})$0",
		"description": "(Vector3i) (number) Returns the dot product of this vector and the specified vector."
	},

	"TurnCW_2": {
		"prefix": "TurnCW",
		"body": "TurnCW()$0",
		"description": "(Vector3i) () Rotates the vector 90 degrees clockwise around the vertical axis. Note that this is specific to minecraft's axis ordering, which is X+ left, Z+ down."
	},

	"Length_2": {
		"prefix": "Length",
		"body": "Length()$0",
		"description": "(Vector3i) (number) Returns the (euclidean) length of this vector."
	},

	"operator_div_4": {
		"prefix": "operator_div",
		"body": "operator_div(${1:Divisor number})$0",
		"description": "(Vector3i) (Vector3i) Returns a new Vector3i object that has each of its coords divided by the specified number"
	},

	"operator_div_5": {
		"prefix": "operator_div",
		"body": "operator_div(${1:PerCoordDivisors Vector3i})$0",
		"description": "(Vector3i) (Vector3i) Returns a new Vector3i object that has each of its coords divided by the respective coord of the specified vector."
	},

	"NormalizeCopy_2": {
		"prefix": "NormalizeCopy",
		"body": "NormalizeCopy()$0",
		"description": "(Vector3i) (Vector3f) Returns a copy of this vector that is normalized (1 unit long while keeping the same direction). Quite useless for integer-only vectors, since the normalized vector will almost always truncate to zero vector. FIXME: Fails for zero vectors."
	},

	"Clamp_4": {
		"prefix": "Clamp",
		"body": "Clamp(${1:min number}, ${2:max number})$0",
		"description": "(Vector3i) () Clamps each coord into the specified range."
	},

	"Move_7": {
		"prefix": "Move",
		"body": "Move(${1:x number}, ${2:y number}, ${3:z number})$0",
		"description": "(Vector3i) () Moves the vector by the specified amount in each axis direction."
	},

	"Move_8": {
		"prefix": "Move",
		"body": "Move(${1:Diff Vector3i})$0",
		"description": "(Vector3i) () Adds the specified vector to this vector. Is slightly better performant than adding with a '+' because this doesn't create a new object for the result."
	},

	"EqualsEps_2": {
		"prefix": "EqualsEps",
		"body": "EqualsEps(${1:Other Vector3i}, ${2:Eps number})$0",
		"description": "(Vector3i) (boolean) Returns true if the differences between each corresponding coords of this vector and the one specified, are less than the specified Eps. Normally not too useful for integer-only vectors, but still included for API completeness."
	},

	"Equals_2": {
		"prefix": "Equals",
		"body": "Equals(${1:Other Vector3i})$0",
		"description": "(Vector3i) (boolean) Returns true if this vector is exactly the same as the specified vector."
	},

	"Abs_2": {
		"prefix": "Abs",
		"body": "Abs()$0",
		"description": "(Vector3i) () Updates each coord to its absolute value."
	},

	"addedX_2": {
		"prefix": "addedX",
		"body": "addedX(${1:ofs number})$0",
		"description": "(Vector3i) (Vector3i) Returns a copy of the vector, moved by the specified offset on the X axis"
	},

	"addedXZ_2": {
		"prefix": "addedXZ",
		"body": "addedXZ(${1:ofsX number}, ${2:ofsZ number})$0",
		"description": "(Vector3i) (Vector3i) Returns a copy of the vector, moved by the specified offsets on the X and Z axes"
	},

	"Vector3i_0": {
		"prefix": "Vector3i",
		"body": "Vector3i()$0",
		"description": "(Vector3i) (Vector3i) Creates a new Vector3i object with zero coords."
	},

	"Vector3i_1": {
		"prefix": "Vector3i",
		"body": "Vector3i(${1:x number}, ${2:y number}, ${3:z number})$0",
		"description": "(Vector3i) (Vector3i) Creates a new Vector3i object with the specified coords."
	},

	"Vector3i_2": {
		"prefix": "Vector3i",
		"body": "Vector3i(${1:Vector3d Vector3d})$0",
		"description": "(Vector3i) (Vector3i) Creates a new Vector3i object with coords copied and floor()-ed from the specified {{Vector3d}}."
	},

	"Floor_2": {
		"prefix": "Floor",
		"body": "Floor()$0",
		"description": "(Vector3i) (Vector3i) Returns a new {{Vector3i}} object with coords set to math.floor of this vector's coords. Normally not too useful with integer-only vectors, but still included for API completeness."
	},

	"TurnCCW_2": {
		"prefix": "TurnCCW",
		"body": "TurnCCW()$0",
		"description": "(Vector3i) () Rotates the vector 90 degrees counterclockwise around the vertical axis. Note that this is specific to minecraft's axis ordering, which is X+ left, Z+ down."
	},

	"SqrLength_2": {
		"prefix": "SqrLength",
		"body": "SqrLength()$0",
		"description": "(Vector3i) (number) Returns the (euclidean) length of this vector, squared. This operation is slightly less computationally expensive than Length(), while it conserves some properties of Length(), such as comparison."
	},

	"Cross_2": {
		"prefix": "Cross",
		"body": "Cross(${1:Other Vector3i})$0",
		"description": "(Vector3i) (Vector3i) Returns a new Vector3i that is a {{https://en.wikipedia.org/wiki/Cross_product|cross product}} of this vector and the specified vector."
	},

	"LineCoeffToYZPlane_2": {
		"prefix": "LineCoeffToYZPlane",
		"body": "LineCoeffToYZPlane(${1:Vector3i Vector3i}, ${2:X number})$0",
		"description": "(Vector3i) (number) Returns the coefficient for the line from the specified vector through this vector to reach the specified X coord. The result satisfies the following equation: (this + Result * (Param - this)).x = X. Returns the NO_INTERSECTION constant if there's no intersection."
	},

	"clamp_2": {
		"prefix": "clamp",
		"body": "clamp(${1:min number}, ${2:max number})$0",
		"description": "(Vector3i) () <b>OBSOLETE</b>, use Clamp() instead."
	},

	"addedY_2": {
		"prefix": "addedY",
		"body": "addedY(${1:ofs number})$0",
		"description": "(Vector3i) (Vector3i) Returns a copy of the vector, moved by the specified offset on the Y axis"
	},

	"abs_2": {
		"prefix": "abs",
		"body": "abs()$0",
		"description": "(Vector3i) () <b>OBSOLETE</b>, use Abs() instead."
	},

	"cTCPLink_0": {
		"prefix": "cTCPLink",
		"body": "cTCPLink$0",
		"description": "(cTCPLink) () The Scary Class."
	},

	"GetLocalPort_0": {
		"prefix": "GetLocalPort",
		"body": "GetLocalPort()$0",
		"description": "(cTCPLink) (number) Returns the port of the local endpoint of the TCP connection."
	},

	"Close_2": {
		"prefix": "Close",
		"body": "Close()$0",
		"description": "(cTCPLink) () Closes the link forcefully (TCP RST). There's no guarantee that the last sent data is even being delivered. See also the Shutdown() method."
	},

	"Send_1": {
		"prefix": "Send",
		"body": "Send(${1:Data string})$0",
		"description": "(cTCPLink) () Sends the data (raw string) to the remote peer. The data is sent asynchronously and there is no report on the success of the send operation, other than the connection being closed or reset by the underlying OS."
	},

	"GetRemotePort_0": {
		"prefix": "GetRemotePort",
		"body": "GetRemotePort()$0",
		"description": "(cTCPLink) (number) Returns the port of the remote endpoint of the TCP connection."
	},

	"GetLocalIP_0": {
		"prefix": "GetLocalIP",
		"body": "GetLocalIP()$0",
		"description": "(cTCPLink) (string) Returns the IP address of the local endpoint of the TCP connection."
	},

	"StartTLSServer_0": {
		"prefix": "StartTLSServer",
		"body": "StartTLSServer(${1:Certificate string}, ${2:PrivateKey string}, ${3:PrivateKeyPassword string}, ${4:StartTLSData string})$0",
		"description": "(cTCPLink) (IsSuccess boolean, ErrorMessage strin) Starts a TLS handshake on the link, as a server side of the TLS. The plugin needs to specify the server certificate and its corresponding private key and password. The StartTLSData can contain data that the link has already reported as received but it should be used as part of the TLS handshake. Once the TLS handshake is started by this call, all incoming data is first decrypted before being sent to the OnReceivedData callback, and all outgoing data is queued until the TLS handshake completes, and then sent encrypted over the link. Returns true on success, nil and optional error message on immediate failure.<br/><b>NOTE:</b> The TLS support in the API is currently experimental and shouldn't be considered safe - there's no peer certificate verification and the error reporting is only basic."
	},

	"Shutdown_0": {
		"prefix": "Shutdown",
		"body": "Shutdown()$0",
		"description": "(cTCPLink) () Shuts the socket down for sending data. Notifies the remote peer that there will be no more data coming from us (TCP FIN). The data that is in flight will still be delivered. The underlying socket will be closed when the remote end shuts down as well, or after a timeout."
	},

	"StartTLSClient_0": {
		"prefix": "StartTLSClient",
		"body": "StartTLSClient(${1:OwnCert string}, ${2:OwnPrivateKey string}, ${3:OwnPrivateKeyPassword string})$0",
		"description": "(cTCPLink) (IsSuccess boolean, ErrorMessage strin) Starts a TLS handshake on the link, as a client side of the TLS. The Own___ parameters specify the client certificate and its corresponding private key and password; all three parameters are optional and no client certificate is presented to the remote peer if they are not used or all empty. Once the TLS handshake is started by this call, all incoming data is first decrypted before being sent to the OnReceivedData callback, and all outgoing data is queued until the TLS handshake completes, and then sent encrypted over the link. Returns true on success, nil and optional error message on immediate failure.<br/><b>NOTE:</b> The TLS support in the API is currently experimental and shouldn't be considered safe - there's no peer certificate verification and the error reporting is only basic."
	},

	"GetRemoteIP_0": {
		"prefix": "GetRemoteIP",
		"body": "GetRemoteIP()$0",
		"description": "(cTCPLink) (string) Returns the IP address of the remote endpoint of the TCP connection."
	},

	"cSignEntity_0": {
		"prefix": "cSignEntity",
		"body": "cSignEntity$0",
		"description": "(cSignEntity) () The Scary Class."
	},

	"GetLine_0": {
		"prefix": "GetLine",
		"body": "GetLine(${1:LineIndex number})$0",
		"description": "(cSignEntity) (string) Returns the specified line. LineIndex is expected between 0 and 3. Returns empty string and logs to server console when LineIndex is invalid."
	},

	"SetLine_0": {
		"prefix": "SetLine",
		"body": "SetLine(${1:LineIndex number}, ${2:LineText string})$0",
		"description": "(cSignEntity) () Sets the specified line. LineIndex is expected between 0 and 3. Logs to server console when LineIndex is invalid."
	},

	"SetLines_0": {
		"prefix": "SetLines",
		"body": "SetLines(${1:Line1 string}, ${2:Line2 string}, ${3:Line3 string}, ${4:Line4 string})$0",
		"description": "(cSignEntity) () Sets all the sign's lines at once. Note that plugins should prefer to use {{cWorld}}:SetSignLines(), so that they can specify the player on whose behalf the sign is being set."
	}
}
